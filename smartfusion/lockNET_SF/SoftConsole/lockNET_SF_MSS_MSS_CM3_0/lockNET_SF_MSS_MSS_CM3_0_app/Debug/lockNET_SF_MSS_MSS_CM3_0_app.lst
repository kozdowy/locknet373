
lockNET_SF_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018e8  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  200018e8  200018e8  000098e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ec  200018ec  200018ec  000098ec  2**2
                  ALLOC
  3 .stack        00003000  200019d8  200019d8  000098ec  2**0
                  ALLOC
  4 .comment      000001d9  00000000  00000000  000098ec  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  00009ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000844  00000000  00000000  00009f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004e0d  00000000  00000000  0000a761  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b73  00000000  00000000  0000f56e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002897  00000000  00000000  000100e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000cec  00000000  00000000  00012978  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000211c  00000000  00000000  00013664  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000152a  00000000  00000000  00015780  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00037d8e  00000000  00000000  00016caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0004ea38  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000418  00000000  00000000  0004ea5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	2000032f 	.word	0x2000032f
2000006c:	20000331 	.word	0x20000331
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	20001525 	.word	0x20001525
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	20001551 	.word	0x20001551
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	200004a1 	.word	0x200004a1
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>

2000032e <UART0_IRQHandler>:
2000032e:	e7fe      	b.n	2000032e <UART0_IRQHandler>

20000330 <UART1_IRQHandler>:
20000330:	e7fe      	b.n	20000330 <UART1_IRQHandler>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>
20000336:	e7fe      	b.n	20000336 <SPI1_IRQHandler+0x2>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>
2000034c:	e7fe      	b.n	2000034c <CommError_IRQHandler+0x2>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	200016d9 	.word	0x200016d9
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	200018e8 	.word	0x200018e8
20000450:	200018e8 	.word	0x200018e8
20000454:	200018e8 	.word	0x200018e8
20000458:	200018ec 	.word	0x200018ec
2000045c:	00000000 	.word	0x00000000
20000460:	200018ec 	.word	0x200018ec
20000464:	200019d8 	.word	0x200019d8
20000468:	200016e5 	.word	0x200016e5
2000046c:	200004b5 	.word	0x200004b5

20000470 <__do_global_dtors_aux>:
20000470:	f641 03ec 	movw	r3, #6380	; 0x18ec
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f641 00e8 	movw	r0, #6376	; 0x18e8
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <Fabric_IRQHandler>:
#include "contact_switch.h"


// Interrupts Handler
__attribute__ ((interrupt)) void Fabric_IRQHandler( void )
{
200004a0:	4668      	mov	r0, sp
200004a2:	f020 0107 	bic.w	r1, r0, #7
200004a6:	468d      	mov	sp, r1
200004a8:	b481      	push	{r0, r7}
200004aa:	af00      	add	r7, sp, #0

	// For the NFC module
	//int n_bytes_to_read =; //Need to look it in the datasheet
	//uint8_t receive_buf[10];
	//nfc_read(receive_buf,n_bytes_to_read);
}
200004ac:	46bd      	mov	sp, r7
200004ae:	bc81      	pop	{r0, r7}
200004b0:	4685      	mov	sp, r0
200004b2:	4770      	bx	lr

200004b4 <main>:

// Main program
int main()
{
200004b4:	b580      	push	{r7, lr}
200004b6:	b088      	sub	sp, #32
200004b8:	af00      	add	r7, sp, #0
	// MSS_GPIO initialization
	MSS_GPIO_init();
200004ba:	f001 f87d 	bl	200015b8 <MSS_GPIO_init>
	int i;

	// Testing
	nfc_setup();
200004be:	f000 f833 	bl	20000528 <nfc_setup>

	uint8_t ack_buf[7];
	uint8_t receive_buf[14];
	uint8_t command[] = {0x02};
200004c2:	f04f 0302 	mov.w	r3, #2
200004c6:	703b      	strb	r3, [r7, #0]
	//uint8_t status_buff[9];
	//uint8_t rf;

	nfc_send_command(command, 1);
200004c8:	463b      	mov	r3, r7
200004ca:	4618      	mov	r0, r3
200004cc:	f04f 0101 	mov.w	r1, #1
200004d0:	f000 f8a0 	bl	20000614 <nfc_send_command>
	for(i=0;i<2000;i++);
200004d4:	f04f 0300 	mov.w	r3, #0
200004d8:	61fb      	str	r3, [r7, #28]
200004da:	e003      	b.n	200004e4 <main+0x30>
200004dc:	69fb      	ldr	r3, [r7, #28]
200004de:	f103 0301 	add.w	r3, r3, #1
200004e2:	61fb      	str	r3, [r7, #28]
200004e4:	69fa      	ldr	r2, [r7, #28]
200004e6:	f240 73cf 	movw	r3, #1999	; 0x7cf
200004ea:	429a      	cmp	r2, r3
200004ec:	ddf6      	ble.n	200004dc <main+0x28>
	nfc_read(ack_buf, sizeof(ack_buf));
200004ee:	f107 0314 	add.w	r3, r7, #20
200004f2:	4618      	mov	r0, r3
200004f4:	f04f 0107 	mov.w	r1, #7
200004f8:	f000 f86c 	bl	200005d4 <nfc_read>

	while(1){
//		nfc_send_command(command, 1);
		for(i=0;i<2000;i++);
200004fc:	f04f 0300 	mov.w	r3, #0
20000500:	61fb      	str	r3, [r7, #28]
20000502:	e003      	b.n	2000050c <main+0x58>
20000504:	69fb      	ldr	r3, [r7, #28]
20000506:	f103 0301 	add.w	r3, r3, #1
2000050a:	61fb      	str	r3, [r7, #28]
2000050c:	69fa      	ldr	r2, [r7, #28]
2000050e:	f240 73cf 	movw	r3, #1999	; 0x7cf
20000512:	429a      	cmp	r2, r3
20000514:	ddf6      	ble.n	20000504 <main+0x50>
		nfc_read(receive_buf, sizeof(receive_buf));
20000516:	f107 0304 	add.w	r3, r7, #4
2000051a:	4618      	mov	r0, r3
2000051c:	f04f 010e 	mov.w	r1, #14
20000520:	f000 f858 	bl	200005d4 <nfc_read>
//		for(i=0;i<2000;i++);
	}
20000524:	e7ea      	b.n	200004fc <main+0x48>
20000526:	bf00      	nop

20000528 <nfc_setup>:
/* Function for setting up the NFC module
 * Description:
 * Receives: 	Nothing
 * Returns:		Nothing
 */
void nfc_setup(void){
20000528:	b580      	push	{r7, lr}
2000052a:	b082      	sub	sp, #8
2000052c:	af00      	add	r7, sp, #0
	MSS_I2C_init(&g_mss_i2c1 , PN532_I2C_ADDRESS, MSS_I2C_PCLK_DIV_960 );
2000052e:	f641 1064 	movw	r0, #6500	; 0x1964
20000532:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000536:	f04f 0124 	mov.w	r1, #36	; 0x24
2000053a:	f04f 0204 	mov.w	r2, #4
2000053e:	f000 f975 	bl	2000082c <MSS_I2C_init>
	MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_OUTPUT_MODE);
20000542:	f04f 0000 	mov.w	r0, #0
20000546:	f04f 0105 	mov.w	r1, #5
2000054a:	f001 f86b 	bl	20001624 <MSS_GPIO_config>
	int i;

	// Delays required for set up
	MSS_GPIO_set_output(MSS_GPIO_0 ,(uint8_t) 1);
2000054e:	f04f 0000 	mov.w	r0, #0
20000552:	f04f 0101 	mov.w	r1, #1
20000556:	f001 f883 	bl	20001660 <MSS_GPIO_set_output>
	for(i=0;i<100000;i++);
2000055a:	f04f 0300 	mov.w	r3, #0
2000055e:	607b      	str	r3, [r7, #4]
20000560:	e003      	b.n	2000056a <nfc_setup+0x42>
20000562:	687b      	ldr	r3, [r7, #4]
20000564:	f103 0301 	add.w	r3, r3, #1
20000568:	607b      	str	r3, [r7, #4]
2000056a:	687a      	ldr	r2, [r7, #4]
2000056c:	f248 639f 	movw	r3, #34463	; 0x869f
20000570:	f2c0 0301 	movt	r3, #1
20000574:	429a      	cmp	r2, r3
20000576:	ddf4      	ble.n	20000562 <nfc_setup+0x3a>
	MSS_GPIO_set_output(MSS_GPIO_0 ,(uint8_t) 0);
20000578:	f04f 0000 	mov.w	r0, #0
2000057c:	f04f 0100 	mov.w	r1, #0
20000580:	f001 f86e 	bl	20001660 <MSS_GPIO_set_output>
	for(i=0;i<3000000;i++); // We need 400 milisecs (we get 418 msec => OK)
20000584:	f04f 0300 	mov.w	r3, #0
20000588:	607b      	str	r3, [r7, #4]
2000058a:	e003      	b.n	20000594 <nfc_setup+0x6c>
2000058c:	687b      	ldr	r3, [r7, #4]
2000058e:	f103 0301 	add.w	r3, r3, #1
20000592:	607b      	str	r3, [r7, #4]
20000594:	687a      	ldr	r2, [r7, #4]
20000596:	f24c 63bf 	movw	r3, #50879	; 0xc6bf
2000059a:	f2c0 032d 	movt	r3, #45	; 0x2d
2000059e:	429a      	cmp	r2, r3
200005a0:	ddf4      	ble.n	2000058c <nfc_setup+0x64>
	MSS_GPIO_set_output(MSS_GPIO_0 ,(uint8_t)  1);
200005a2:	f04f 0000 	mov.w	r0, #0
200005a6:	f04f 0101 	mov.w	r1, #1
200005aa:	f001 f859 	bl	20001660 <MSS_GPIO_set_output>
	for(i=0;i<100000;i++); //We need 10 msecs (we get 18 msec => OK)
200005ae:	f04f 0300 	mov.w	r3, #0
200005b2:	607b      	str	r3, [r7, #4]
200005b4:	e003      	b.n	200005be <nfc_setup+0x96>
200005b6:	687b      	ldr	r3, [r7, #4]
200005b8:	f103 0301 	add.w	r3, r3, #1
200005bc:	607b      	str	r3, [r7, #4]
200005be:	687a      	ldr	r2, [r7, #4]
200005c0:	f248 639f 	movw	r3, #34463	; 0x869f
200005c4:	f2c0 0301 	movt	r3, #1
200005c8:	429a      	cmp	r2, r3
200005ca:	ddf4      	ble.n	200005b6 <nfc_setup+0x8e>
	/* times tested with oscilloscope */
	return;
}
200005cc:	f107 0708 	add.w	r7, r7, #8
200005d0:	46bd      	mov	sp, r7
200005d2:	bd80      	pop	{r7, pc}

200005d4 <nfc_read>:
 * Receives: buff -> Buffer (address) where the written data will be stored
 * 			 n	  -> Number of bytes to read
 * Returns:	 Nothing
 */

void nfc_read(uint8_t *buff, uint8_t n){
200005d4:	b580      	push	{r7, lr}
200005d6:	b084      	sub	sp, #16
200005d8:	af02      	add	r7, sp, #8
200005da:	6078      	str	r0, [r7, #4]
200005dc:	460b      	mov	r3, r1
200005de:	70fb      	strb	r3, [r7, #3]
	// Read transaction
	MSS_I2C_read
200005e0:	78fb      	ldrb	r3, [r7, #3]
200005e2:	f04f 0200 	mov.w	r2, #0
200005e6:	9200      	str	r2, [sp, #0]
200005e8:	f641 1064 	movw	r0, #6500	; 0x1964
200005ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005f0:	f04f 0124 	mov.w	r1, #36	; 0x24
200005f4:	687a      	ldr	r2, [r7, #4]
200005f6:	f000 fa49 	bl	20000a8c <MSS_I2C_read>
	    	    PN532_I2C_ADDRESS,
	    	    buff,
	    	    n,
	    	    MSS_I2C_RELEASE_BUS
	    );
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
200005fa:	f641 1064 	movw	r0, #6500	; 0x1964
200005fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000602:	f04f 0100 	mov.w	r1, #0
20000606:	f000 fabb 	bl	20000b80 <MSS_I2C_wait_complete>
	return;
}
2000060a:	f107 0708 	add.w	r7, r7, #8
2000060e:	46bd      	mov	sp, r7
20000610:	bd80      	pop	{r7, pc}
20000612:	bf00      	nop

20000614 <nfc_send_command>:
/*
 * Description:
 * Receives:
 * Returns:	 Nothing
 */
void nfc_send_command(uint8_t* command, uint8_t len){
20000614:	b580      	push	{r7, lr}
20000616:	b08c      	sub	sp, #48	; 0x30
20000618:	af02      	add	r7, sp, #8
2000061a:	6078      	str	r0, [r7, #4]
2000061c:	460b      	mov	r3, r1
2000061e:	70fb      	strb	r3, [r7, #3]
	uint16_t length = 0;
20000620:	f04f 0300 	mov.w	r3, #0
20000624:	843b      	strh	r3, [r7, #32]
	uint8_t buffer[20];
	buffer[length++] = (uint8_t) PN532_PREAMBLE; // Preamble
20000626:	8c3b      	ldrh	r3, [r7, #32]
20000628:	f107 0128 	add.w	r1, r7, #40	; 0x28
2000062c:	440b      	add	r3, r1
2000062e:	f04f 0200 	mov.w	r2, #0
20000632:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000636:	8c3b      	ldrh	r3, [r7, #32]
20000638:	f103 0301 	add.w	r3, r3, #1
2000063c:	843b      	strh	r3, [r7, #32]
	buffer[length++] = 0x00; // Start bits
2000063e:	8c3b      	ldrh	r3, [r7, #32]
20000640:	f107 0228 	add.w	r2, r7, #40	; 0x28
20000644:	4413      	add	r3, r2
20000646:	f04f 0200 	mov.w	r2, #0
2000064a:	f803 2c1c 	strb.w	r2, [r3, #-28]
2000064e:	8c3b      	ldrh	r3, [r7, #32]
20000650:	f103 0301 	add.w	r3, r3, #1
20000654:	843b      	strh	r3, [r7, #32]
	buffer[length++] = 0xFF; // Start bits
20000656:	8c3b      	ldrh	r3, [r7, #32]
20000658:	f107 0128 	add.w	r1, r7, #40	; 0x28
2000065c:	440b      	add	r3, r1
2000065e:	f04f 32ff 	mov.w	r2, #4294967295
20000662:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000666:	8c3b      	ldrh	r3, [r7, #32]
20000668:	f103 0301 	add.w	r3, r3, #1
2000066c:	843b      	strh	r3, [r7, #32]
	buffer[length++] = (len + 1); // Length of (n_data_bytes + TFI byte)
2000066e:	8c3b      	ldrh	r3, [r7, #32]
20000670:	78fa      	ldrb	r2, [r7, #3]
20000672:	f102 0201 	add.w	r2, r2, #1
20000676:	b2d2      	uxtb	r2, r2
20000678:	f107 0128 	add.w	r1, r7, #40	; 0x28
2000067c:	440b      	add	r3, r1
2000067e:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000682:	8c3b      	ldrh	r3, [r7, #32]
20000684:	f103 0301 	add.w	r3, r3, #1
20000688:	843b      	strh	r3, [r7, #32]
	buffer[length++] = (uint8_t)(0x100 - (len + 1)); // LCS
2000068a:	8c3b      	ldrh	r3, [r7, #32]
2000068c:	78fa      	ldrb	r2, [r7, #3]
2000068e:	ea6f 0202 	mvn.w	r2, r2
20000692:	b2d2      	uxtb	r2, r2
20000694:	f107 0128 	add.w	r1, r7, #40	; 0x28
20000698:	440b      	add	r3, r1
2000069a:	f803 2c1c 	strb.w	r2, [r3, #-28]
2000069e:	8c3b      	ldrh	r3, [r7, #32]
200006a0:	f103 0301 	add.w	r3, r3, #1
200006a4:	843b      	strh	r3, [r7, #32]
	buffer[length++] = (uint8_t) PN532_HOST_TO_NFC; // Write
200006a6:	8c3b      	ldrh	r3, [r7, #32]
200006a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
200006ac:	4413      	add	r3, r2
200006ae:	f06f 022b 	mvn.w	r2, #43	; 0x2b
200006b2:	f803 2c1c 	strb.w	r2, [r3, #-28]
200006b6:	8c3b      	ldrh	r3, [r7, #32]
200006b8:	f103 0301 	add.w	r3, r3, #1
200006bc:	843b      	strh	r3, [r7, #32]
	uint8_t dcs = PN532_HOST_TO_NFC;
200006be:	f06f 032b 	mvn.w	r3, #43	; 0x2b
200006c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int i = 0;
200006c6:	f04f 0300 	mov.w	r3, #0
200006ca:	627b      	str	r3, [r7, #36]	; 0x24
	for(i = 0; i < len; ++i){
200006cc:	f04f 0300 	mov.w	r3, #0
200006d0:	627b      	str	r3, [r7, #36]	; 0x24
200006d2:	e01a      	b.n	2000070a <nfc_send_command+0xf6>
		dcs += command[i];
200006d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	4413      	add	r3, r2
200006da:	781a      	ldrb	r2, [r3, #0]
200006dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
200006e0:	4413      	add	r3, r2
200006e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		buffer[length++] = command[i];
200006e6:	8c3b      	ldrh	r3, [r7, #32]
200006e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
200006ea:	687a      	ldr	r2, [r7, #4]
200006ec:	440a      	add	r2, r1
200006ee:	7812      	ldrb	r2, [r2, #0]
200006f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
200006f4:	440b      	add	r3, r1
200006f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
200006fa:	8c3b      	ldrh	r3, [r7, #32]
200006fc:	f103 0301 	add.w	r3, r3, #1
20000700:	843b      	strh	r3, [r7, #32]
	buffer[length++] = (len + 1); // Length of (n_data_bytes + TFI byte)
	buffer[length++] = (uint8_t)(0x100 - (len + 1)); // LCS
	buffer[length++] = (uint8_t) PN532_HOST_TO_NFC; // Write
	uint8_t dcs = PN532_HOST_TO_NFC;
	int i = 0;
	for(i = 0; i < len; ++i){
20000702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000704:	f103 0301 	add.w	r3, r3, #1
20000708:	627b      	str	r3, [r7, #36]	; 0x24
2000070a:	78fa      	ldrb	r2, [r7, #3]
2000070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000070e:	429a      	cmp	r2, r3
20000710:	dce0      	bgt.n	200006d4 <nfc_send_command+0xc0>
		dcs += command[i];
		buffer[length++] = command[i];
	}
	buffer[length++] = (uint8_t)(0x100 - dcs); // DCS
20000712:	8c3b      	ldrh	r3, [r7, #32]
20000714:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
20000718:	f1c2 0200 	rsb	r2, r2, #0
2000071c:	b2d2      	uxtb	r2, r2
2000071e:	f107 0128 	add.w	r1, r7, #40	; 0x28
20000722:	440b      	add	r3, r1
20000724:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000728:	8c3b      	ldrh	r3, [r7, #32]
2000072a:	f103 0301 	add.w	r3, r3, #1
2000072e:	843b      	strh	r3, [r7, #32]
	buffer[length++] = PN532_POSTAMBLE; // Postamble
20000730:	8c3b      	ldrh	r3, [r7, #32]
20000732:	f107 0228 	add.w	r2, r7, #40	; 0x28
20000736:	4413      	add	r3, r2
20000738:	f04f 0200 	mov.w	r2, #0
2000073c:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000740:	8c3b      	ldrh	r3, [r7, #32]
20000742:	f103 0301 	add.w	r3, r3, #1
20000746:	843b      	strh	r3, [r7, #32]

	MSS_I2C_write
20000748:	f107 020c 	add.w	r2, r7, #12
2000074c:	8c3b      	ldrh	r3, [r7, #32]
2000074e:	f04f 0100 	mov.w	r1, #0
20000752:	9100      	str	r1, [sp, #0]
20000754:	f641 1064 	movw	r0, #6500	; 0x1964
20000758:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000075c:	f04f 0124 	mov.w	r1, #36	; 0x24
20000760:	f000 f91a 	bl	20000998 <MSS_I2C_write>
				PN532_I2C_ADDRESS,
				buffer,
				length,
				MSS_I2C_RELEASE_BUS
		);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
20000764:	f641 1064 	movw	r0, #6500	; 0x1964
20000768:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000076c:	f04f 0100 	mov.w	r1, #0
20000770:	f000 fa06 	bl	20000b80 <MSS_I2C_wait_complete>
	return;
}
20000774:	f107 0728 	add.w	r7, r7, #40	; 0x28
20000778:	46bd      	mov	sp, r7
2000077a:	bd80      	pop	{r7, pc}

2000077c <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000077c:	b480      	push	{r7}
2000077e:	b083      	sub	sp, #12
20000780:	af00      	add	r7, sp, #0
20000782:	4603      	mov	r3, r0
20000784:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000786:	f24e 1300 	movw	r3, #57600	; 0xe100
2000078a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000078e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000792:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000796:	88f9      	ldrh	r1, [r7, #6]
20000798:	f001 011f 	and.w	r1, r1, #31
2000079c:	f04f 0001 	mov.w	r0, #1
200007a0:	fa00 f101 	lsl.w	r1, r0, r1
200007a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200007a8:	f107 070c 	add.w	r7, r7, #12
200007ac:	46bd      	mov	sp, r7
200007ae:	bc80      	pop	{r7}
200007b0:	4770      	bx	lr
200007b2:	bf00      	nop

200007b4 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
200007b4:	b480      	push	{r7}
200007b6:	b083      	sub	sp, #12
200007b8:	af00      	add	r7, sp, #0
200007ba:	4603      	mov	r3, r0
200007bc:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200007be:	f24e 1300 	movw	r3, #57600	; 0xe100
200007c2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200007c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200007ca:	ea4f 1252 	mov.w	r2, r2, lsr #5
200007ce:	88f9      	ldrh	r1, [r7, #6]
200007d0:	f001 011f 	and.w	r1, r1, #31
200007d4:	f04f 0001 	mov.w	r0, #1
200007d8:	fa00 f101 	lsl.w	r1, r0, r1
200007dc:	f102 0220 	add.w	r2, r2, #32
200007e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200007e4:	f107 070c 	add.w	r7, r7, #12
200007e8:	46bd      	mov	sp, r7
200007ea:	bc80      	pop	{r7}
200007ec:	4770      	bx	lr
200007ee:	bf00      	nop

200007f0 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
200007f0:	b480      	push	{r7}
200007f2:	b083      	sub	sp, #12
200007f4:	af00      	add	r7, sp, #0
200007f6:	4603      	mov	r3, r0
200007f8:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200007fa:	f24e 1300 	movw	r3, #57600	; 0xe100
200007fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000802:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000806:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000080a:	88f9      	ldrh	r1, [r7, #6]
2000080c:	f001 011f 	and.w	r1, r1, #31
20000810:	f04f 0001 	mov.w	r0, #1
20000814:	fa00 f101 	lsl.w	r1, r0, r1
20000818:	f102 0260 	add.w	r2, r2, #96	; 0x60
2000081c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000820:	f107 070c 	add.w	r7, r7, #12
20000824:	46bd      	mov	sp, r7
20000826:	bc80      	pop	{r7}
20000828:	4770      	bx	lr
2000082a:	bf00      	nop

2000082c <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
2000082c:	b580      	push	{r7, lr}
2000082e:	b084      	sub	sp, #16
20000830:	af00      	add	r7, sp, #0
20000832:	6078      	str	r0, [r7, #4]
20000834:	4613      	mov	r3, r2
20000836:	460a      	mov	r2, r1
20000838:	70fa      	strb	r2, [r7, #3]
2000083a:	70bb      	strb	r3, [r7, #2]
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
2000083c:	78bb      	ldrb	r3, [r7, #2]
2000083e:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000840:	687a      	ldr	r2, [r7, #4]
20000842:	f641 03f0 	movw	r3, #6384	; 0x18f0
20000846:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000084a:	429a      	cmp	r2, r3
2000084c:	d007      	beq.n	2000085e <MSS_I2C_init+0x32>
2000084e:	687a      	ldr	r2, [r7, #4]
20000850:	f641 1364 	movw	r3, #6500	; 0x1964
20000854:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000858:	429a      	cmp	r2, r3
2000085a:	d000      	beq.n	2000085e <MSS_I2C_init+0x32>
2000085c:	be00      	bkpt	0x0000
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
2000085e:	f000 fe43 	bl	200014e8 <disable_interrupts>
20000862:	4603      	mov	r3, r0
20000864:	60bb      	str	r3, [r7, #8]
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
20000866:	6878      	ldr	r0, [r7, #4]
20000868:	f04f 0100 	mov.w	r1, #0
2000086c:	f04f 0274 	mov.w	r2, #116	; 0x74
20000870:	f000 ff60 	bl	20001734 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
20000874:	687a      	ldr	r2, [r7, #4]
20000876:	f641 03f0 	movw	r3, #6384	; 0x18f0
2000087a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000087e:	429a      	cmp	r2, r3
20000880:	d12c      	bne.n	200008dc <MSS_I2C_init+0xb0>
    {
        this_i2c->irqn = I2C0_IRQn;
20000882:	687b      	ldr	r3, [r7, #4]
20000884:	f04f 020e 	mov.w	r2, #14
20000888:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C0;
2000088a:	687a      	ldr	r2, [r7, #4]
2000088c:	f242 0300 	movw	r3, #8192	; 0x2000
20000890:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000894:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
20000896:	687a      	ldr	r2, [r7, #4]
20000898:	f240 0300 	movw	r3, #0
2000089c:	f2c4 2304 	movt	r3, #16900	; 0x4204
200008a0:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
200008a2:	f242 0300 	movw	r3, #8192	; 0x2000
200008a6:	f2ce 0304 	movt	r3, #57348	; 0xe004
200008aa:	f242 0200 	movw	r2, #8192	; 0x2000
200008ae:	f2ce 0204 	movt	r2, #57348	; 0xe004
200008b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
200008b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
200008b8:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
200008ba:	f04f 000e 	mov.w	r0, #14
200008be:	f7ff ff97 	bl	200007f0 <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
200008c2:	f242 0300 	movw	r3, #8192	; 0x2000
200008c6:	f2ce 0304 	movt	r3, #57348	; 0xe004
200008ca:	f242 0200 	movw	r2, #8192	; 0x2000
200008ce:	f2ce 0204 	movt	r2, #57348	; 0xe004
200008d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
200008d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
200008d8:	631a      	str	r2, [r3, #48]	; 0x30
200008da:	e02b      	b.n	20000934 <MSS_I2C_init+0x108>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
200008dc:	687b      	ldr	r3, [r7, #4]
200008de:	f04f 0211 	mov.w	r2, #17
200008e2:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C1;
200008e4:	687a      	ldr	r2, [r7, #4]
200008e6:	f242 0300 	movw	r3, #8192	; 0x2000
200008ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
200008ee:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
200008f0:	687a      	ldr	r2, [r7, #4]
200008f2:	f240 0300 	movw	r3, #0
200008f6:	f2c4 2324 	movt	r3, #16932	; 0x4224
200008fa:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
200008fc:	f242 0300 	movw	r3, #8192	; 0x2000
20000900:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000904:	f242 0200 	movw	r2, #8192	; 0x2000
20000908:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000090c:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000090e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20000912:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
20000914:	f04f 0011 	mov.w	r0, #17
20000918:	f7ff ff6a 	bl	200007f0 <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
2000091c:	f242 0300 	movw	r3, #8192	; 0x2000
20000920:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000924:	f242 0200 	movw	r2, #8192	; 0x2000
20000928:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000092c:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000092e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20000932:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
20000934:	687b      	ldr	r3, [r7, #4]
20000936:	699b      	ldr	r3, [r3, #24]
20000938:	461a      	mov	r2, r3
2000093a:	687b      	ldr	r3, [r7, #4]
2000093c:	61da      	str	r2, [r3, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
2000093e:	78fb      	ldrb	r3, [r7, #3]
20000940:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000944:	687b      	ldr	r3, [r7, #4]
20000946:	601a      	str	r2, [r3, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
20000948:	687b      	ldr	r3, [r7, #4]
2000094a:	699b      	ldr	r3, [r3, #24]
2000094c:	68fa      	ldr	r2, [r7, #12]
2000094e:	ea4f 0292 	mov.w	r2, r2, lsr #2
20000952:	f002 0201 	and.w	r2, r2, #1
20000956:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	699b      	ldr	r3, [r3, #24]
2000095c:	68fa      	ldr	r2, [r7, #12]
2000095e:	ea4f 0252 	mov.w	r2, r2, lsr #1
20000962:	f002 0201 	and.w	r2, r2, #1
20000966:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
20000968:	687b      	ldr	r3, [r7, #4]
2000096a:	699b      	ldr	r3, [r3, #24]
2000096c:	68fa      	ldr	r2, [r7, #12]
2000096e:	f002 0201 	and.w	r2, r2, #1
20000972:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
20000974:	687b      	ldr	r3, [r7, #4]
20000976:	695b      	ldr	r3, [r3, #20]
20000978:	687a      	ldr	r2, [r7, #4]
2000097a:	6812      	ldr	r2, [r2, #0]
2000097c:	b2d2      	uxtb	r2, r2
2000097e:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	699b      	ldr	r3, [r3, #24]
20000984:	f04f 0201 	mov.w	r2, #1
20000988:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
2000098a:	68b8      	ldr	r0, [r7, #8]
2000098c:	f000 fdbe 	bl	2000150c <restore_interrupts>
}
20000990:	f107 0710 	add.w	r7, r7, #16
20000994:	46bd      	mov	sp, r7
20000996:	bd80      	pop	{r7, pc}

20000998 <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
20000998:	b580      	push	{r7, lr}
2000099a:	b086      	sub	sp, #24
2000099c:	af00      	add	r7, sp, #0
2000099e:	60f8      	str	r0, [r7, #12]
200009a0:	607a      	str	r2, [r7, #4]
200009a2:	460a      	mov	r2, r1
200009a4:	72fa      	strb	r2, [r7, #11]
200009a6:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
200009a8:	68fa      	ldr	r2, [r7, #12]
200009aa:	f641 03f0 	movw	r3, #6384	; 0x18f0
200009ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009b2:	429a      	cmp	r2, r3
200009b4:	d007      	beq.n	200009c6 <MSS_I2C_write+0x2e>
200009b6:	68fa      	ldr	r2, [r7, #12]
200009b8:	f641 1364 	movw	r3, #6500	; 0x1964
200009bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009c0:	429a      	cmp	r2, r3
200009c2:	d000      	beq.n	200009c6 <MSS_I2C_write+0x2e>
200009c4:	be00      	bkpt	0x0000

    primask = disable_interrupts();
200009c6:	f000 fd8f 	bl	200014e8 <disable_interrupts>
200009ca:	4603      	mov	r3, r0
200009cc:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
200009ce:	68fb      	ldr	r3, [r7, #12]
200009d0:	7a1b      	ldrb	r3, [r3, #8]
200009d2:	2b00      	cmp	r3, #0
200009d4:	d103      	bne.n	200009de <MSS_I2C_write+0x46>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
200009d6:	68fb      	ldr	r3, [r7, #12]
200009d8:	f04f 0201 	mov.w	r2, #1
200009dc:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
200009de:	68fb      	ldr	r3, [r7, #12]
200009e0:	f04f 0201 	mov.w	r2, #1
200009e4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
200009e8:	7afb      	ldrb	r3, [r7, #11]
200009ea:	ea4f 0243 	mov.w	r2, r3, lsl #1
200009ee:	68fb      	ldr	r3, [r7, #12]
200009f0:	605a      	str	r2, [r3, #4]

    this_i2c->dir = WRITE_DIR;
200009f2:	68fb      	ldr	r3, [r7, #12]
200009f4:	f04f 0200 	mov.w	r2, #0
200009f8:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
200009fa:	68fb      	ldr	r3, [r7, #12]
200009fc:	687a      	ldr	r2, [r7, #4]
200009fe:	621a      	str	r2, [r3, #32]
    this_i2c->master_tx_size = write_size;
20000a00:	887a      	ldrh	r2, [r7, #2]
20000a02:	68fb      	ldr	r3, [r7, #12]
20000a04:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
20000a06:	68fb      	ldr	r3, [r7, #12]
20000a08:	f04f 0200 	mov.w	r2, #0
20000a0c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20000a0e:	68fb      	ldr	r3, [r7, #12]
20000a10:	f04f 0201 	mov.w	r2, #1
20000a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
20000a18:	68fb      	ldr	r3, [r7, #12]
20000a1a:	f897 2020 	ldrb.w	r2, [r7, #32]
20000a1e:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20000a20:	68fb      	ldr	r3, [r7, #12]
20000a22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20000a26:	b2db      	uxtb	r3, r3
20000a28:	2b01      	cmp	r3, #1
20000a2a:	d105      	bne.n	20000a38 <MSS_I2C_write+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
20000a2c:	68fb      	ldr	r3, [r7, #12]
20000a2e:	f04f 0201 	mov.w	r2, #1
20000a32:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
20000a36:	e004      	b.n	20000a42 <MSS_I2C_write+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20000a38:	68fb      	ldr	r3, [r7, #12]
20000a3a:	699b      	ldr	r3, [r3, #24]
20000a3c:	f04f 0201 	mov.w	r2, #1
20000a40:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
20000a42:	68fb      	ldr	r3, [r7, #12]
20000a44:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
20000a48:	2b01      	cmp	r3, #1
20000a4a:	d111      	bne.n	20000a70 <MSS_I2C_write+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20000a4c:	68fb      	ldr	r3, [r7, #12]
20000a4e:	699b      	ldr	r3, [r3, #24]
20000a50:	f04f 0200 	mov.w	r2, #0
20000a54:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
20000a56:	68fb      	ldr	r3, [r7, #12]
20000a58:	695b      	ldr	r3, [r3, #20]
20000a5a:	791b      	ldrb	r3, [r3, #4]
20000a5c:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20000a5e:	7cfb      	ldrb	r3, [r7, #19]
20000a60:	b2db      	uxtb	r3, r3
20000a62:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20000a64:	68fb      	ldr	r3, [r7, #12]
20000a66:	8a5b      	ldrh	r3, [r3, #18]
20000a68:	b21b      	sxth	r3, r3
20000a6a:	4618      	mov	r0, r3
20000a6c:	f7ff fec0 	bl	200007f0 <NVIC_ClearPendingIRQ>
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20000a70:	68fb      	ldr	r3, [r7, #12]
20000a72:	8a5b      	ldrh	r3, [r3, #18]
20000a74:	b21b      	sxth	r3, r3
20000a76:	4618      	mov	r0, r3
20000a78:	f7ff fe80 	bl	2000077c <NVIC_EnableIRQ>

    restore_interrupts( primask );
20000a7c:	6978      	ldr	r0, [r7, #20]
20000a7e:	f000 fd45 	bl	2000150c <restore_interrupts>
}
20000a82:	f107 0718 	add.w	r7, r7, #24
20000a86:	46bd      	mov	sp, r7
20000a88:	bd80      	pop	{r7, pc}
20000a8a:	bf00      	nop

20000a8c <MSS_I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20000a8c:	b580      	push	{r7, lr}
20000a8e:	b086      	sub	sp, #24
20000a90:	af00      	add	r7, sp, #0
20000a92:	60f8      	str	r0, [r7, #12]
20000a94:	607a      	str	r2, [r7, #4]
20000a96:	460a      	mov	r2, r1
20000a98:	72fa      	strb	r2, [r7, #11]
20000a9a:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20000a9c:	68fa      	ldr	r2, [r7, #12]
20000a9e:	f641 03f0 	movw	r3, #6384	; 0x18f0
20000aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000aa6:	429a      	cmp	r2, r3
20000aa8:	d007      	beq.n	20000aba <MSS_I2C_read+0x2e>
20000aaa:	68fa      	ldr	r2, [r7, #12]
20000aac:	f641 1364 	movw	r3, #6500	; 0x1964
20000ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ab4:	429a      	cmp	r2, r3
20000ab6:	d000      	beq.n	20000aba <MSS_I2C_read+0x2e>
20000ab8:	be00      	bkpt	0x0000

    primask = disable_interrupts();
20000aba:	f000 fd15 	bl	200014e8 <disable_interrupts>
20000abe:	4603      	mov	r3, r0
20000ac0:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20000ac2:	68fb      	ldr	r3, [r7, #12]
20000ac4:	7a1b      	ldrb	r3, [r3, #8]
20000ac6:	2b00      	cmp	r3, #0
20000ac8:	d103      	bne.n	20000ad2 <MSS_I2C_read+0x46>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
20000aca:	68fb      	ldr	r3, [r7, #12]
20000acc:	f04f 0202 	mov.w	r2, #2
20000ad0:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
20000ad2:	68fb      	ldr	r3, [r7, #12]
20000ad4:	f04f 0202 	mov.w	r2, #2
20000ad8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20000adc:	7afb      	ldrb	r3, [r7, #11]
20000ade:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000ae2:	68fb      	ldr	r3, [r7, #12]
20000ae4:	605a      	str	r2, [r3, #4]

    this_i2c->dir = READ_DIR;
20000ae6:	68fb      	ldr	r3, [r7, #12]
20000ae8:	f04f 0201 	mov.w	r2, #1
20000aec:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_rx_buffer = read_buffer;
20000aee:	68fb      	ldr	r3, [r7, #12]
20000af0:	687a      	ldr	r2, [r7, #4]
20000af2:	631a      	str	r2, [r3, #48]	; 0x30
    this_i2c->master_rx_size = read_size;
20000af4:	887a      	ldrh	r2, [r7, #2]
20000af6:	68fb      	ldr	r3, [r7, #12]
20000af8:	635a      	str	r2, [r3, #52]	; 0x34
    this_i2c->master_rx_idx = 0u;
20000afa:	68fb      	ldr	r3, [r7, #12]
20000afc:	f04f 0200 	mov.w	r2, #0
20000b00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20000b02:	68fb      	ldr	r3, [r7, #12]
20000b04:	f04f 0201 	mov.w	r2, #1
20000b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
20000b0c:	68fb      	ldr	r3, [r7, #12]
20000b0e:	f897 2020 	ldrb.w	r2, [r7, #32]
20000b12:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20000b14:	68fb      	ldr	r3, [r7, #12]
20000b16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20000b1a:	b2db      	uxtb	r3, r3
20000b1c:	2b01      	cmp	r3, #1
20000b1e:	d105      	bne.n	20000b2c <MSS_I2C_read+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
20000b20:	68fb      	ldr	r3, [r7, #12]
20000b22:	f04f 0201 	mov.w	r2, #1
20000b26:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
20000b2a:	e004      	b.n	20000b36 <MSS_I2C_read+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20000b2c:	68fb      	ldr	r3, [r7, #12]
20000b2e:	699b      	ldr	r3, [r3, #24]
20000b30:	f04f 0201 	mov.w	r2, #1
20000b34:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
20000b36:	68fb      	ldr	r3, [r7, #12]
20000b38:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
20000b3c:	2b01      	cmp	r3, #1
20000b3e:	d111      	bne.n	20000b64 <MSS_I2C_read+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20000b40:	68fb      	ldr	r3, [r7, #12]
20000b42:	699b      	ldr	r3, [r3, #24]
20000b44:	f04f 0200 	mov.w	r2, #0
20000b48:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
20000b4a:	68fb      	ldr	r3, [r7, #12]
20000b4c:	695b      	ldr	r3, [r3, #20]
20000b4e:	791b      	ldrb	r3, [r3, #4]
20000b50:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20000b52:	7cfb      	ldrb	r3, [r7, #19]
20000b54:	b2db      	uxtb	r3, r3
20000b56:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20000b58:	68fb      	ldr	r3, [r7, #12]
20000b5a:	8a5b      	ldrh	r3, [r3, #18]
20000b5c:	b21b      	sxth	r3, r3
20000b5e:	4618      	mov	r0, r3
20000b60:	f7ff fe46 	bl	200007f0 <NVIC_ClearPendingIRQ>
    }
    
    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20000b64:	68fb      	ldr	r3, [r7, #12]
20000b66:	8a5b      	ldrh	r3, [r3, #18]
20000b68:	b21b      	sxth	r3, r3
20000b6a:	4618      	mov	r0, r3
20000b6c:	f7ff fe06 	bl	2000077c <NVIC_EnableIRQ>
    restore_interrupts( primask );
20000b70:	6978      	ldr	r0, [r7, #20]
20000b72:	f000 fccb 	bl	2000150c <restore_interrupts>
}
20000b76:	f107 0718 	add.w	r7, r7, #24
20000b7a:	46bd      	mov	sp, r7
20000b7c:	bd80      	pop	{r7, pc}
20000b7e:	bf00      	nop

20000b80 <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
20000b80:	b480      	push	{r7}
20000b82:	b085      	sub	sp, #20
20000b84:	af00      	add	r7, sp, #0
20000b86:	6078      	str	r0, [r7, #4]
20000b88:	6039      	str	r1, [r7, #0]
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000b8a:	687a      	ldr	r2, [r7, #4]
20000b8c:	f641 03f0 	movw	r3, #6384	; 0x18f0
20000b90:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b94:	429a      	cmp	r2, r3
20000b96:	d007      	beq.n	20000ba8 <MSS_I2C_wait_complete+0x28>
20000b98:	687a      	ldr	r2, [r7, #4]
20000b9a:	f641 1364 	movw	r3, #6500	; 0x1964
20000b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ba2:	429a      	cmp	r2, r3
20000ba4:	d000      	beq.n	20000ba8 <MSS_I2C_wait_complete+0x28>
20000ba6:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
20000ba8:	687b      	ldr	r3, [r7, #4]
20000baa:	683a      	ldr	r2, [r7, #0]
20000bac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
20000bae:	687b      	ldr	r3, [r7, #4]
20000bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20000bb4:	73fb      	strb	r3, [r7, #15]
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
20000bb6:	7bfb      	ldrb	r3, [r7, #15]
20000bb8:	2b01      	cmp	r3, #1
20000bba:	d0f8      	beq.n	20000bae <MSS_I2C_wait_complete+0x2e>

    return i2c_status;
20000bbc:	7bfb      	ldrb	r3, [r7, #15]
}
20000bbe:	4618      	mov	r0, r3
20000bc0:	f107 0714 	add.w	r7, r7, #20
20000bc4:	46bd      	mov	sp, r7
20000bc6:	bc80      	pop	{r7}
20000bc8:	4770      	bx	lr
20000bca:	bf00      	nop

20000bcc <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
20000bcc:	b480      	push	{r7}
20000bce:	b083      	sub	sp, #12
20000bd0:	af00      	add	r7, sp, #0
20000bd2:	6078      	str	r0, [r7, #4]
    if( this_i2c->is_slave_enabled )
20000bd4:	687b      	ldr	r3, [r7, #4]
20000bd6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20000bda:	2b00      	cmp	r3, #0
20000bdc:	d004      	beq.n	20000be8 <enable_slave_if_required+0x1c>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
20000bde:	687b      	ldr	r3, [r7, #4]
20000be0:	699b      	ldr	r3, [r3, #24]
20000be2:	f04f 0201 	mov.w	r2, #1
20000be6:	609a      	str	r2, [r3, #8]
    }
}
20000be8:	f107 070c 	add.w	r7, r7, #12
20000bec:	46bd      	mov	sp, r7
20000bee:	bc80      	pop	{r7}
20000bf0:	4770      	bx	lr
20000bf2:	bf00      	nop

20000bf4 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
20000bf4:	b580      	push	{r7, lr}
20000bf6:	b084      	sub	sp, #16
20000bf8:	af00      	add	r7, sp, #0
20000bfa:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
20000bfc:	f04f 0301 	mov.w	r3, #1
20000c00:	73bb      	strb	r3, [r7, #14]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000c02:	687a      	ldr	r2, [r7, #4]
20000c04:	f641 03f0 	movw	r3, #6384	; 0x18f0
20000c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c0c:	429a      	cmp	r2, r3
20000c0e:	d007      	beq.n	20000c20 <mss_i2c_isr+0x2c>
20000c10:	687a      	ldr	r2, [r7, #4]
20000c12:	f641 1364 	movw	r3, #6500	; 0x1964
20000c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c1a:	429a      	cmp	r2, r3
20000c1c:	d000      	beq.n	20000c20 <mss_i2c_isr+0x2c>
20000c1e:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
20000c20:	687b      	ldr	r3, [r7, #4]
20000c22:	695b      	ldr	r3, [r3, #20]
20000c24:	791b      	ldrb	r3, [r3, #4]
20000c26:	72fb      	strb	r3, [r7, #11]

    switch( status )
20000c28:	7afb      	ldrb	r3, [r7, #11]
20000c2a:	b2db      	uxtb	r3, r3
20000c2c:	f1a3 0308 	sub.w	r3, r3, #8
20000c30:	2bd0      	cmp	r3, #208	; 0xd0
20000c32:	f200 841c 	bhi.w	2000146e <mss_i2c_isr+0x87a>
20000c36:	a201      	add	r2, pc, #4	; (adr r2, 20000c3c <mss_i2c_isr+0x48>)
20000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000c3c:	20000f81 	.word	0x20000f81
20000c40:	2000146f 	.word	0x2000146f
20000c44:	2000146f 	.word	0x2000146f
20000c48:	2000146f 	.word	0x2000146f
20000c4c:	2000146f 	.word	0x2000146f
20000c50:	2000146f 	.word	0x2000146f
20000c54:	2000146f 	.word	0x2000146f
20000c58:	2000146f 	.word	0x2000146f
20000c5c:	20000f81 	.word	0x20000f81
20000c60:	2000146f 	.word	0x2000146f
20000c64:	2000146f 	.word	0x2000146f
20000c68:	2000146f 	.word	0x2000146f
20000c6c:	2000146f 	.word	0x2000146f
20000c70:	2000146f 	.word	0x2000146f
20000c74:	2000146f 	.word	0x2000146f
20000c78:	2000146f 	.word	0x2000146f
20000c7c:	20001025 	.word	0x20001025
20000c80:	2000146f 	.word	0x2000146f
20000c84:	2000146f 	.word	0x2000146f
20000c88:	2000146f 	.word	0x2000146f
20000c8c:	2000146f 	.word	0x2000146f
20000c90:	2000146f 	.word	0x2000146f
20000c94:	2000146f 	.word	0x2000146f
20000c98:	2000146f 	.word	0x2000146f
20000c9c:	20001001 	.word	0x20001001
20000ca0:	2000146f 	.word	0x2000146f
20000ca4:	2000146f 	.word	0x2000146f
20000ca8:	2000146f 	.word	0x2000146f
20000cac:	2000146f 	.word	0x2000146f
20000cb0:	2000146f 	.word	0x2000146f
20000cb4:	2000146f 	.word	0x2000146f
20000cb8:	2000146f 	.word	0x2000146f
20000cbc:	20001025 	.word	0x20001025
20000cc0:	2000146f 	.word	0x2000146f
20000cc4:	2000146f 	.word	0x2000146f
20000cc8:	2000146f 	.word	0x2000146f
20000ccc:	2000146f 	.word	0x2000146f
20000cd0:	2000146f 	.word	0x2000146f
20000cd4:	2000146f 	.word	0x2000146f
20000cd8:	2000146f 	.word	0x2000146f
20000cdc:	200010b9 	.word	0x200010b9
20000ce0:	2000146f 	.word	0x2000146f
20000ce4:	2000146f 	.word	0x2000146f
20000ce8:	2000146f 	.word	0x2000146f
20000cec:	2000146f 	.word	0x2000146f
20000cf0:	2000146f 	.word	0x2000146f
20000cf4:	2000146f 	.word	0x2000146f
20000cf8:	2000146f 	.word	0x2000146f
20000cfc:	20000ff5 	.word	0x20000ff5
20000d00:	2000146f 	.word	0x2000146f
20000d04:	2000146f 	.word	0x2000146f
20000d08:	2000146f 	.word	0x2000146f
20000d0c:	2000146f 	.word	0x2000146f
20000d10:	2000146f 	.word	0x2000146f
20000d14:	2000146f 	.word	0x2000146f
20000d18:	2000146f 	.word	0x2000146f
20000d1c:	200010dd 	.word	0x200010dd
20000d20:	2000146f 	.word	0x2000146f
20000d24:	2000146f 	.word	0x2000146f
20000d28:	2000146f 	.word	0x2000146f
20000d2c:	2000146f 	.word	0x2000146f
20000d30:	2000146f 	.word	0x2000146f
20000d34:	2000146f 	.word	0x2000146f
20000d38:	2000146f 	.word	0x2000146f
20000d3c:	2000112d 	.word	0x2000112d
20000d40:	2000146f 	.word	0x2000146f
20000d44:	2000146f 	.word	0x2000146f
20000d48:	2000146f 	.word	0x2000146f
20000d4c:	2000146f 	.word	0x2000146f
20000d50:	2000146f 	.word	0x2000146f
20000d54:	2000146f 	.word	0x2000146f
20000d58:	2000146f 	.word	0x2000146f
20000d5c:	20001151 	.word	0x20001151
20000d60:	2000146f 	.word	0x2000146f
20000d64:	2000146f 	.word	0x2000146f
20000d68:	2000146f 	.word	0x2000146f
20000d6c:	2000146f 	.word	0x2000146f
20000d70:	2000146f 	.word	0x2000146f
20000d74:	2000146f 	.word	0x2000146f
20000d78:	2000146f 	.word	0x2000146f
20000d7c:	2000118b 	.word	0x2000118b
20000d80:	2000146f 	.word	0x2000146f
20000d84:	2000146f 	.word	0x2000146f
20000d88:	2000146f 	.word	0x2000146f
20000d8c:	2000146f 	.word	0x2000146f
20000d90:	2000146f 	.word	0x2000146f
20000d94:	2000146f 	.word	0x2000146f
20000d98:	2000146f 	.word	0x2000146f
20000d9c:	2000122d 	.word	0x2000122d
20000da0:	2000146f 	.word	0x2000146f
20000da4:	2000146f 	.word	0x2000146f
20000da8:	2000146f 	.word	0x2000146f
20000dac:	2000146f 	.word	0x2000146f
20000db0:	2000146f 	.word	0x2000146f
20000db4:	2000146f 	.word	0x2000146f
20000db8:	2000146f 	.word	0x2000146f
20000dbc:	20001223 	.word	0x20001223
20000dc0:	2000146f 	.word	0x2000146f
20000dc4:	2000146f 	.word	0x2000146f
20000dc8:	2000146f 	.word	0x2000146f
20000dcc:	2000146f 	.word	0x2000146f
20000dd0:	2000146f 	.word	0x2000146f
20000dd4:	2000146f 	.word	0x2000146f
20000dd8:	2000146f 	.word	0x2000146f
20000ddc:	2000122d 	.word	0x2000122d
20000de0:	2000146f 	.word	0x2000146f
20000de4:	2000146f 	.word	0x2000146f
20000de8:	2000146f 	.word	0x2000146f
20000dec:	2000146f 	.word	0x2000146f
20000df0:	2000146f 	.word	0x2000146f
20000df4:	2000146f 	.word	0x2000146f
20000df8:	2000146f 	.word	0x2000146f
20000dfc:	20001223 	.word	0x20001223
20000e00:	2000146f 	.word	0x2000146f
20000e04:	2000146f 	.word	0x2000146f
20000e08:	2000146f 	.word	0x2000146f
20000e0c:	2000146f 	.word	0x2000146f
20000e10:	2000146f 	.word	0x2000146f
20000e14:	2000146f 	.word	0x2000146f
20000e18:	2000146f 	.word	0x2000146f
20000e1c:	2000126f 	.word	0x2000126f
20000e20:	2000146f 	.word	0x2000146f
20000e24:	2000146f 	.word	0x2000146f
20000e28:	2000146f 	.word	0x2000146f
20000e2c:	2000146f 	.word	0x2000146f
20000e30:	2000146f 	.word	0x2000146f
20000e34:	2000146f 	.word	0x2000146f
20000e38:	2000146f 	.word	0x2000146f
20000e3c:	200011ef 	.word	0x200011ef
20000e40:	2000146f 	.word	0x2000146f
20000e44:	2000146f 	.word	0x2000146f
20000e48:	2000146f 	.word	0x2000146f
20000e4c:	2000146f 	.word	0x2000146f
20000e50:	2000146f 	.word	0x2000146f
20000e54:	2000146f 	.word	0x2000146f
20000e58:	2000146f 	.word	0x2000146f
20000e5c:	2000126f 	.word	0x2000126f
20000e60:	2000146f 	.word	0x2000146f
20000e64:	2000146f 	.word	0x2000146f
20000e68:	2000146f 	.word	0x2000146f
20000e6c:	2000146f 	.word	0x2000146f
20000e70:	2000146f 	.word	0x2000146f
20000e74:	2000146f 	.word	0x2000146f
20000e78:	2000146f 	.word	0x2000146f
20000e7c:	200011ef 	.word	0x200011ef
20000e80:	2000146f 	.word	0x2000146f
20000e84:	2000146f 	.word	0x2000146f
20000e88:	2000146f 	.word	0x2000146f
20000e8c:	2000146f 	.word	0x2000146f
20000e90:	2000146f 	.word	0x2000146f
20000e94:	2000146f 	.word	0x2000146f
20000e98:	2000146f 	.word	0x2000146f
20000e9c:	200012cb 	.word	0x200012cb
20000ea0:	2000146f 	.word	0x2000146f
20000ea4:	2000146f 	.word	0x2000146f
20000ea8:	2000146f 	.word	0x2000146f
20000eac:	2000146f 	.word	0x2000146f
20000eb0:	2000146f 	.word	0x2000146f
20000eb4:	2000146f 	.word	0x2000146f
20000eb8:	2000146f 	.word	0x2000146f
20000ebc:	200013a3 	.word	0x200013a3
20000ec0:	2000146f 	.word	0x2000146f
20000ec4:	2000146f 	.word	0x2000146f
20000ec8:	2000146f 	.word	0x2000146f
20000ecc:	2000146f 	.word	0x2000146f
20000ed0:	2000146f 	.word	0x2000146f
20000ed4:	2000146f 	.word	0x2000146f
20000ed8:	2000146f 	.word	0x2000146f
20000edc:	200013a3 	.word	0x200013a3
20000ee0:	2000146f 	.word	0x2000146f
20000ee4:	2000146f 	.word	0x2000146f
20000ee8:	2000146f 	.word	0x2000146f
20000eec:	2000146f 	.word	0x2000146f
20000ef0:	2000146f 	.word	0x2000146f
20000ef4:	2000146f 	.word	0x2000146f
20000ef8:	2000146f 	.word	0x2000146f
20000efc:	200013a3 	.word	0x200013a3
20000f00:	2000146f 	.word	0x2000146f
20000f04:	2000146f 	.word	0x2000146f
20000f08:	2000146f 	.word	0x2000146f
20000f0c:	2000146f 	.word	0x2000146f
20000f10:	2000146f 	.word	0x2000146f
20000f14:	2000146f 	.word	0x2000146f
20000f18:	2000146f 	.word	0x2000146f
20000f1c:	20001435 	.word	0x20001435
20000f20:	2000146f 	.word	0x2000146f
20000f24:	2000146f 	.word	0x2000146f
20000f28:	2000146f 	.word	0x2000146f
20000f2c:	2000146f 	.word	0x2000146f
20000f30:	2000146f 	.word	0x2000146f
20000f34:	2000146f 	.word	0x2000146f
20000f38:	2000146f 	.word	0x2000146f
20000f3c:	20001435 	.word	0x20001435
20000f40:	2000146f 	.word	0x2000146f
20000f44:	2000146f 	.word	0x2000146f
20000f48:	2000146f 	.word	0x2000146f
20000f4c:	2000146f 	.word	0x2000146f
20000f50:	2000146f 	.word	0x2000146f
20000f54:	2000146f 	.word	0x2000146f
20000f58:	2000146f 	.word	0x2000146f
20000f5c:	2000146f 	.word	0x2000146f
20000f60:	2000146f 	.word	0x2000146f
20000f64:	2000146f 	.word	0x2000146f
20000f68:	2000146f 	.word	0x2000146f
20000f6c:	2000146f 	.word	0x2000146f
20000f70:	2000146f 	.word	0x2000146f
20000f74:	2000146f 	.word	0x2000146f
20000f78:	2000146f 	.word	0x2000146f
20000f7c:	20001375 	.word	0x20001375
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
20000f80:	687b      	ldr	r3, [r7, #4]
20000f82:	699b      	ldr	r3, [r3, #24]
20000f84:	f04f 0200 	mov.w	r2, #0
20000f88:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
20000f8a:	687b      	ldr	r3, [r7, #4]
20000f8c:	695b      	ldr	r3, [r3, #20]
20000f8e:	687a      	ldr	r2, [r7, #4]
20000f90:	6852      	ldr	r2, [r2, #4]
20000f92:	b2d2      	uxtb	r2, r2
20000f94:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
20000f96:	687b      	ldr	r3, [r7, #4]
20000f98:	699b      	ldr	r3, [r3, #24]
20000f9a:	687a      	ldr	r2, [r7, #4]
20000f9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20000f9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
20000fa2:	687b      	ldr	r3, [r7, #4]
20000fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20000fa6:	2b00      	cmp	r3, #0
20000fa8:	d104      	bne.n	20000fb4 <mss_i2c_isr+0x3c0>
            {
                this_i2c->master_tx_idx = 0u;
20000faa:	687b      	ldr	r3, [r7, #4]
20000fac:	f04f 0200 	mov.w	r2, #0
20000fb0:	629a      	str	r2, [r3, #40]	; 0x28
20000fb2:	e007      	b.n	20000fc4 <mss_i2c_isr+0x3d0>
            }
            else if ( this_i2c->dir == READ_DIR)
20000fb4:	687b      	ldr	r3, [r7, #4]
20000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20000fb8:	2b01      	cmp	r3, #1
20000fba:	d103      	bne.n	20000fc4 <mss_i2c_isr+0x3d0>
            {
                this_i2c->master_rx_idx = 0u;
20000fbc:	687b      	ldr	r3, [r7, #4]
20000fbe:	f04f 0200 	mov.w	r2, #0
20000fc2:	639a      	str	r2, [r3, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
20000fc4:	687b      	ldr	r3, [r7, #4]
20000fc6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20000fca:	2b00      	cmp	r3, #0
20000fcc:	d004      	beq.n	20000fd8 <mss_i2c_isr+0x3e4>
            {
                this_i2c->is_transaction_pending = 0u;
20000fce:	687b      	ldr	r3, [r7, #4]
20000fd0:	f04f 0200 	mov.w	r2, #0
20000fd4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
20000fd8:	687b      	ldr	r3, [r7, #4]
20000fda:	7a1a      	ldrb	r2, [r3, #8]
20000fdc:	687b      	ldr	r3, [r7, #4]
20000fde:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
20000fe2:	429a      	cmp	r2, r3
20000fe4:	f000 8267 	beq.w	200014b6 <mss_i2c_isr+0x8c2>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
20000fe8:	687b      	ldr	r3, [r7, #4]
20000fea:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
20000fee:	687b      	ldr	r3, [r7, #4]
20000ff0:	721a      	strb	r2, [r3, #8]
            }
            break;
20000ff2:	e269      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20000ff4:	687b      	ldr	r3, [r7, #4]
20000ff6:	699b      	ldr	r3, [r3, #24]
20000ff8:	f04f 0201 	mov.w	r2, #1
20000ffc:	615a      	str	r2, [r3, #20]
            break;
20000ffe:	e263      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001000:	687b      	ldr	r3, [r7, #4]
20001002:	699b      	ldr	r3, [r3, #24]
20001004:	f04f 0201 	mov.w	r2, #1
20001008:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
2000100a:	687b      	ldr	r3, [r7, #4]
2000100c:	f04f 0202 	mov.w	r2, #2
20001010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
20001014:	687b      	ldr	r3, [r7, #4]
20001016:	f04f 0200 	mov.w	r2, #0
2000101a:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
2000101c:	6878      	ldr	r0, [r7, #4]
2000101e:	f7ff fdd5 	bl	20000bcc <enable_slave_if_required>
            break;
20001022:	e251      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20001024:	687b      	ldr	r3, [r7, #4]
20001026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001028:	687b      	ldr	r3, [r7, #4]
2000102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000102c:	429a      	cmp	r2, r3
2000102e:	d20d      	bcs.n	2000104c <mss_i2c_isr+0x458>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
20001030:	687b      	ldr	r3, [r7, #4]
20001032:	695a      	ldr	r2, [r3, #20]
20001034:	687b      	ldr	r3, [r7, #4]
20001036:	6a19      	ldr	r1, [r3, #32]
20001038:	687b      	ldr	r3, [r7, #4]
2000103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000103c:	4419      	add	r1, r3
2000103e:	7809      	ldrb	r1, [r1, #0]
20001040:	7211      	strb	r1, [r2, #8]
20001042:	f103 0201 	add.w	r2, r3, #1
20001046:	687b      	ldr	r3, [r7, #4]
20001048:	629a      	str	r2, [r3, #40]	; 0x28
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
2000104a:	e23d      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
2000104c:	687b      	ldr	r3, [r7, #4]
2000104e:	7a1b      	ldrb	r3, [r3, #8]
20001050:	2b03      	cmp	r3, #3
20001052:	d109      	bne.n	20001068 <mss_i2c_isr+0x474>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
20001054:	687b      	ldr	r3, [r7, #4]
20001056:	f04f 0201 	mov.w	r2, #1
2000105a:	62da      	str	r2, [r3, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
2000105c:	687b      	ldr	r3, [r7, #4]
2000105e:	699b      	ldr	r3, [r3, #24]
20001060:	f04f 0201 	mov.w	r2, #1
20001064:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20001066:	e22f      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
20001068:	687b      	ldr	r3, [r7, #4]
2000106a:	f04f 0200 	mov.w	r2, #0
2000106e:	721a      	strb	r2, [r3, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
20001070:	687b      	ldr	r3, [r7, #4]
20001072:	7c1b      	ldrb	r3, [r3, #16]
20001074:	f003 0301 	and.w	r3, r3, #1
20001078:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
2000107a:	687b      	ldr	r3, [r7, #4]
2000107c:	7b7a      	ldrb	r2, [r7, #13]
2000107e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if ( hold_bus == 0u )
20001082:	7b7b      	ldrb	r3, [r7, #13]
20001084:	2b00      	cmp	r3, #0
20001086:	d108      	bne.n	2000109a <mss_i2c_isr+0x4a6>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
20001088:	687b      	ldr	r3, [r7, #4]
2000108a:	699b      	ldr	r3, [r3, #24]
2000108c:	f04f 0201 	mov.w	r2, #1
20001090:	611a      	str	r2, [r3, #16]
                    enable_slave_if_required(this_i2c);
20001092:	6878      	ldr	r0, [r7, #4]
20001094:	f7ff fd9a 	bl	20000bcc <enable_slave_if_required>
20001098:	e008      	b.n	200010ac <mss_i2c_isr+0x4b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
2000109a:	687b      	ldr	r3, [r7, #4]
2000109c:	8a5b      	ldrh	r3, [r3, #18]
2000109e:	b21b      	sxth	r3, r3
200010a0:	4618      	mov	r0, r3
200010a2:	f7ff fb87 	bl	200007b4 <NVIC_DisableIRQ>
                    clear_irq = 0u;
200010a6:	f04f 0300 	mov.w	r3, #0
200010aa:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
200010ac:	687b      	ldr	r3, [r7, #4]
200010ae:	f04f 0200 	mov.w	r2, #0
200010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
200010b6:	e207      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200010b8:	687b      	ldr	r3, [r7, #4]
200010ba:	699b      	ldr	r3, [r3, #24]
200010bc:	f04f 0201 	mov.w	r2, #1
200010c0:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
200010c2:	687b      	ldr	r3, [r7, #4]
200010c4:	f04f 0202 	mov.w	r2, #2
200010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200010cc:	687b      	ldr	r3, [r7, #4]
200010ce:	f04f 0200 	mov.w	r2, #0
200010d2:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
200010d4:	6878      	ldr	r0, [r7, #4]
200010d6:	f7ff fd79 	bl	20000bcc <enable_slave_if_required>

            break;
200010da:	e1f5      	b.n	200014c8 <mss_i2c_isr+0x8d4>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
200010dc:	687b      	ldr	r3, [r7, #4]
200010de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200010e0:	2b01      	cmp	r3, #1
200010e2:	d905      	bls.n	200010f0 <mss_i2c_isr+0x4fc>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200010e4:	687b      	ldr	r3, [r7, #4]
200010e6:	699b      	ldr	r3, [r3, #24]
200010e8:	f04f 0201 	mov.w	r2, #1
200010ec:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
200010ee:	e1eb      	b.n	200014c8 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
200010f0:	687b      	ldr	r3, [r7, #4]
200010f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200010f4:	2b01      	cmp	r3, #1
200010f6:	d105      	bne.n	20001104 <mss_i2c_isr+0x510>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
200010f8:	687b      	ldr	r3, [r7, #4]
200010fa:	699b      	ldr	r3, [r3, #24]
200010fc:	f04f 0200 	mov.w	r2, #0
20001100:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20001102:	e1e1      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001104:	687b      	ldr	r3, [r7, #4]
20001106:	699b      	ldr	r3, [r3, #24]
20001108:	f04f 0201 	mov.w	r2, #1
2000110c:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
2000110e:	687b      	ldr	r3, [r7, #4]
20001110:	699b      	ldr	r3, [r3, #24]
20001112:	f04f 0201 	mov.w	r2, #1
20001116:	611a      	str	r2, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001118:	687b      	ldr	r3, [r7, #4]
2000111a:	f04f 0200 	mov.w	r2, #0
2000111e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
20001122:	687b      	ldr	r3, [r7, #4]
20001124:	f04f 0200 	mov.w	r2, #0
20001128:	721a      	strb	r2, [r3, #8]
            }
            break;
2000112a:	e1cd      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
2000112c:	687b      	ldr	r3, [r7, #4]
2000112e:	699b      	ldr	r3, [r3, #24]
20001130:	f04f 0201 	mov.w	r2, #1
20001134:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001136:	687b      	ldr	r3, [r7, #4]
20001138:	f04f 0202 	mov.w	r2, #2
2000113c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001140:	687b      	ldr	r3, [r7, #4]
20001142:	f04f 0200 	mov.w	r2, #0
20001146:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001148:	6878      	ldr	r0, [r7, #4]
2000114a:	f7ff fd3f 	bl	20000bcc <enable_slave_if_required>
            break;
2000114e:	e1bb      	b.n	200014c8 <mss_i2c_isr+0x8d4>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
20001150:	687b      	ldr	r3, [r7, #4]
20001152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001154:	687b      	ldr	r3, [r7, #4]
20001156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001158:	441a      	add	r2, r3
2000115a:	6879      	ldr	r1, [r7, #4]
2000115c:	6949      	ldr	r1, [r1, #20]
2000115e:	7a09      	ldrb	r1, [r1, #8]
20001160:	b2c9      	uxtb	r1, r1
20001162:	7011      	strb	r1, [r2, #0]
20001164:	f103 0201 	add.w	r2, r3, #1
20001168:	687b      	ldr	r3, [r7, #4]
2000116a:	639a      	str	r2, [r3, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
2000116c:	687b      	ldr	r3, [r7, #4]
2000116e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001170:	687b      	ldr	r3, [r7, #4]
20001172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001174:	f103 33ff 	add.w	r3, r3, #4294967295
20001178:	429a      	cmp	r2, r3
2000117a:	f0c0 819e 	bcc.w	200014ba <mss_i2c_isr+0x8c6>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
2000117e:	687b      	ldr	r3, [r7, #4]
20001180:	699b      	ldr	r3, [r3, #24]
20001182:	f04f 0200 	mov.w	r2, #0
20001186:	609a      	str	r2, [r3, #8]
            }
            break;
20001188:	e19e      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
2000118a:	687b      	ldr	r3, [r7, #4]
2000118c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000118e:	687b      	ldr	r3, [r7, #4]
20001190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001192:	4413      	add	r3, r2
20001194:	687a      	ldr	r2, [r7, #4]
20001196:	6952      	ldr	r2, [r2, #20]
20001198:	7a12      	ldrb	r2, [r2, #8]
2000119a:	b2d2      	uxtb	r2, r2
2000119c:	701a      	strb	r2, [r3, #0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
2000119e:	687b      	ldr	r3, [r7, #4]
200011a0:	7c1b      	ldrb	r3, [r3, #16]
200011a2:	f003 0301 	and.w	r3, r3, #1
200011a6:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
200011a8:	687b      	ldr	r3, [r7, #4]
200011aa:	7b7a      	ldrb	r2, [r7, #13]
200011ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            if ( hold_bus == 0u )
200011b0:	7b7b      	ldrb	r3, [r7, #13]
200011b2:	2b00      	cmp	r3, #0
200011b4:	d108      	bne.n	200011c8 <mss_i2c_isr+0x5d4>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
200011b6:	687b      	ldr	r3, [r7, #4]
200011b8:	699b      	ldr	r3, [r3, #24]
200011ba:	f04f 0201 	mov.w	r2, #1
200011be:	611a      	str	r2, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
200011c0:	6878      	ldr	r0, [r7, #4]
200011c2:	f7ff fd03 	bl	20000bcc <enable_slave_if_required>
200011c6:	e008      	b.n	200011da <mss_i2c_isr+0x5e6>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
200011c8:	687b      	ldr	r3, [r7, #4]
200011ca:	8a5b      	ldrh	r3, [r3, #18]
200011cc:	b21b      	sxth	r3, r3
200011ce:	4618      	mov	r0, r3
200011d0:	f7ff faf0 	bl	200007b4 <NVIC_DisableIRQ>
                clear_irq = 0u;
200011d4:	f04f 0300 	mov.w	r3, #0
200011d8:	73bb      	strb	r3, [r7, #14]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200011da:	687b      	ldr	r3, [r7, #4]
200011dc:	f04f 0200 	mov.w	r2, #0
200011e0:	721a      	strb	r2, [r3, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
200011e2:	687b      	ldr	r3, [r7, #4]
200011e4:	f04f 0200 	mov.w	r2, #0
200011e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            break;
200011ec:	e16c      	b.n	200014c8 <mss_i2c_isr+0x8d4>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200011ee:	687b      	ldr	r3, [r7, #4]
200011f0:	699b      	ldr	r3, [r3, #24]
200011f2:	f04f 0201 	mov.w	r2, #1
200011f6:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
200011f8:	687b      	ldr	r3, [r7, #4]
200011fa:	f04f 0200 	mov.w	r2, #0
200011fe:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001200:	687b      	ldr	r3, [r7, #4]
20001202:	f04f 0200 	mov.w	r2, #0
20001206:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
2000120a:	687b      	ldr	r3, [r7, #4]
2000120c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001210:	2b00      	cmp	r3, #0
20001212:	f000 8154 	beq.w	200014be <mss_i2c_isr+0x8ca>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001216:	687b      	ldr	r3, [r7, #4]
20001218:	699b      	ldr	r3, [r3, #24]
2000121a:	f04f 0201 	mov.w	r2, #1
2000121e:	615a      	str	r2, [r3, #20]
            }
            break;
20001220:	e152      	b.n	200014c8 <mss_i2c_isr+0x8d4>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20001222:	687b      	ldr	r3, [r7, #4]
20001224:	f04f 0201 	mov.w	r2, #1
20001228:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
2000122c:	687b      	ldr	r3, [r7, #4]
2000122e:	f04f 0204 	mov.w	r2, #4
20001232:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_rx_idx = 0u;
20001234:	687b      	ldr	r3, [r7, #4]
20001236:	f04f 0200 	mov.w	r2, #0
2000123a:	659a      	str	r2, [r3, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
2000123c:	687b      	ldr	r3, [r7, #4]
2000123e:	f04f 0200 	mov.w	r2, #0
20001242:	60da      	str	r2, [r3, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
20001244:	687b      	ldr	r3, [r7, #4]
20001246:	699b      	ldr	r3, [r3, #24]
20001248:	695b      	ldr	r3, [r3, #20]
2000124a:	2b00      	cmp	r3, #0
2000124c:	d009      	beq.n	20001262 <mss_i2c_isr+0x66e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
2000124e:	687b      	ldr	r3, [r7, #4]
20001250:	699b      	ldr	r3, [r3, #24]
20001252:	f04f 0200 	mov.w	r2, #0
20001256:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
20001258:	687b      	ldr	r3, [r7, #4]
2000125a:	f04f 0201 	mov.w	r2, #1
2000125e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001262:	687b      	ldr	r3, [r7, #4]
20001264:	f04f 0201 	mov.w	r2, #1
20001268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
2000126c:	e12c      	b.n	200014c8 <mss_i2c_isr+0x8d4>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
2000126e:	687b      	ldr	r3, [r7, #4]
20001270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20001272:	2b00      	cmp	r3, #0
20001274:	d01c      	beq.n	200012b0 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20001276:	687b      	ldr	r3, [r7, #4]
20001278:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2000127a:	687b      	ldr	r3, [r7, #4]
2000127c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
2000127e:	429a      	cmp	r2, r3
20001280:	d216      	bcs.n	200012b0 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
20001282:	687b      	ldr	r3, [r7, #4]
20001284:	695b      	ldr	r3, [r3, #20]
20001286:	7a1b      	ldrb	r3, [r3, #8]
20001288:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
2000128a:	687b      	ldr	r3, [r7, #4]
2000128c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2000128e:	687b      	ldr	r3, [r7, #4]
20001290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20001292:	441a      	add	r2, r3
20001294:	7b39      	ldrb	r1, [r7, #12]
20001296:	7011      	strb	r1, [r2, #0]
20001298:	f103 0201 	add.w	r2, r3, #1
2000129c:	687b      	ldr	r3, [r7, #4]
2000129e:	659a      	str	r2, [r3, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
200012a0:	687b      	ldr	r3, [r7, #4]
200012a2:	68db      	ldr	r3, [r3, #12]
200012a4:	ea4f 2203 	mov.w	r2, r3, lsl #8
200012a8:	7b3b      	ldrb	r3, [r7, #12]
200012aa:	441a      	add	r2, r3
200012ac:	687b      	ldr	r3, [r7, #4]
200012ae:	60da      	str	r2, [r3, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
200012b0:	687b      	ldr	r3, [r7, #4]
200012b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
200012b4:	687b      	ldr	r3, [r7, #4]
200012b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200012b8:	429a      	cmp	r2, r3
200012ba:	f0c0 8102 	bcc.w	200014c2 <mss_i2c_isr+0x8ce>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
200012be:	687b      	ldr	r3, [r7, #4]
200012c0:	699b      	ldr	r3, [r3, #24]
200012c2:	f04f 0200 	mov.w	r2, #0
200012c6:	609a      	str	r2, [r3, #8]
            }
            break;
200012c8:	e0fe      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
200012ca:	687b      	ldr	r3, [r7, #4]
200012cc:	7a1b      	ldrb	r3, [r3, #8]
200012ce:	2b04      	cmp	r3, #4
200012d0:	d135      	bne.n	2000133e <mss_i2c_isr+0x74a>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
200012d2:	687b      	ldr	r3, [r7, #4]
200012d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
200012d6:	687b      	ldr	r3, [r7, #4]
200012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
200012da:	429a      	cmp	r2, r3
200012dc:	d103      	bne.n	200012e6 <mss_i2c_isr+0x6f2>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
200012de:	687b      	ldr	r3, [r7, #4]
200012e0:	68da      	ldr	r2, [r3, #12]
200012e2:	687b      	ldr	r3, [r7, #4]
200012e4:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
200012e6:	687b      	ldr	r3, [r7, #4]
200012e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
200012ea:	2b00      	cmp	r3, #0
200012ec:	d021      	beq.n	20001332 <mss_i2c_isr+0x73e>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
200012ee:	687b      	ldr	r3, [r7, #4]
200012f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
200012f2:	687a      	ldr	r2, [r7, #4]
200012f4:	6d11      	ldr	r1, [r2, #80]	; 0x50
200012f6:	687a      	ldr	r2, [r7, #4]
200012f8:	6d92      	ldr	r2, [r2, #88]	; 0x58
200012fa:	b292      	uxth	r2, r2
200012fc:	6878      	ldr	r0, [r7, #4]
200012fe:	4798      	blx	r3
20001300:	4603      	mov	r3, r0
20001302:	73fb      	strb	r3, [r7, #15]
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20001304:	7bfb      	ldrb	r3, [r7, #15]
20001306:	2b00      	cmp	r3, #0
20001308:	d108      	bne.n	2000131c <mss_i2c_isr+0x728>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
2000130a:	6878      	ldr	r0, [r7, #4]
2000130c:	f7ff fc5e 	bl	20000bcc <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001310:	687b      	ldr	r3, [r7, #4]
20001312:	699b      	ldr	r3, [r3, #24]
20001314:	f04f 0201 	mov.w	r2, #1
20001318:	609a      	str	r2, [r3, #8]
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000131a:	e017      	b.n	2000134c <mss_i2c_isr+0x758>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
2000131c:	687b      	ldr	r3, [r7, #4]
2000131e:	699b      	ldr	r3, [r3, #24]
20001320:	f04f 0200 	mov.w	r2, #0
20001324:	609a      	str	r2, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
20001326:	687b      	ldr	r3, [r7, #4]
20001328:	f04f 0200 	mov.w	r2, #0
2000132c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001330:	e00c      	b.n	2000134c <mss_i2c_isr+0x758>
20001332:	687b      	ldr	r3, [r7, #4]
20001334:	699b      	ldr	r3, [r3, #24]
20001336:	f04f 0201 	mov.w	r2, #1
2000133a:	609a      	str	r2, [r3, #8]
2000133c:	e006      	b.n	2000134c <mss_i2c_isr+0x758>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
2000133e:	687b      	ldr	r3, [r7, #4]
20001340:	f04f 0200 	mov.w	r2, #0
20001344:	64da      	str	r2, [r3, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20001346:	6878      	ldr	r0, [r7, #4]
20001348:	f7ff fc40 	bl	20000bcc <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
2000134c:	687b      	ldr	r3, [r7, #4]
2000134e:	f04f 0200 	mov.w	r2, #0
20001352:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001356:	687b      	ldr	r3, [r7, #4]
20001358:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
2000135c:	2b00      	cmp	r3, #0
2000135e:	d004      	beq.n	2000136a <mss_i2c_isr+0x776>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001360:	687b      	ldr	r3, [r7, #4]
20001362:	699b      	ldr	r3, [r3, #24]
20001364:	f04f 0201 	mov.w	r2, #1
20001368:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
2000136a:	687b      	ldr	r3, [r7, #4]
2000136c:	f04f 0200 	mov.w	r2, #0
20001370:	721a      	strb	r2, [r3, #8]
            break;
20001372:	e0a9      	b.n	200014c8 <mss_i2c_isr+0x8d4>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20001374:	687b      	ldr	r3, [r7, #4]
20001376:	f04f 0200 	mov.w	r2, #0
2000137a:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
2000137c:	687b      	ldr	r3, [r7, #4]
2000137e:	f04f 0200 	mov.w	r2, #0
20001382:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001384:	687b      	ldr	r3, [r7, #4]
20001386:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
2000138a:	b2db      	uxtb	r3, r3
2000138c:	2b01      	cmp	r3, #1
2000138e:	d104      	bne.n	2000139a <mss_i2c_isr+0x7a6>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001390:	687b      	ldr	r3, [r7, #4]
20001392:	f04f 0202 	mov.w	r2, #2
20001396:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
2000139a:	6878      	ldr	r0, [r7, #4]
2000139c:	f7ff fc16 	bl	20000bcc <enable_slave_if_required>

            break;
200013a0:	e092      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
200013a2:	7afb      	ldrb	r3, [r7, #11]
200013a4:	b2db      	uxtb	r3, r3
200013a6:	2ba8      	cmp	r3, #168	; 0xa8
200013a8:	d11b      	bne.n	200013e2 <mss_i2c_isr+0x7ee>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
200013aa:	687b      	ldr	r3, [r7, #4]
200013ac:	f04f 0205 	mov.w	r2, #5
200013b0:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0u;
200013b2:	687b      	ldr	r3, [r7, #4]
200013b4:	f04f 0200 	mov.w	r2, #0
200013b8:	60da      	str	r2, [r3, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
200013ba:	687b      	ldr	r3, [r7, #4]
200013bc:	f04f 0201 	mov.w	r2, #1
200013c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
200013c4:	687b      	ldr	r3, [r7, #4]
200013c6:	699b      	ldr	r3, [r3, #24]
200013c8:	695b      	ldr	r3, [r3, #20]
200013ca:	2b00      	cmp	r3, #0
200013cc:	d009      	beq.n	200013e2 <mss_i2c_isr+0x7ee>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
200013ce:	687b      	ldr	r3, [r7, #4]
200013d0:	699b      	ldr	r3, [r3, #24]
200013d2:	f04f 0200 	mov.w	r2, #0
200013d6:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
200013d8:	687b      	ldr	r3, [r7, #4]
200013da:	f04f 0201 	mov.w	r2, #1
200013de:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
200013e2:	687b      	ldr	r3, [r7, #4]
200013e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
200013e6:	687b      	ldr	r3, [r7, #4]
200013e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200013ea:	429a      	cmp	r2, r3
200013ec:	d305      	bcc.n	200013fa <mss_i2c_isr+0x806>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
200013ee:	687b      	ldr	r3, [r7, #4]
200013f0:	695b      	ldr	r3, [r3, #20]
200013f2:	f04f 32ff 	mov.w	r2, #4294967295
200013f6:	721a      	strb	r2, [r3, #8]
200013f8:	e00c      	b.n	20001414 <mss_i2c_isr+0x820>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
200013fa:	687b      	ldr	r3, [r7, #4]
200013fc:	695a      	ldr	r2, [r3, #20]
200013fe:	687b      	ldr	r3, [r7, #4]
20001400:	6c59      	ldr	r1, [r3, #68]	; 0x44
20001402:	687b      	ldr	r3, [r7, #4]
20001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20001406:	4419      	add	r1, r3
20001408:	7809      	ldrb	r1, [r1, #0]
2000140a:	7211      	strb	r1, [r2, #8]
2000140c:	f103 0201 	add.w	r2, r3, #1
20001410:	687b      	ldr	r3, [r7, #4]
20001412:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20001414:	687b      	ldr	r3, [r7, #4]
20001416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20001418:	687b      	ldr	r3, [r7, #4]
2000141a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000141c:	429a      	cmp	r2, r3
2000141e:	d352      	bcc.n	200014c6 <mss_i2c_isr+0x8d2>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001420:	687b      	ldr	r3, [r7, #4]
20001422:	699b      	ldr	r3, [r3, #24]
20001424:	f04f 0200 	mov.w	r2, #0
20001428:	609a      	str	r2, [r3, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
2000142a:	687b      	ldr	r3, [r7, #4]
2000142c:	f04f 0200 	mov.w	r2, #0
20001430:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            break;
20001432:	e049      	b.n	200014c8 <mss_i2c_isr+0x8d4>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20001434:	687b      	ldr	r3, [r7, #4]
20001436:	f04f 0200 	mov.w	r2, #0
2000143a:	64da      	str	r2, [r3, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000143c:	687b      	ldr	r3, [r7, #4]
2000143e:	699b      	ldr	r3, [r3, #24]
20001440:	f04f 0201 	mov.w	r2, #1
20001444:	609a      	str	r2, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001446:	687b      	ldr	r3, [r7, #4]
20001448:	f04f 0200 	mov.w	r2, #0
2000144c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001450:	687b      	ldr	r3, [r7, #4]
20001452:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001456:	2b00      	cmp	r3, #0
20001458:	d004      	beq.n	20001464 <mss_i2c_isr+0x870>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
2000145a:	687b      	ldr	r3, [r7, #4]
2000145c:	699b      	ldr	r3, [r3, #24]
2000145e:	f04f 0201 	mov.w	r2, #1
20001462:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001464:	687b      	ldr	r3, [r7, #4]
20001466:	f04f 0200 	mov.w	r2, #0
2000146a:	721a      	strb	r2, [r3, #8]
            break;
2000146c:	e02c      	b.n	200014c8 <mss_i2c_isr+0x8d4>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
2000146e:	687b      	ldr	r3, [r7, #4]
20001470:	699b      	ldr	r3, [r3, #24]
20001472:	f04f 0200 	mov.w	r2, #0
20001476:	615a      	str	r2, [r3, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001478:	687b      	ldr	r3, [r7, #4]
2000147a:	f04f 0200 	mov.w	r2, #0
2000147e:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001480:	687b      	ldr	r3, [r7, #4]
20001482:	f04f 0200 	mov.w	r2, #0
20001486:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
20001488:	687b      	ldr	r3, [r7, #4]
2000148a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2000148e:	b2db      	uxtb	r3, r3
20001490:	2b01      	cmp	r3, #1
20001492:	d104      	bne.n	2000149e <mss_i2c_isr+0x8aa>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
20001494:	687b      	ldr	r3, [r7, #4]
20001496:	f04f 0202 	mov.w	r2, #2
2000149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
2000149e:	687b      	ldr	r3, [r7, #4]
200014a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
200014a4:	b2db      	uxtb	r3, r3
200014a6:	2b01      	cmp	r3, #1
200014a8:	d10e      	bne.n	200014c8 <mss_i2c_isr+0x8d4>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
200014aa:	687b      	ldr	r3, [r7, #4]
200014ac:	f04f 0202 	mov.w	r2, #2
200014b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
200014b4:	e008      	b.n	200014c8 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
200014b6:	bf00      	nop
200014b8:	e006      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            break;
200014ba:	bf00      	nop
200014bc:	e004      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
            }
            break;
200014be:	bf00      	nop
200014c0:	e002      	b.n	200014c8 <mss_i2c_isr+0x8d4>
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
            }
            break;
200014c2:	bf00      	nop
200014c4:	e000      	b.n	200014c8 <mss_i2c_isr+0x8d4>
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
200014c6:	bf00      	nop


            break;
    }
    
    if ( clear_irq )
200014c8:	7bbb      	ldrb	r3, [r7, #14]
200014ca:	2b00      	cmp	r3, #0
200014cc:	d004      	beq.n	200014d8 <mss_i2c_isr+0x8e4>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
200014ce:	687b      	ldr	r3, [r7, #4]
200014d0:	699b      	ldr	r3, [r3, #24]
200014d2:	f04f 0200 	mov.w	r2, #0
200014d6:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
200014d8:	687b      	ldr	r3, [r7, #4]
200014da:	695b      	ldr	r3, [r3, #20]
200014dc:	791b      	ldrb	r3, [r3, #4]
200014de:	72fb      	strb	r3, [r7, #11]
}
200014e0:	f107 0710 	add.w	r7, r7, #16
200014e4:	46bd      	mov	sp, r7
200014e6:	bd80      	pop	{r7, pc}

200014e8 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
200014e8:	b580      	push	{r7, lr}
200014ea:	b082      	sub	sp, #8
200014ec:	af00      	add	r7, sp, #0
    uint32_t primask;
    primask = __get_PRIMASK();
200014ee:	f000 f8d7 	bl	200016a0 <__get_PRIMASK>
200014f2:	4603      	mov	r3, r0
200014f4:	607b      	str	r3, [r7, #4]
    __set_PRIMASK(1u);
200014f6:	f04f 0001 	mov.w	r0, #1
200014fa:	f000 f8e1 	bl	200016c0 <__set_PRIMASK>
    return primask;
200014fe:	687b      	ldr	r3, [r7, #4]
}
20001500:	4618      	mov	r0, r3
20001502:	f107 0708 	add.w	r7, r7, #8
20001506:	46bd      	mov	sp, r7
20001508:	bd80      	pop	{r7, pc}
2000150a:	bf00      	nop

2000150c <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
2000150c:	b580      	push	{r7, lr}
2000150e:	b082      	sub	sp, #8
20001510:	af00      	add	r7, sp, #0
20001512:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( primask );
20001514:	6878      	ldr	r0, [r7, #4]
20001516:	f000 f8d3 	bl	200016c0 <__set_PRIMASK>
}
2000151a:	f107 0708 	add.w	r7, r7, #8
2000151e:	46bd      	mov	sp, r7
20001520:	bd80      	pop	{r7, pc}
20001522:	bf00      	nop

20001524 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
20001524:	4668      	mov	r0, sp
20001526:	f020 0107 	bic.w	r1, r0, #7
2000152a:	468d      	mov	sp, r1
2000152c:	b589      	push	{r0, r3, r7, lr}
2000152e:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c0 );
20001530:	f641 00f0 	movw	r0, #6384	; 0x18f0
20001534:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001538:	f7ff fb5c 	bl	20000bf4 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
2000153c:	f04f 000e 	mov.w	r0, #14
20001540:	f7ff f956 	bl	200007f0 <NVIC_ClearPendingIRQ>
}
20001544:	46bd      	mov	sp, r7
20001546:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000154a:	4685      	mov	sp, r0
2000154c:	4770      	bx	lr
2000154e:	bf00      	nop

20001550 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
20001550:	4668      	mov	r0, sp
20001552:	f020 0107 	bic.w	r1, r0, #7
20001556:	468d      	mov	sp, r1
20001558:	b589      	push	{r0, r3, r7, lr}
2000155a:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c1 );
2000155c:	f641 1064 	movw	r0, #6500	; 0x1964
20001560:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001564:	f7ff fb46 	bl	20000bf4 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
20001568:	f04f 0011 	mov.w	r0, #17
2000156c:	f7ff f940 	bl	200007f0 <NVIC_ClearPendingIRQ>
}
20001570:	46bd      	mov	sp, r7
20001572:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001576:	4685      	mov	sp, r0
20001578:	4770      	bx	lr
2000157a:	bf00      	nop

2000157c <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2000157c:	b480      	push	{r7}
2000157e:	b083      	sub	sp, #12
20001580:	af00      	add	r7, sp, #0
20001582:	4603      	mov	r3, r0
20001584:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001586:	f24e 1300 	movw	r3, #57600	; 0xe100
2000158a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000158e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001592:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001596:	88f9      	ldrh	r1, [r7, #6]
20001598:	f001 011f 	and.w	r1, r1, #31
2000159c:	f04f 0001 	mov.w	r0, #1
200015a0:	fa00 f101 	lsl.w	r1, r0, r1
200015a4:	f102 0260 	add.w	r2, r2, #96	; 0x60
200015a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200015ac:	f107 070c 	add.w	r7, r7, #12
200015b0:	46bd      	mov	sp, r7
200015b2:	bc80      	pop	{r7}
200015b4:	4770      	bx	lr
200015b6:	bf00      	nop

200015b8 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
200015b8:	b580      	push	{r7, lr}
200015ba:	b082      	sub	sp, #8
200015bc:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
200015be:	f242 0300 	movw	r3, #8192	; 0x2000
200015c2:	f2ce 0304 	movt	r3, #57348	; 0xe004
200015c6:	f242 0200 	movw	r2, #8192	; 0x2000
200015ca:	f2ce 0204 	movt	r2, #57348	; 0xe004
200015ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
200015d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200015d4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200015d6:	f04f 0300 	mov.w	r3, #0
200015da:	607b      	str	r3, [r7, #4]
200015dc:	e00e      	b.n	200015fc <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
200015de:	687a      	ldr	r2, [r7, #4]
200015e0:	f641 0388 	movw	r3, #6280	; 0x1888
200015e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200015e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200015ec:	b21b      	sxth	r3, r3
200015ee:	4618      	mov	r0, r3
200015f0:	f7ff ffc4 	bl	2000157c <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200015f4:	687b      	ldr	r3, [r7, #4]
200015f6:	f103 0301 	add.w	r3, r3, #1
200015fa:	607b      	str	r3, [r7, #4]
200015fc:	687b      	ldr	r3, [r7, #4]
200015fe:	2b1f      	cmp	r3, #31
20001600:	d9ed      	bls.n	200015de <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
20001602:	f242 0300 	movw	r3, #8192	; 0x2000
20001606:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000160a:	f242 0200 	movw	r2, #8192	; 0x2000
2000160e:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001612:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001614:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20001618:	631a      	str	r2, [r3, #48]	; 0x30
}
2000161a:	f107 0708 	add.w	r7, r7, #8
2000161e:	46bd      	mov	sp, r7
20001620:	bd80      	pop	{r7, pc}
20001622:	bf00      	nop

20001624 <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
20001624:	b480      	push	{r7}
20001626:	b085      	sub	sp, #20
20001628:	af00      	add	r7, sp, #0
2000162a:	4603      	mov	r3, r0
2000162c:	6039      	str	r1, [r7, #0]
2000162e:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
20001630:	79fb      	ldrb	r3, [r7, #7]
20001632:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001634:	68fb      	ldr	r3, [r7, #12]
20001636:	2b1f      	cmp	r3, #31
20001638:	d900      	bls.n	2000163c <MSS_GPIO_config+0x18>
2000163a:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
2000163c:	68fb      	ldr	r3, [r7, #12]
2000163e:	2b1f      	cmp	r3, #31
20001640:	d808      	bhi.n	20001654 <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20001642:	68fa      	ldr	r2, [r7, #12]
20001644:	f641 0308 	movw	r3, #6152	; 0x1808
20001648:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001650:	683a      	ldr	r2, [r7, #0]
20001652:	601a      	str	r2, [r3, #0]
    }
}
20001654:	f107 0714 	add.w	r7, r7, #20
20001658:	46bd      	mov	sp, r7
2000165a:	bc80      	pop	{r7}
2000165c:	4770      	bx	lr
2000165e:	bf00      	nop

20001660 <MSS_GPIO_set_output>:
void MSS_GPIO_set_output
(
    mss_gpio_id_t       port_id,
    uint8_t             value
)
{
20001660:	b480      	push	{r7}
20001662:	b085      	sub	sp, #20
20001664:	af00      	add	r7, sp, #0
20001666:	4602      	mov	r2, r0
20001668:	460b      	mov	r3, r1
2000166a:	71fa      	strb	r2, [r7, #7]
2000166c:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_idx = (uint32_t)port_id;
2000166e:	79fb      	ldrb	r3, [r7, #7]
20001670:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001672:	68fb      	ldr	r3, [r7, #12]
20001674:	2b1f      	cmp	r3, #31
20001676:	d900      	bls.n	2000167a <MSS_GPIO_set_output+0x1a>
20001678:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
2000167a:	68fb      	ldr	r3, [r7, #12]
2000167c:	2b1f      	cmp	r3, #31
2000167e:	d809      	bhi.n	20001694 <MSS_GPIO_set_output+0x34>
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
20001680:	f240 0300 	movw	r3, #0
20001684:	f2c4 2326 	movt	r3, #16934	; 0x4226
20001688:	68fa      	ldr	r2, [r7, #12]
2000168a:	79b9      	ldrb	r1, [r7, #6]
2000168c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
20001690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
20001694:	f107 0714 	add.w	r7, r7, #20
20001698:	46bd      	mov	sp, r7
2000169a:	bc80      	pop	{r7}
2000169c:	4770      	bx	lr
2000169e:	bf00      	nop

200016a0 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
200016a0:	b480      	push	{r7}
200016a2:	b083      	sub	sp, #12
200016a4:	af00      	add	r7, sp, #0
  uint32_t result=0;
200016a6:	f04f 0300 	mov.w	r3, #0
200016aa:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200016ac:	f3ef 8310 	mrs	r3, PRIMASK
200016b0:	607b      	str	r3, [r7, #4]
  return(result);
200016b2:	687b      	ldr	r3, [r7, #4]
}
200016b4:	4618      	mov	r0, r3
200016b6:	f107 070c 	add.w	r7, r7, #12
200016ba:	46bd      	mov	sp, r7
200016bc:	bc80      	pop	{r7}
200016be:	4770      	bx	lr

200016c0 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
200016c0:	b480      	push	{r7}
200016c2:	b083      	sub	sp, #12
200016c4:	af00      	add	r7, sp, #0
200016c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
200016c8:	687b      	ldr	r3, [r7, #4]
200016ca:	f383 8810 	msr	PRIMASK, r3
}
200016ce:	f107 070c 	add.w	r7, r7, #12
200016d2:	46bd      	mov	sp, r7
200016d4:	bc80      	pop	{r7}
200016d6:	4770      	bx	lr

200016d8 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
200016d8:	b480      	push	{r7}
200016da:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
200016dc:	46bd      	mov	sp, r7
200016de:	bc80      	pop	{r7}
200016e0:	4770      	bx	lr
200016e2:	bf00      	nop

200016e4 <__libc_init_array>:
200016e4:	b570      	push	{r4, r5, r6, lr}
200016e6:	f641 06e0 	movw	r6, #6368	; 0x18e0
200016ea:	f641 05e0 	movw	r5, #6368	; 0x18e0
200016ee:	f2c2 0600 	movt	r6, #8192	; 0x2000
200016f2:	f2c2 0500 	movt	r5, #8192	; 0x2000
200016f6:	1b76      	subs	r6, r6, r5
200016f8:	10b6      	asrs	r6, r6, #2
200016fa:	d006      	beq.n	2000170a <__libc_init_array+0x26>
200016fc:	2400      	movs	r4, #0
200016fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20001702:	3401      	adds	r4, #1
20001704:	4798      	blx	r3
20001706:	42a6      	cmp	r6, r4
20001708:	d8f9      	bhi.n	200016fe <__libc_init_array+0x1a>
2000170a:	f641 05e0 	movw	r5, #6368	; 0x18e0
2000170e:	f641 06e4 	movw	r6, #6372	; 0x18e4
20001712:	f2c2 0500 	movt	r5, #8192	; 0x2000
20001716:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000171a:	1b76      	subs	r6, r6, r5
2000171c:	f000 f8d4 	bl	200018c8 <_init>
20001720:	10b6      	asrs	r6, r6, #2
20001722:	d006      	beq.n	20001732 <__libc_init_array+0x4e>
20001724:	2400      	movs	r4, #0
20001726:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000172a:	3401      	adds	r4, #1
2000172c:	4798      	blx	r3
2000172e:	42a6      	cmp	r6, r4
20001730:	d8f9      	bhi.n	20001726 <__libc_init_array+0x42>
20001732:	bd70      	pop	{r4, r5, r6, pc}

20001734 <memset>:
20001734:	2a03      	cmp	r2, #3
20001736:	b2c9      	uxtb	r1, r1
20001738:	b430      	push	{r4, r5}
2000173a:	d807      	bhi.n	2000174c <memset+0x18>
2000173c:	b122      	cbz	r2, 20001748 <memset+0x14>
2000173e:	2300      	movs	r3, #0
20001740:	54c1      	strb	r1, [r0, r3]
20001742:	3301      	adds	r3, #1
20001744:	4293      	cmp	r3, r2
20001746:	d1fb      	bne.n	20001740 <memset+0xc>
20001748:	bc30      	pop	{r4, r5}
2000174a:	4770      	bx	lr
2000174c:	eb00 0c02 	add.w	ip, r0, r2
20001750:	4603      	mov	r3, r0
20001752:	e001      	b.n	20001758 <memset+0x24>
20001754:	f803 1c01 	strb.w	r1, [r3, #-1]
20001758:	f003 0403 	and.w	r4, r3, #3
2000175c:	461a      	mov	r2, r3
2000175e:	3301      	adds	r3, #1
20001760:	2c00      	cmp	r4, #0
20001762:	d1f7      	bne.n	20001754 <memset+0x20>
20001764:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20001768:	ebc2 040c 	rsb	r4, r2, ip
2000176c:	fb03 f301 	mul.w	r3, r3, r1
20001770:	e01f      	b.n	200017b2 <memset+0x7e>
20001772:	f842 3c40 	str.w	r3, [r2, #-64]
20001776:	f842 3c3c 	str.w	r3, [r2, #-60]
2000177a:	f842 3c38 	str.w	r3, [r2, #-56]
2000177e:	f842 3c34 	str.w	r3, [r2, #-52]
20001782:	f842 3c30 	str.w	r3, [r2, #-48]
20001786:	f842 3c2c 	str.w	r3, [r2, #-44]
2000178a:	f842 3c28 	str.w	r3, [r2, #-40]
2000178e:	f842 3c24 	str.w	r3, [r2, #-36]
20001792:	f842 3c20 	str.w	r3, [r2, #-32]
20001796:	f842 3c1c 	str.w	r3, [r2, #-28]
2000179a:	f842 3c18 	str.w	r3, [r2, #-24]
2000179e:	f842 3c14 	str.w	r3, [r2, #-20]
200017a2:	f842 3c10 	str.w	r3, [r2, #-16]
200017a6:	f842 3c0c 	str.w	r3, [r2, #-12]
200017aa:	f842 3c08 	str.w	r3, [r2, #-8]
200017ae:	f842 3c04 	str.w	r3, [r2, #-4]
200017b2:	4615      	mov	r5, r2
200017b4:	3240      	adds	r2, #64	; 0x40
200017b6:	2c3f      	cmp	r4, #63	; 0x3f
200017b8:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
200017bc:	dcd9      	bgt.n	20001772 <memset+0x3e>
200017be:	462a      	mov	r2, r5
200017c0:	ebc5 040c 	rsb	r4, r5, ip
200017c4:	e007      	b.n	200017d6 <memset+0xa2>
200017c6:	f842 3c10 	str.w	r3, [r2, #-16]
200017ca:	f842 3c0c 	str.w	r3, [r2, #-12]
200017ce:	f842 3c08 	str.w	r3, [r2, #-8]
200017d2:	f842 3c04 	str.w	r3, [r2, #-4]
200017d6:	4615      	mov	r5, r2
200017d8:	3210      	adds	r2, #16
200017da:	2c0f      	cmp	r4, #15
200017dc:	f1a4 0410 	sub.w	r4, r4, #16
200017e0:	dcf1      	bgt.n	200017c6 <memset+0x92>
200017e2:	462a      	mov	r2, r5
200017e4:	ebc5 050c 	rsb	r5, r5, ip
200017e8:	e001      	b.n	200017ee <memset+0xba>
200017ea:	f842 3c04 	str.w	r3, [r2, #-4]
200017ee:	4614      	mov	r4, r2
200017f0:	3204      	adds	r2, #4
200017f2:	2d03      	cmp	r5, #3
200017f4:	f1a5 0504 	sub.w	r5, r5, #4
200017f8:	dcf7      	bgt.n	200017ea <memset+0xb6>
200017fa:	e001      	b.n	20001800 <memset+0xcc>
200017fc:	f804 1b01 	strb.w	r1, [r4], #1
20001800:	4564      	cmp	r4, ip
20001802:	d3fb      	bcc.n	200017fc <memset+0xc8>
20001804:	e7a0      	b.n	20001748 <memset+0x14>
20001806:	bf00      	nop

20001808 <g_config_reg_lut>:
20001808:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
20001818:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
20001828:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
20001838:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20001848:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20001858:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20001868:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20001878:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

20001888 <g_gpio_irqn_lut>:
20001888:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
20001898:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
200018a8:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
200018b8:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

200018c8 <_init>:
200018c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200018ca:	bf00      	nop
200018cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
200018ce:	bc08      	pop	{r3}
200018d0:	469e      	mov	lr, r3
200018d2:	4770      	bx	lr

200018d4 <_fini>:
200018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200018d6:	bf00      	nop
200018d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
200018da:	bc08      	pop	{r3}
200018dc:	469e      	mov	lr, r3
200018de:	4770      	bx	lr

200018e0 <__frame_dummy_init_array_entry>:
200018e0:	0485 2000                                   ... 

200018e4 <__do_global_dtors_aux_fini_array_entry>:
200018e4:	0471 2000                                   q.. 
