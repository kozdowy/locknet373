
lockNET_SF_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c50  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  20001c50  20001c50  00009c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f8  20001c58  20001c58  00009c58  2**2
                  ALLOC
  3 .stack        00003000  20001d50  20001d50  00009c58  2**0
                  ALLOC
  4 .comment      000001d9  00000000  00000000  00009c58  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000488  00000000  00000000  00009e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000097f  00000000  00000000  0000a2b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005180  00000000  00000000  0000ac38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bed  00000000  00000000  0000fdb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002906  00000000  00000000  000109a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000da4  00000000  00000000  000132ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002238  00000000  00000000  00014050  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001669  00000000  00000000  00016288  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00038d1b  00000000  00000000  000178f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0005060c  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000448  00000000  00000000  00050631  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	2000032f 	.word	0x2000032f
2000006c:	20000331 	.word	0x20000331
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	20001789 	.word	0x20001789
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	200017b5 	.word	0x200017b5
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	200004a1 	.word	0x200004a1
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>

2000032e <UART0_IRQHandler>:
2000032e:	e7fe      	b.n	2000032e <UART0_IRQHandler>

20000330 <UART1_IRQHandler>:
20000330:	e7fe      	b.n	20000330 <UART1_IRQHandler>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>
20000336:	e7fe      	b.n	20000336 <SPI1_IRQHandler+0x2>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>
20000350:	e7fe      	b.n	20000350 <GPIO0_IRQHandler+0x2>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	20001a29 	.word	0x20001a29
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20001c50 	.word	0x20001c50
20000450:	20001c50 	.word	0x20001c50
20000454:	20001c50 	.word	0x20001c50
20000458:	20001c58 	.word	0x20001c58
2000045c:	00000000 	.word	0x00000000
20000460:	20001c58 	.word	0x20001c58
20000464:	20001d50 	.word	0x20001d50
20000468:	20001a35 	.word	0x20001a35
2000046c:	200004f5 	.word	0x200004f5

20000470 <__do_global_dtors_aux>:
20000470:	f641 4358 	movw	r3, #7256	; 0x1c58
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f641 4050 	movw	r0, #7248	; 0x1c50
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <GPIO1_IRQHandler>:

uint8_t last_was_ack = 0;

// Interrupts Handler
__attribute__ ((interrupt)) void GPIO1_IRQHandler( void )
{
200004a0:	4668      	mov	r0, sp
200004a2:	f020 0107 	bic.w	r1, r0, #7
200004a6:	468d      	mov	sp, r1
200004a8:	b589      	push	{r0, r3, r7, lr}
200004aa:	af00      	add	r7, sp, #0
	// Add interrupt status?
	MSS_GPIO_clear_irq(MSS_GPIO_1);
200004ac:	f04f 0001 	mov.w	r0, #1
200004b0:	f001 fa76 	bl	200019a0 <MSS_GPIO_clear_irq>
	// For the NFC module
	//int n_bytes_to_read =; //Need to look it in the datasheet
	if (!last_was_ack){
200004b4:	f641 4359 	movw	r3, #7257	; 0x1c59
200004b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004bc:	781b      	ldrb	r3, [r3, #0]
200004be:	2b00      	cmp	r3, #0
200004c0:	d107      	bne.n	200004d2 <GPIO1_IRQHandler+0x32>
					receive_buf,
					7,
					MSS_I2C_RELEASE_BUS
			);
		MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);*/
		last_was_ack = 1;
200004c2:	f641 4359 	movw	r3, #7257	; 0x1c59
200004c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004ca:	f04f 0201 	mov.w	r2, #1
200004ce:	701a      	strb	r2, [r3, #0]
200004d0:	e006      	b.n	200004e0 <GPIO1_IRQHandler+0x40>
					receive_buf,
					7,
					MSS_I2C_RELEASE_BUS
			);
		MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);*/
		last_was_ack = 0;
200004d2:	f641 4359 	movw	r3, #7257	; 0x1c59
200004d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004da:	f04f 0200 	mov.w	r2, #0
200004de:	701a      	strb	r2, [r3, #0]
	}

	set_interrupt_handled(1);
200004e0:	f04f 0001 	mov.w	r0, #1
200004e4:	f000 fa6c 	bl	200009c0 <set_interrupt_handled>
}
200004e8:	46bd      	mov	sp, r7
200004ea:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200004ee:	4685      	mov	sp, r0
200004f0:	4770      	bx	lr
200004f2:	bf00      	nop

200004f4 <main>:

// Main program
int main()
{
200004f4:	b580      	push	{r7, lr}
200004f6:	b088      	sub	sp, #32
200004f8:	af00      	add	r7, sp, #0
	// MSS_GPIO initialization
	MSS_GPIO_init();
200004fa:	f001 f9ab 	bl	20001854 <MSS_GPIO_init>
	int i;

	// Testing
	nfc_setup();
200004fe:	f000 f805 	bl	2000050c <nfc_setup>
	uint8_t receive_buf[20];
	uint8_t command[] = {};
	//uint8_t status_buff[9+8];
	//uint8_t rf;
	//uint8_t rf = nfc_GetGeneralStatus(receive_buf);
	while(1) nfc_InListPassiveTarget(receive_buf);
20000502:	463b      	mov	r3, r7
20000504:	4618      	mov	r0, r3
20000506:	f000 f9cf 	bl	200008a8 <nfc_InListPassiveTarget>
2000050a:	e7fa      	b.n	20000502 <main+0xe>

2000050c <nfc_setup>:
/* Function for setting up the NFC module
 * Description:
 * Receives: 	Nothing
 * Returns:		Nothing
 */
void nfc_setup(void){
2000050c:	b580      	push	{r7, lr}
2000050e:	b086      	sub	sp, #24
20000510:	af00      	add	r7, sp, #0
	MSS_I2C_init(&g_mss_i2c1 , PN532_I2C_ADDRESS, MSS_I2C_PCLK_DIV_960 );
20000512:	f641 40d8 	movw	r0, #7384	; 0x1cd8
20000516:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000051a:	f04f 0124 	mov.w	r1, #36	; 0x24
2000051e:	f04f 0204 	mov.w	r2, #4
20000522:	f000 fab5 	bl	20000a90 <MSS_I2C_init>
	MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_OUTPUT_MODE);
20000526:	f04f 0000 	mov.w	r0, #0
2000052a:	f04f 0105 	mov.w	r1, #5
2000052e:	f001 f9c7 	bl	200018c0 <MSS_GPIO_config>
	MSS_GPIO_config( MSS_GPIO_1, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_NEGATIVE );
20000532:	f04f 0001 	mov.w	r0, #1
20000536:	f04f 0162 	mov.w	r1, #98	; 0x62
2000053a:	f001 f9c1 	bl	200018c0 <MSS_GPIO_config>
	MSS_GPIO_enable_irq(MSS_GPIO_1);
2000053e:	f04f 0001 	mov.w	r0, #1
20000542:	f001 f9fb 	bl	2000193c <MSS_GPIO_enable_irq>
	int i;

	// Delays required for set up
	MSS_GPIO_set_output(MSS_GPIO_0 ,(uint8_t) 1);
20000546:	f04f 0000 	mov.w	r0, #0
2000054a:	f04f 0101 	mov.w	r1, #1
2000054e:	f001 f9d5 	bl	200018fc <MSS_GPIO_set_output>
	for(i=0;i<100000;i++);
20000552:	f04f 0300 	mov.w	r3, #0
20000556:	613b      	str	r3, [r7, #16]
20000558:	e003      	b.n	20000562 <nfc_setup+0x56>
2000055a:	693b      	ldr	r3, [r7, #16]
2000055c:	f103 0301 	add.w	r3, r3, #1
20000560:	613b      	str	r3, [r7, #16]
20000562:	693a      	ldr	r2, [r7, #16]
20000564:	f248 639f 	movw	r3, #34463	; 0x869f
20000568:	f2c0 0301 	movt	r3, #1
2000056c:	429a      	cmp	r2, r3
2000056e:	ddf4      	ble.n	2000055a <nfc_setup+0x4e>
	MSS_GPIO_set_output(MSS_GPIO_0 ,(uint8_t) 0);
20000570:	f04f 0000 	mov.w	r0, #0
20000574:	f04f 0100 	mov.w	r1, #0
20000578:	f001 f9c0 	bl	200018fc <MSS_GPIO_set_output>
	for(i=0;i<3000000;i++); // We need 400 milisecs (we get 418 msec => OK)
2000057c:	f04f 0300 	mov.w	r3, #0
20000580:	613b      	str	r3, [r7, #16]
20000582:	e003      	b.n	2000058c <nfc_setup+0x80>
20000584:	693b      	ldr	r3, [r7, #16]
20000586:	f103 0301 	add.w	r3, r3, #1
2000058a:	613b      	str	r3, [r7, #16]
2000058c:	693a      	ldr	r2, [r7, #16]
2000058e:	f24c 63bf 	movw	r3, #50879	; 0xc6bf
20000592:	f2c0 032d 	movt	r3, #45	; 0x2d
20000596:	429a      	cmp	r2, r3
20000598:	ddf4      	ble.n	20000584 <nfc_setup+0x78>
	MSS_GPIO_set_output(MSS_GPIO_0 ,(uint8_t)  1);
2000059a:	f04f 0000 	mov.w	r0, #0
2000059e:	f04f 0101 	mov.w	r1, #1
200005a2:	f001 f9ab 	bl	200018fc <MSS_GPIO_set_output>
	for(i=0;i<100000;i++); //We need 10 msecs (we get 18 msec => OK)
200005a6:	f04f 0300 	mov.w	r3, #0
200005aa:	613b      	str	r3, [r7, #16]
200005ac:	e003      	b.n	200005b6 <nfc_setup+0xaa>
200005ae:	693b      	ldr	r3, [r7, #16]
200005b0:	f103 0301 	add.w	r3, r3, #1
200005b4:	613b      	str	r3, [r7, #16]
200005b6:	693a      	ldr	r2, [r7, #16]
200005b8:	f248 639f 	movw	r3, #34463	; 0x869f
200005bc:	f2c0 0301 	movt	r3, #1
200005c0:	429a      	cmp	r2, r3
200005c2:	ddf4      	ble.n	200005ae <nfc_setup+0xa2>
	//nfc_send_command(PN532_COMMAND_RF_CONFIG, PN532_TURN_ON_RF_INFO, sizeof(PN532_TURN_ON_RF_INFO));
	//uint8_t buff[10];
	//while(nfc_read(buff, sizeof(buff), 1));

	uint8_t sam_buff[14];
	uint8_t sc = nfc_SAMConfig(sam_buff);
200005c4:	463b      	mov	r3, r7
200005c6:	4618      	mov	r0, r3
200005c8:	f000 f9aa 	bl	20000920 <nfc_SAMConfig>
200005cc:	4603      	mov	r3, r0
200005ce:	75fb      	strb	r3, [r7, #23]
	return;
}
200005d0:	f107 0718 	add.w	r7, r7, #24
200005d4:	46bd      	mov	sp, r7
200005d6:	bd80      	pop	{r7, pc}

200005d8 <nfc_read_ack>:
 * 			 n	  -> Number of bytes to read
 * 			 read_ack -> if (read_ack == 1) the ack frame will be read in before the information frame.
 * Returns:	 0 if read is successful, 1 if read is not successful
 */

uint8_t nfc_read_ack(){
200005d8:	b580      	push	{r7, lr}
200005da:	b086      	sub	sp, #24
200005dc:	af02      	add	r7, sp, #8
	MSS_I2C_read
200005de:	f641 3368 	movw	r3, #7016	; 0x1b68
200005e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005e6:	781b      	ldrb	r3, [r3, #0]
200005e8:	f04f 0200 	mov.w	r2, #0
200005ec:	9200      	str	r2, [sp, #0]
200005ee:	f641 40d8 	movw	r0, #7384	; 0x1cd8
200005f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200005f6:	f04f 0124 	mov.w	r1, #36	; 0x24
200005fa:	f641 425c 	movw	r2, #7260	; 0x1c5c
200005fe:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000602:	f000 fb75 	bl	20000cf0 <MSS_I2C_read>
				PN532_I2C_ADDRESS,
				NFC_ACK_BUF,
				NFC_ACK_LENGTH,
				MSS_I2C_RELEASE_BUS
		);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
20000606:	f641 40d8 	movw	r0, #7384	; 0x1cd8
2000060a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000060e:	f04f 0100 	mov.w	r1, #0
20000612:	f000 fbe7 	bl	20000de4 <MSS_I2C_wait_complete>
	int i = 0;
20000616:	f04f 0300 	mov.w	r3, #0
2000061a:	607b      	str	r3, [r7, #4]
	int isAck = 1;
2000061c:	f04f 0301 	mov.w	r3, #1
20000620:	60bb      	str	r3, [r7, #8]
	int isNack = 1;
20000622:	f04f 0301 	mov.w	r3, #1
20000626:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < NFC_ACK_LENGTH; ++i){
20000628:	f04f 0300 	mov.w	r3, #0
2000062c:	607b      	str	r3, [r7, #4]
2000062e:	e025      	b.n	2000067c <nfc_read_ack+0xa4>
		if (NFC_ACK_BUF[i] != PN532_ACK_FRAME[i])
20000630:	687a      	ldr	r2, [r7, #4]
20000632:	f641 435c 	movw	r3, #7260	; 0x1c5c
20000636:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000063a:	5c9a      	ldrb	r2, [r3, r2]
2000063c:	6879      	ldr	r1, [r7, #4]
2000063e:	f641 3358 	movw	r3, #7000	; 0x1b58
20000642:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000646:	5c5b      	ldrb	r3, [r3, r1]
20000648:	429a      	cmp	r2, r3
2000064a:	d002      	beq.n	20000652 <nfc_read_ack+0x7a>
			isAck = 0;
2000064c:	f04f 0300 	mov.w	r3, #0
20000650:	60bb      	str	r3, [r7, #8]
		if (NFC_ACK_BUF[i] != PN532_NACK_FRAME[i])
20000652:	687a      	ldr	r2, [r7, #4]
20000654:	f641 435c 	movw	r3, #7260	; 0x1c5c
20000658:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000065c:	5c9a      	ldrb	r2, [r3, r2]
2000065e:	6879      	ldr	r1, [r7, #4]
20000660:	f641 3360 	movw	r3, #7008	; 0x1b60
20000664:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000668:	5c5b      	ldrb	r3, [r3, r1]
2000066a:	429a      	cmp	r2, r3
2000066c:	d002      	beq.n	20000674 <nfc_read_ack+0x9c>
			isNack = 0;
2000066e:	f04f 0300 	mov.w	r3, #0
20000672:	60fb      	str	r3, [r7, #12]
		);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
	int i = 0;
	int isAck = 1;
	int isNack = 1;
	for(i = 0; i < NFC_ACK_LENGTH; ++i){
20000674:	687b      	ldr	r3, [r7, #4]
20000676:	f103 0301 	add.w	r3, r3, #1
2000067a:	607b      	str	r3, [r7, #4]
2000067c:	f641 3368 	movw	r3, #7016	; 0x1b68
20000680:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000684:	781b      	ldrb	r3, [r3, #0]
20000686:	461a      	mov	r2, r3
20000688:	687b      	ldr	r3, [r7, #4]
2000068a:	429a      	cmp	r2, r3
2000068c:	dcd0      	bgt.n	20000630 <nfc_read_ack+0x58>
		if (NFC_ACK_BUF[i] != PN532_ACK_FRAME[i])
			isAck = 0;
		if (NFC_ACK_BUF[i] != PN532_NACK_FRAME[i])
			isNack = 0;
	}
	if(!isAck || isNack)
2000068e:	68bb      	ldr	r3, [r7, #8]
20000690:	2b00      	cmp	r3, #0
20000692:	d002      	beq.n	2000069a <nfc_read_ack+0xc2>
20000694:	68fb      	ldr	r3, [r7, #12]
20000696:	2b00      	cmp	r3, #0
20000698:	d002      	beq.n	200006a0 <nfc_read_ack+0xc8>
		return 0;
2000069a:	f04f 0300 	mov.w	r3, #0
2000069e:	e001      	b.n	200006a4 <nfc_read_ack+0xcc>
	return 1;
200006a0:	f04f 0301 	mov.w	r3, #1
}
200006a4:	4618      	mov	r0, r3
200006a6:	f107 0710 	add.w	r7, r7, #16
200006aa:	46bd      	mov	sp, r7
200006ac:	bd80      	pop	{r7, pc}
200006ae:	bf00      	nop

200006b0 <nfc_read_response>:

uint8_t nfc_read_response(uint8_t *buff, uint8_t n){
200006b0:	b580      	push	{r7, lr}
200006b2:	b086      	sub	sp, #24
200006b4:	af02      	add	r7, sp, #8
200006b6:	6078      	str	r0, [r7, #4]
200006b8:	460b      	mov	r3, r1
200006ba:	70fb      	strb	r3, [r7, #3]
	// Read transaction
	int count = 0;
200006bc:	f04f 0300 	mov.w	r3, #0
200006c0:	60fb      	str	r3, [r7, #12]
	while(buff[0] != 0x01 && count < 10){
200006c2:	e018      	b.n	200006f6 <nfc_read_response+0x46>
		MSS_I2C_read
200006c4:	78fb      	ldrb	r3, [r7, #3]
200006c6:	f04f 0200 	mov.w	r2, #0
200006ca:	9200      	str	r2, [sp, #0]
200006cc:	f641 40d8 	movw	r0, #7384	; 0x1cd8
200006d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006d4:	f04f 0124 	mov.w	r1, #36	; 0x24
200006d8:	687a      	ldr	r2, [r7, #4]
200006da:	f000 fb09 	bl	20000cf0 <MSS_I2C_read>
					PN532_I2C_ADDRESS,
					buff,
					n,
					MSS_I2C_RELEASE_BUS
			);
		MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
200006de:	f641 40d8 	movw	r0, #7384	; 0x1cd8
200006e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200006e6:	f04f 0100 	mov.w	r1, #0
200006ea:	f000 fb7b 	bl	20000de4 <MSS_I2C_wait_complete>
		++count;
200006ee:	68fb      	ldr	r3, [r7, #12]
200006f0:	f103 0301 	add.w	r3, r3, #1
200006f4:	60fb      	str	r3, [r7, #12]
}

uint8_t nfc_read_response(uint8_t *buff, uint8_t n){
	// Read transaction
	int count = 0;
	while(buff[0] != 0x01 && count < 10){
200006f6:	687b      	ldr	r3, [r7, #4]
200006f8:	781b      	ldrb	r3, [r3, #0]
200006fa:	2b01      	cmp	r3, #1
200006fc:	d002      	beq.n	20000704 <nfc_read_response+0x54>
200006fe:	68fb      	ldr	r3, [r7, #12]
20000700:	2b09      	cmp	r3, #9
20000702:	dddf      	ble.n	200006c4 <nfc_read_response+0x14>
					MSS_I2C_RELEASE_BUS
			);
		MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
		++count;
	}
	return 0;
20000704:	f04f 0300 	mov.w	r3, #0
}
20000708:	4618      	mov	r0, r3
2000070a:	f107 0710 	add.w	r7, r7, #16
2000070e:	46bd      	mov	sp, r7
20000710:	bd80      	pop	{r7, pc}
20000712:	bf00      	nop

20000714 <nfc_send_command>:
/*
 * Description:
 * Receives:
 * Returns:	 Nothing
 */
void nfc_send_command(const uint8_t command, const uint8_t info_buf[], const uint8_t len){
20000714:	b580      	push	{r7, lr}
20000716:	b08e      	sub	sp, #56	; 0x38
20000718:	af02      	add	r7, sp, #8
2000071a:	60b9      	str	r1, [r7, #8]
2000071c:	4613      	mov	r3, r2
2000071e:	4602      	mov	r2, r0
20000720:	73fa      	strb	r2, [r7, #15]
20000722:	71fb      	strb	r3, [r7, #7]
	uint16_t length = 0;
20000724:	f04f 0300 	mov.w	r3, #0
20000728:	853b      	strh	r3, [r7, #40]	; 0x28
	uint8_t buffer[20];
	buffer[length++] = (uint8_t) PN532_PREAMBLE; // Preamble
2000072a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2000072c:	f107 0030 	add.w	r0, r7, #48	; 0x30
20000730:	4403      	add	r3, r0
20000732:	f04f 0200 	mov.w	r2, #0
20000736:	f803 2c1c 	strb.w	r2, [r3, #-28]
2000073a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2000073c:	f103 0301 	add.w	r3, r3, #1
20000740:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = 0x00; // Start bits
20000742:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000744:	f107 0130 	add.w	r1, r7, #48	; 0x30
20000748:	440b      	add	r3, r1
2000074a:	f04f 0200 	mov.w	r2, #0
2000074e:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000752:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000754:	f103 0301 	add.w	r3, r3, #1
20000758:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = 0xFF; // Start bits
2000075a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2000075c:	f107 0230 	add.w	r2, r7, #48	; 0x30
20000760:	4413      	add	r3, r2
20000762:	f04f 32ff 	mov.w	r2, #4294967295
20000766:	f803 2c1c 	strb.w	r2, [r3, #-28]
2000076a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2000076c:	f103 0301 	add.w	r3, r3, #1
20000770:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = (len + 2); // Length of (n_data_bytes + TFI byte + command)
20000772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000774:	79fa      	ldrb	r2, [r7, #7]
20000776:	f102 0202 	add.w	r2, r2, #2
2000077a:	b2d2      	uxtb	r2, r2
2000077c:	f107 0030 	add.w	r0, r7, #48	; 0x30
20000780:	4403      	add	r3, r0
20000782:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000786:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000788:	f103 0301 	add.w	r3, r3, #1
2000078c:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = (uint8_t)(0x100 - (len + 2)); // LCS
2000078e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
20000790:	79fb      	ldrb	r3, [r7, #7]
20000792:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
20000796:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
2000079a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
2000079e:	f103 03fe 	add.w	r3, r3, #254	; 0xfe
200007a2:	b2da      	uxtb	r2, r3
200007a4:	f107 0030 	add.w	r0, r7, #48	; 0x30
200007a8:	eb00 0301 	add.w	r3, r0, r1
200007ac:	f803 2c1c 	strb.w	r2, [r3, #-28]
200007b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
200007b2:	f103 0301 	add.w	r3, r3, #1
200007b6:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = (uint8_t) PN532_HOST_TO_NFC; // Write
200007b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
200007ba:	f107 0130 	add.w	r1, r7, #48	; 0x30
200007be:	440b      	add	r3, r1
200007c0:	f06f 022b 	mvn.w	r2, #43	; 0x2b
200007c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
200007c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
200007ca:	f103 0301 	add.w	r3, r3, #1
200007ce:	853b      	strh	r3, [r7, #40]	; 0x28
	uint8_t dcs = (uint8_t)PN532_HOST_TO_NFC + command;
200007d0:	7bfb      	ldrb	r3, [r7, #15]
200007d2:	f1a3 032c 	sub.w	r3, r3, #44	; 0x2c
200007d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[length++] = command;
200007da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
200007dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
200007e0:	4413      	add	r3, r2
200007e2:	7bfa      	ldrb	r2, [r7, #15]
200007e4:	f803 2c1c 	strb.w	r2, [r3, #-28]
200007e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
200007ea:	f103 0301 	add.w	r3, r3, #1
200007ee:	853b      	strh	r3, [r7, #40]	; 0x28
	int i = 0;
200007f0:	f04f 0300 	mov.w	r3, #0
200007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(i = 0; i < len; ++i){
200007f6:	f04f 0300 	mov.w	r3, #0
200007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
200007fc:	e01a      	b.n	20000834 <nfc_send_command+0x120>
		dcs += info_buf[i];
200007fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000800:	68bb      	ldr	r3, [r7, #8]
20000802:	4413      	add	r3, r2
20000804:	781a      	ldrb	r2, [r3, #0]
20000806:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
2000080a:	4413      	add	r3, r2
2000080c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		buffer[length++] = info_buf[i];
20000810:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
20000814:	68ba      	ldr	r2, [r7, #8]
20000816:	440a      	add	r2, r1
20000818:	7812      	ldrb	r2, [r2, #0]
2000081a:	f107 0030 	add.w	r0, r7, #48	; 0x30
2000081e:	4403      	add	r3, r0
20000820:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000824:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000826:	f103 0301 	add.w	r3, r3, #1
2000082a:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = (uint8_t)(0x100 - (len + 2)); // LCS
	buffer[length++] = (uint8_t) PN532_HOST_TO_NFC; // Write
	uint8_t dcs = (uint8_t)PN532_HOST_TO_NFC + command;
	buffer[length++] = command;
	int i = 0;
	for(i = 0; i < len; ++i){
2000082c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000082e:	f103 0301 	add.w	r3, r3, #1
20000832:	62fb      	str	r3, [r7, #44]	; 0x2c
20000834:	79fa      	ldrb	r2, [r7, #7]
20000836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000838:	429a      	cmp	r2, r3
2000083a:	dce0      	bgt.n	200007fe <nfc_send_command+0xea>
		dcs += info_buf[i];
		buffer[length++] = info_buf[i];
	}
	buffer[length++] = (uint8_t)(0x100 - dcs); // DCS
2000083c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2000083e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
20000842:	f1c2 0200 	rsb	r2, r2, #0
20000846:	b2d2      	uxtb	r2, r2
20000848:	f107 0130 	add.w	r1, r7, #48	; 0x30
2000084c:	440b      	add	r3, r1
2000084e:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000852:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000854:	f103 0301 	add.w	r3, r3, #1
20000858:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = PN532_POSTAMBLE; // Postamble
2000085a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2000085c:	f107 0230 	add.w	r2, r7, #48	; 0x30
20000860:	4413      	add	r3, r2
20000862:	f04f 0200 	mov.w	r2, #0
20000866:	f803 2c1c 	strb.w	r2, [r3, #-28]
2000086a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
2000086c:	f103 0301 	add.w	r3, r3, #1
20000870:	853b      	strh	r3, [r7, #40]	; 0x28

	MSS_I2C_write
20000872:	f107 0214 	add.w	r2, r7, #20
20000876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000878:	f04f 0100 	mov.w	r1, #0
2000087c:	9100      	str	r1, [sp, #0]
2000087e:	f641 40d8 	movw	r0, #7384	; 0x1cd8
20000882:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000886:	f04f 0124 	mov.w	r1, #36	; 0x24
2000088a:	f000 f9b7 	bl	20000bfc <MSS_I2C_write>
				PN532_I2C_ADDRESS,
				buffer,
				length,
				MSS_I2C_RELEASE_BUS
		);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
2000088e:	f641 40d8 	movw	r0, #7384	; 0x1cd8
20000892:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000896:	f04f 0100 	mov.w	r1, #0
2000089a:	f000 faa3 	bl	20000de4 <MSS_I2C_wait_complete>
	return;
}
2000089e:	f107 0730 	add.w	r7, r7, #48	; 0x30
200008a2:	46bd      	mov	sp, r7
200008a4:	bd80      	pop	{r7, pc}
200008a6:	bf00      	nop

200008a8 <nfc_InListPassiveTarget>:
	nfc_read_response(array, 9+8);

	return array[3+6];
}

uint8_t nfc_InListPassiveTarget(uint8_t *response_buf){
200008a8:	b580      	push	{r7, lr}
200008aa:	b088      	sub	sp, #32
200008ac:	af00      	add	r7, sp, #0
200008ae:	6078      	str	r0, [r7, #4]

	//send D4 4A 01 00
	//receive D5 4B <num targets> <tg (1) sens_res (2) sel_res (1) nfcidlength (1) nfcid (4?) atslength (1) ats (y)>
	uint8_t command[] = {0x01, 0x00};
200008b0:	f04f 0301 	mov.w	r3, #1
200008b4:	773b      	strb	r3, [r7, #28]
200008b6:	f04f 0300 	mov.w	r3, #0
200008ba:	777b      	strb	r3, [r7, #29]
	nfc_send_command(PN532_COMMAND_INLISTPASSIVETARGET, command, 2);
200008bc:	f107 031c 	add.w	r3, r7, #28
200008c0:	f04f 004a 	mov.w	r0, #74	; 0x4a
200008c4:	4619      	mov	r1, r3
200008c6:	f04f 0202 	mov.w	r2, #2
200008ca:	f7ff ff23 	bl	20000714 <nfc_send_command>
	set_interrupt_handled(0);
200008ce:	f04f 0000 	mov.w	r0, #0
200008d2:	f000 f875 	bl	200009c0 <set_interrupt_handled>
	//uint8_t ack_buf[7];
	//nfc_read(ack_buf, sizeof(ack_buf), 0);
	//while(nfc_read(response_buf, 12 + 8, 1));
	while(!is_interrupt_handled());
200008d6:	f000 f867 	bl	200009a8 <is_interrupt_handled>
200008da:	4603      	mov	r3, r0
200008dc:	2b00      	cmp	r3, #0
200008de:	d0fa      	beq.n	200008d6 <nfc_InListPassiveTarget+0x2e>
	set_interrupt_handled(0);
200008e0:	f04f 0000 	mov.w	r0, #0
200008e4:	f000 f86c 	bl	200009c0 <set_interrupt_handled>
	if(!nfc_read_ack())
200008e8:	f7ff fe76 	bl	200005d8 <nfc_read_ack>
200008ec:	4603      	mov	r3, r0
200008ee:	2b00      	cmp	r3, #0
200008f0:	d102      	bne.n	200008f8 <nfc_InListPassiveTarget+0x50>
		return 0;
200008f2:	f04f 0300 	mov.w	r3, #0
200008f6:	e00d      	b.n	20000914 <nfc_InListPassiveTarget+0x6c>
	uint8_t response_buff[20];
	while (!is_interrupt_handled());
200008f8:	f000 f856 	bl	200009a8 <is_interrupt_handled>
200008fc:	4603      	mov	r3, r0
200008fe:	2b00      	cmp	r3, #0
20000900:	d0fa      	beq.n	200008f8 <nfc_InListPassiveTarget+0x50>
	nfc_read_response(response_buff, 20);
20000902:	f107 0308 	add.w	r3, r7, #8
20000906:	4618      	mov	r0, r3
20000908:	f04f 0114 	mov.w	r1, #20
2000090c:	f7ff fed0 	bl	200006b0 <nfc_read_response>
	return 1; //response_buf[6];
20000910:	f04f 0301 	mov.w	r3, #1
}
20000914:	4618      	mov	r0, r3
20000916:	f107 0720 	add.w	r7, r7, #32
2000091a:	46bd      	mov	sp, r7
2000091c:	bd80      	pop	{r7, pc}
2000091e:	bf00      	nop

20000920 <nfc_SAMConfig>:

uint8_t nfc_SAMConfig(uint8_t *response_buf){
20000920:	b580      	push	{r7, lr}
20000922:	b086      	sub	sp, #24
20000924:	af00      	add	r7, sp, #0
20000926:	6078      	str	r0, [r7, #4]
  uint8_t command[] = {0x01, 0x14, 0x01};
20000928:	f641 326c 	movw	r2, #7020	; 0x1b6c
2000092c:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000930:	f107 0314 	add.w	r3, r7, #20
20000934:	6812      	ldr	r2, [r2, #0]
20000936:	4611      	mov	r1, r2
20000938:	8019      	strh	r1, [r3, #0]
2000093a:	f103 0302 	add.w	r3, r3, #2
2000093e:	ea4f 4212 	mov.w	r2, r2, lsr #16
20000942:	701a      	strb	r2, [r3, #0]
  nfc_send_command(PN532_COMMAND_SAMCONFIG, command, 3);
20000944:	f107 0314 	add.w	r3, r7, #20
20000948:	f04f 0014 	mov.w	r0, #20
2000094c:	4619      	mov	r1, r3
2000094e:	f04f 0203 	mov.w	r2, #3
20000952:	f7ff fedf 	bl	20000714 <nfc_send_command>
  set_interrupt_handled(0);
20000956:	f04f 0000 	mov.w	r0, #0
2000095a:	f000 f831 	bl	200009c0 <set_interrupt_handled>
  while (!is_interrupt_handled());
2000095e:	f000 f823 	bl	200009a8 <is_interrupt_handled>
20000962:	4603      	mov	r3, r0
20000964:	2b00      	cmp	r3, #0
20000966:	d0fa      	beq.n	2000095e <nfc_SAMConfig+0x3e>
  set_interrupt_handled(0);
20000968:	f04f 0000 	mov.w	r0, #0
2000096c:	f000 f828 	bl	200009c0 <set_interrupt_handled>
  if(!nfc_read_ack())
20000970:	f7ff fe32 	bl	200005d8 <nfc_read_ack>
20000974:	4603      	mov	r3, r0
20000976:	2b00      	cmp	r3, #0
20000978:	d102      	bne.n	20000980 <nfc_SAMConfig+0x60>
  		return 0;
2000097a:	f04f 0300 	mov.w	r3, #0
2000097e:	e00d      	b.n	2000099c <nfc_SAMConfig+0x7c>
  uint8_t response_buff[10];
  while (!is_interrupt_handled());
20000980:	f000 f812 	bl	200009a8 <is_interrupt_handled>
20000984:	4603      	mov	r3, r0
20000986:	2b00      	cmp	r3, #0
20000988:	d0fa      	beq.n	20000980 <nfc_SAMConfig+0x60>
  nfc_read_response(response_buff, 10);
2000098a:	f107 0308 	add.w	r3, r7, #8
2000098e:	4618      	mov	r0, r3
20000990:	f04f 010a 	mov.w	r1, #10
20000994:	f7ff fe8c 	bl	200006b0 <nfc_read_response>
  return 1;// response_buf[6];
20000998:	f04f 0301 	mov.w	r3, #1
}
2000099c:	4618      	mov	r0, r3
2000099e:	f107 0718 	add.w	r7, r7, #24
200009a2:	46bd      	mov	sp, r7
200009a4:	bd80      	pop	{r7, pc}
200009a6:	bf00      	nop

200009a8 <is_interrupt_handled>:
	uint8_t response_buff[14];
	nfc_read_response(response_buff, 14);
	return 1;
}

uint8_t is_interrupt_handled(void){
200009a8:	b480      	push	{r7}
200009aa:	af00      	add	r7, sp, #0
	return interrupt_handled;
200009ac:	f641 4354 	movw	r3, #7252	; 0x1c54
200009b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009b4:	781b      	ldrb	r3, [r3, #0]
}
200009b6:	4618      	mov	r0, r3
200009b8:	46bd      	mov	sp, r7
200009ba:	bc80      	pop	{r7}
200009bc:	4770      	bx	lr
200009be:	bf00      	nop

200009c0 <set_interrupt_handled>:

void set_interrupt_handled(uint8_t val){
200009c0:	b480      	push	{r7}
200009c2:	b083      	sub	sp, #12
200009c4:	af00      	add	r7, sp, #0
200009c6:	4603      	mov	r3, r0
200009c8:	71fb      	strb	r3, [r7, #7]
	interrupt_handled = val;
200009ca:	f641 4354 	movw	r3, #7252	; 0x1c54
200009ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009d2:	79fa      	ldrb	r2, [r7, #7]
200009d4:	701a      	strb	r2, [r3, #0]
}
200009d6:	f107 070c 	add.w	r7, r7, #12
200009da:	46bd      	mov	sp, r7
200009dc:	bc80      	pop	{r7}
200009de:	4770      	bx	lr

200009e0 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200009e0:	b480      	push	{r7}
200009e2:	b083      	sub	sp, #12
200009e4:	af00      	add	r7, sp, #0
200009e6:	4603      	mov	r3, r0
200009e8:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200009ea:	f24e 1300 	movw	r3, #57600	; 0xe100
200009ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
200009f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200009f6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200009fa:	88f9      	ldrh	r1, [r7, #6]
200009fc:	f001 011f 	and.w	r1, r1, #31
20000a00:	f04f 0001 	mov.w	r0, #1
20000a04:	fa00 f101 	lsl.w	r1, r0, r1
20000a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000a0c:	f107 070c 	add.w	r7, r7, #12
20000a10:	46bd      	mov	sp, r7
20000a12:	bc80      	pop	{r7}
20000a14:	4770      	bx	lr
20000a16:	bf00      	nop

20000a18 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20000a18:	b480      	push	{r7}
20000a1a:	b083      	sub	sp, #12
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	4603      	mov	r3, r0
20000a20:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000a22:	f24e 1300 	movw	r3, #57600	; 0xe100
20000a26:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000a2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000a2e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000a32:	88f9      	ldrh	r1, [r7, #6]
20000a34:	f001 011f 	and.w	r1, r1, #31
20000a38:	f04f 0001 	mov.w	r0, #1
20000a3c:	fa00 f101 	lsl.w	r1, r0, r1
20000a40:	f102 0220 	add.w	r2, r2, #32
20000a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000a48:	f107 070c 	add.w	r7, r7, #12
20000a4c:	46bd      	mov	sp, r7
20000a4e:	bc80      	pop	{r7}
20000a50:	4770      	bx	lr
20000a52:	bf00      	nop

20000a54 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000a54:	b480      	push	{r7}
20000a56:	b083      	sub	sp, #12
20000a58:	af00      	add	r7, sp, #0
20000a5a:	4603      	mov	r3, r0
20000a5c:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000a5e:	f24e 1300 	movw	r3, #57600	; 0xe100
20000a62:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000a66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000a6a:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000a6e:	88f9      	ldrh	r1, [r7, #6]
20000a70:	f001 011f 	and.w	r1, r1, #31
20000a74:	f04f 0001 	mov.w	r0, #1
20000a78:	fa00 f101 	lsl.w	r1, r0, r1
20000a7c:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000a84:	f107 070c 	add.w	r7, r7, #12
20000a88:	46bd      	mov	sp, r7
20000a8a:	bc80      	pop	{r7}
20000a8c:	4770      	bx	lr
20000a8e:	bf00      	nop

20000a90 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
20000a90:	b580      	push	{r7, lr}
20000a92:	b084      	sub	sp, #16
20000a94:	af00      	add	r7, sp, #0
20000a96:	6078      	str	r0, [r7, #4]
20000a98:	4613      	mov	r3, r2
20000a9a:	460a      	mov	r2, r1
20000a9c:	70fa      	strb	r2, [r7, #3]
20000a9e:	70bb      	strb	r3, [r7, #2]
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
20000aa0:	78bb      	ldrb	r3, [r7, #2]
20000aa2:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000aa4:	687a      	ldr	r2, [r7, #4]
20000aa6:	f641 4364 	movw	r3, #7268	; 0x1c64
20000aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000aae:	429a      	cmp	r2, r3
20000ab0:	d007      	beq.n	20000ac2 <MSS_I2C_init+0x32>
20000ab2:	687a      	ldr	r2, [r7, #4]
20000ab4:	f641 43d8 	movw	r3, #7384	; 0x1cd8
20000ab8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000abc:	429a      	cmp	r2, r3
20000abe:	d000      	beq.n	20000ac2 <MSS_I2C_init+0x32>
20000ac0:	be00      	bkpt	0x0000
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
20000ac2:	f000 fe43 	bl	2000174c <disable_interrupts>
20000ac6:	4603      	mov	r3, r0
20000ac8:	60bb      	str	r3, [r7, #8]
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
20000aca:	6878      	ldr	r0, [r7, #4]
20000acc:	f04f 0100 	mov.w	r1, #0
20000ad0:	f04f 0274 	mov.w	r2, #116	; 0x74
20000ad4:	f000 ffd6 	bl	20001a84 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
20000ad8:	687a      	ldr	r2, [r7, #4]
20000ada:	f641 4364 	movw	r3, #7268	; 0x1c64
20000ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ae2:	429a      	cmp	r2, r3
20000ae4:	d12c      	bne.n	20000b40 <MSS_I2C_init+0xb0>
    {
        this_i2c->irqn = I2C0_IRQn;
20000ae6:	687b      	ldr	r3, [r7, #4]
20000ae8:	f04f 020e 	mov.w	r2, #14
20000aec:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C0;
20000aee:	687a      	ldr	r2, [r7, #4]
20000af0:	f242 0300 	movw	r3, #8192	; 0x2000
20000af4:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000af8:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
20000afa:	687a      	ldr	r2, [r7, #4]
20000afc:	f240 0300 	movw	r3, #0
20000b00:	f2c4 2304 	movt	r3, #16900	; 0x4204
20000b04:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
20000b06:	f242 0300 	movw	r3, #8192	; 0x2000
20000b0a:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b0e:	f242 0200 	movw	r2, #8192	; 0x2000
20000b12:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b16:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
20000b1c:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
20000b1e:	f04f 000e 	mov.w	r0, #14
20000b22:	f7ff ff97 	bl	20000a54 <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
20000b26:	f242 0300 	movw	r3, #8192	; 0x2000
20000b2a:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b2e:	f242 0200 	movw	r2, #8192	; 0x2000
20000b32:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b36:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20000b3c:	631a      	str	r2, [r3, #48]	; 0x30
20000b3e:	e02b      	b.n	20000b98 <MSS_I2C_init+0x108>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20000b40:	687b      	ldr	r3, [r7, #4]
20000b42:	f04f 0211 	mov.w	r2, #17
20000b46:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C1;
20000b48:	687a      	ldr	r2, [r7, #4]
20000b4a:	f242 0300 	movw	r3, #8192	; 0x2000
20000b4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000b52:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
20000b54:	687a      	ldr	r2, [r7, #4]
20000b56:	f240 0300 	movw	r3, #0
20000b5a:	f2c4 2324 	movt	r3, #16932	; 0x4224
20000b5e:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
20000b60:	f242 0300 	movw	r3, #8192	; 0x2000
20000b64:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b68:	f242 0200 	movw	r2, #8192	; 0x2000
20000b6c:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b70:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20000b76:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
20000b78:	f04f 0011 	mov.w	r0, #17
20000b7c:	f7ff ff6a 	bl	20000a54 <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
20000b80:	f242 0300 	movw	r3, #8192	; 0x2000
20000b84:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b88:	f242 0200 	movw	r2, #8192	; 0x2000
20000b8c:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b90:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20000b96:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
20000b98:	687b      	ldr	r3, [r7, #4]
20000b9a:	699b      	ldr	r3, [r3, #24]
20000b9c:	461a      	mov	r2, r3
20000b9e:	687b      	ldr	r3, [r7, #4]
20000ba0:	61da      	str	r2, [r3, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
20000ba2:	78fb      	ldrb	r3, [r7, #3]
20000ba4:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000ba8:	687b      	ldr	r3, [r7, #4]
20000baa:	601a      	str	r2, [r3, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
20000bac:	687b      	ldr	r3, [r7, #4]
20000bae:	699b      	ldr	r3, [r3, #24]
20000bb0:	68fa      	ldr	r2, [r7, #12]
20000bb2:	ea4f 0292 	mov.w	r2, r2, lsr #2
20000bb6:	f002 0201 	and.w	r2, r2, #1
20000bba:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
20000bbc:	687b      	ldr	r3, [r7, #4]
20000bbe:	699b      	ldr	r3, [r3, #24]
20000bc0:	68fa      	ldr	r2, [r7, #12]
20000bc2:	ea4f 0252 	mov.w	r2, r2, lsr #1
20000bc6:	f002 0201 	and.w	r2, r2, #1
20000bca:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
20000bcc:	687b      	ldr	r3, [r7, #4]
20000bce:	699b      	ldr	r3, [r3, #24]
20000bd0:	68fa      	ldr	r2, [r7, #12]
20000bd2:	f002 0201 	and.w	r2, r2, #1
20000bd6:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
20000bd8:	687b      	ldr	r3, [r7, #4]
20000bda:	695b      	ldr	r3, [r3, #20]
20000bdc:	687a      	ldr	r2, [r7, #4]
20000bde:	6812      	ldr	r2, [r2, #0]
20000be0:	b2d2      	uxtb	r2, r2
20000be2:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
20000be4:	687b      	ldr	r3, [r7, #4]
20000be6:	699b      	ldr	r3, [r3, #24]
20000be8:	f04f 0201 	mov.w	r2, #1
20000bec:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
20000bee:	68b8      	ldr	r0, [r7, #8]
20000bf0:	f000 fdbe 	bl	20001770 <restore_interrupts>
}
20000bf4:	f107 0710 	add.w	r7, r7, #16
20000bf8:	46bd      	mov	sp, r7
20000bfa:	bd80      	pop	{r7, pc}

20000bfc <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
20000bfc:	b580      	push	{r7, lr}
20000bfe:	b086      	sub	sp, #24
20000c00:	af00      	add	r7, sp, #0
20000c02:	60f8      	str	r0, [r7, #12]
20000c04:	607a      	str	r2, [r7, #4]
20000c06:	460a      	mov	r2, r1
20000c08:	72fa      	strb	r2, [r7, #11]
20000c0a:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20000c0c:	68fa      	ldr	r2, [r7, #12]
20000c0e:	f641 4364 	movw	r3, #7268	; 0x1c64
20000c12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c16:	429a      	cmp	r2, r3
20000c18:	d007      	beq.n	20000c2a <MSS_I2C_write+0x2e>
20000c1a:	68fa      	ldr	r2, [r7, #12]
20000c1c:	f641 43d8 	movw	r3, #7384	; 0x1cd8
20000c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c24:	429a      	cmp	r2, r3
20000c26:	d000      	beq.n	20000c2a <MSS_I2C_write+0x2e>
20000c28:	be00      	bkpt	0x0000

    primask = disable_interrupts();
20000c2a:	f000 fd8f 	bl	2000174c <disable_interrupts>
20000c2e:	4603      	mov	r3, r0
20000c30:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20000c32:	68fb      	ldr	r3, [r7, #12]
20000c34:	7a1b      	ldrb	r3, [r3, #8]
20000c36:	2b00      	cmp	r3, #0
20000c38:	d103      	bne.n	20000c42 <MSS_I2C_write+0x46>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
20000c3a:	68fb      	ldr	r3, [r7, #12]
20000c3c:	f04f 0201 	mov.w	r2, #1
20000c40:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
20000c42:	68fb      	ldr	r3, [r7, #12]
20000c44:	f04f 0201 	mov.w	r2, #1
20000c48:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20000c4c:	7afb      	ldrb	r3, [r7, #11]
20000c4e:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000c52:	68fb      	ldr	r3, [r7, #12]
20000c54:	605a      	str	r2, [r3, #4]

    this_i2c->dir = WRITE_DIR;
20000c56:	68fb      	ldr	r3, [r7, #12]
20000c58:	f04f 0200 	mov.w	r2, #0
20000c5c:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
20000c5e:	68fb      	ldr	r3, [r7, #12]
20000c60:	687a      	ldr	r2, [r7, #4]
20000c62:	621a      	str	r2, [r3, #32]
    this_i2c->master_tx_size = write_size;
20000c64:	887a      	ldrh	r2, [r7, #2]
20000c66:	68fb      	ldr	r3, [r7, #12]
20000c68:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
20000c6a:	68fb      	ldr	r3, [r7, #12]
20000c6c:	f04f 0200 	mov.w	r2, #0
20000c70:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20000c72:	68fb      	ldr	r3, [r7, #12]
20000c74:	f04f 0201 	mov.w	r2, #1
20000c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
20000c7c:	68fb      	ldr	r3, [r7, #12]
20000c7e:	f897 2020 	ldrb.w	r2, [r7, #32]
20000c82:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20000c84:	68fb      	ldr	r3, [r7, #12]
20000c86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20000c8a:	b2db      	uxtb	r3, r3
20000c8c:	2b01      	cmp	r3, #1
20000c8e:	d105      	bne.n	20000c9c <MSS_I2C_write+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
20000c90:	68fb      	ldr	r3, [r7, #12]
20000c92:	f04f 0201 	mov.w	r2, #1
20000c96:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
20000c9a:	e004      	b.n	20000ca6 <MSS_I2C_write+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20000c9c:	68fb      	ldr	r3, [r7, #12]
20000c9e:	699b      	ldr	r3, [r3, #24]
20000ca0:	f04f 0201 	mov.w	r2, #1
20000ca4:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
20000ca6:	68fb      	ldr	r3, [r7, #12]
20000ca8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
20000cac:	2b01      	cmp	r3, #1
20000cae:	d111      	bne.n	20000cd4 <MSS_I2C_write+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20000cb0:	68fb      	ldr	r3, [r7, #12]
20000cb2:	699b      	ldr	r3, [r3, #24]
20000cb4:	f04f 0200 	mov.w	r2, #0
20000cb8:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
20000cba:	68fb      	ldr	r3, [r7, #12]
20000cbc:	695b      	ldr	r3, [r3, #20]
20000cbe:	791b      	ldrb	r3, [r3, #4]
20000cc0:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20000cc2:	7cfb      	ldrb	r3, [r7, #19]
20000cc4:	b2db      	uxtb	r3, r3
20000cc6:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20000cc8:	68fb      	ldr	r3, [r7, #12]
20000cca:	8a5b      	ldrh	r3, [r3, #18]
20000ccc:	b21b      	sxth	r3, r3
20000cce:	4618      	mov	r0, r3
20000cd0:	f7ff fec0 	bl	20000a54 <NVIC_ClearPendingIRQ>
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20000cd4:	68fb      	ldr	r3, [r7, #12]
20000cd6:	8a5b      	ldrh	r3, [r3, #18]
20000cd8:	b21b      	sxth	r3, r3
20000cda:	4618      	mov	r0, r3
20000cdc:	f7ff fe80 	bl	200009e0 <NVIC_EnableIRQ>

    restore_interrupts( primask );
20000ce0:	6978      	ldr	r0, [r7, #20]
20000ce2:	f000 fd45 	bl	20001770 <restore_interrupts>
}
20000ce6:	f107 0718 	add.w	r7, r7, #24
20000cea:	46bd      	mov	sp, r7
20000cec:	bd80      	pop	{r7, pc}
20000cee:	bf00      	nop

20000cf0 <MSS_I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20000cf0:	b580      	push	{r7, lr}
20000cf2:	b086      	sub	sp, #24
20000cf4:	af00      	add	r7, sp, #0
20000cf6:	60f8      	str	r0, [r7, #12]
20000cf8:	607a      	str	r2, [r7, #4]
20000cfa:	460a      	mov	r2, r1
20000cfc:	72fa      	strb	r2, [r7, #11]
20000cfe:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20000d00:	68fa      	ldr	r2, [r7, #12]
20000d02:	f641 4364 	movw	r3, #7268	; 0x1c64
20000d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d0a:	429a      	cmp	r2, r3
20000d0c:	d007      	beq.n	20000d1e <MSS_I2C_read+0x2e>
20000d0e:	68fa      	ldr	r2, [r7, #12]
20000d10:	f641 43d8 	movw	r3, #7384	; 0x1cd8
20000d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d18:	429a      	cmp	r2, r3
20000d1a:	d000      	beq.n	20000d1e <MSS_I2C_read+0x2e>
20000d1c:	be00      	bkpt	0x0000

    primask = disable_interrupts();
20000d1e:	f000 fd15 	bl	2000174c <disable_interrupts>
20000d22:	4603      	mov	r3, r0
20000d24:	617b      	str	r3, [r7, #20]
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20000d26:	68fb      	ldr	r3, [r7, #12]
20000d28:	7a1b      	ldrb	r3, [r3, #8]
20000d2a:	2b00      	cmp	r3, #0
20000d2c:	d103      	bne.n	20000d36 <MSS_I2C_read+0x46>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
20000d2e:	68fb      	ldr	r3, [r7, #12]
20000d30:	f04f 0202 	mov.w	r2, #2
20000d34:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
20000d36:	68fb      	ldr	r3, [r7, #12]
20000d38:	f04f 0202 	mov.w	r2, #2
20000d3c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20000d40:	7afb      	ldrb	r3, [r7, #11]
20000d42:	ea4f 0243 	mov.w	r2, r3, lsl #1
20000d46:	68fb      	ldr	r3, [r7, #12]
20000d48:	605a      	str	r2, [r3, #4]

    this_i2c->dir = READ_DIR;
20000d4a:	68fb      	ldr	r3, [r7, #12]
20000d4c:	f04f 0201 	mov.w	r2, #1
20000d50:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_rx_buffer = read_buffer;
20000d52:	68fb      	ldr	r3, [r7, #12]
20000d54:	687a      	ldr	r2, [r7, #4]
20000d56:	631a      	str	r2, [r3, #48]	; 0x30
    this_i2c->master_rx_size = read_size;
20000d58:	887a      	ldrh	r2, [r7, #2]
20000d5a:	68fb      	ldr	r3, [r7, #12]
20000d5c:	635a      	str	r2, [r3, #52]	; 0x34
    this_i2c->master_rx_idx = 0u;
20000d5e:	68fb      	ldr	r3, [r7, #12]
20000d60:	f04f 0200 	mov.w	r2, #0
20000d64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20000d66:	68fb      	ldr	r3, [r7, #12]
20000d68:	f04f 0201 	mov.w	r2, #1
20000d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
20000d70:	68fb      	ldr	r3, [r7, #12]
20000d72:	f897 2020 	ldrb.w	r2, [r7, #32]
20000d76:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20000d78:	68fb      	ldr	r3, [r7, #12]
20000d7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20000d7e:	b2db      	uxtb	r3, r3
20000d80:	2b01      	cmp	r3, #1
20000d82:	d105      	bne.n	20000d90 <MSS_I2C_read+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
20000d84:	68fb      	ldr	r3, [r7, #12]
20000d86:	f04f 0201 	mov.w	r2, #1
20000d8a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
20000d8e:	e004      	b.n	20000d9a <MSS_I2C_read+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20000d90:	68fb      	ldr	r3, [r7, #12]
20000d92:	699b      	ldr	r3, [r3, #24]
20000d94:	f04f 0201 	mov.w	r2, #1
20000d98:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
20000d9a:	68fb      	ldr	r3, [r7, #12]
20000d9c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
20000da0:	2b01      	cmp	r3, #1
20000da2:	d111      	bne.n	20000dc8 <MSS_I2C_read+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20000da4:	68fb      	ldr	r3, [r7, #12]
20000da6:	699b      	ldr	r3, [r3, #24]
20000da8:	f04f 0200 	mov.w	r2, #0
20000dac:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
20000dae:	68fb      	ldr	r3, [r7, #12]
20000db0:	695b      	ldr	r3, [r3, #20]
20000db2:	791b      	ldrb	r3, [r3, #4]
20000db4:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20000db6:	7cfb      	ldrb	r3, [r7, #19]
20000db8:	b2db      	uxtb	r3, r3
20000dba:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20000dbc:	68fb      	ldr	r3, [r7, #12]
20000dbe:	8a5b      	ldrh	r3, [r3, #18]
20000dc0:	b21b      	sxth	r3, r3
20000dc2:	4618      	mov	r0, r3
20000dc4:	f7ff fe46 	bl	20000a54 <NVIC_ClearPendingIRQ>
    }
    
    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20000dc8:	68fb      	ldr	r3, [r7, #12]
20000dca:	8a5b      	ldrh	r3, [r3, #18]
20000dcc:	b21b      	sxth	r3, r3
20000dce:	4618      	mov	r0, r3
20000dd0:	f7ff fe06 	bl	200009e0 <NVIC_EnableIRQ>
    restore_interrupts( primask );
20000dd4:	6978      	ldr	r0, [r7, #20]
20000dd6:	f000 fccb 	bl	20001770 <restore_interrupts>
}
20000dda:	f107 0718 	add.w	r7, r7, #24
20000dde:	46bd      	mov	sp, r7
20000de0:	bd80      	pop	{r7, pc}
20000de2:	bf00      	nop

20000de4 <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
20000de4:	b480      	push	{r7}
20000de6:	b085      	sub	sp, #20
20000de8:	af00      	add	r7, sp, #0
20000dea:	6078      	str	r0, [r7, #4]
20000dec:	6039      	str	r1, [r7, #0]
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000dee:	687a      	ldr	r2, [r7, #4]
20000df0:	f641 4364 	movw	r3, #7268	; 0x1c64
20000df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000df8:	429a      	cmp	r2, r3
20000dfa:	d007      	beq.n	20000e0c <MSS_I2C_wait_complete+0x28>
20000dfc:	687a      	ldr	r2, [r7, #4]
20000dfe:	f641 43d8 	movw	r3, #7384	; 0x1cd8
20000e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e06:	429a      	cmp	r2, r3
20000e08:	d000      	beq.n	20000e0c <MSS_I2C_wait_complete+0x28>
20000e0a:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
20000e0c:	687b      	ldr	r3, [r7, #4]
20000e0e:	683a      	ldr	r2, [r7, #0]
20000e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
20000e12:	687b      	ldr	r3, [r7, #4]
20000e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20000e18:	73fb      	strb	r3, [r7, #15]
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
20000e1a:	7bfb      	ldrb	r3, [r7, #15]
20000e1c:	2b01      	cmp	r3, #1
20000e1e:	d0f8      	beq.n	20000e12 <MSS_I2C_wait_complete+0x2e>

    return i2c_status;
20000e20:	7bfb      	ldrb	r3, [r7, #15]
}
20000e22:	4618      	mov	r0, r3
20000e24:	f107 0714 	add.w	r7, r7, #20
20000e28:	46bd      	mov	sp, r7
20000e2a:	bc80      	pop	{r7}
20000e2c:	4770      	bx	lr
20000e2e:	bf00      	nop

20000e30 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
20000e30:	b480      	push	{r7}
20000e32:	b083      	sub	sp, #12
20000e34:	af00      	add	r7, sp, #0
20000e36:	6078      	str	r0, [r7, #4]
    if( this_i2c->is_slave_enabled )
20000e38:	687b      	ldr	r3, [r7, #4]
20000e3a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20000e3e:	2b00      	cmp	r3, #0
20000e40:	d004      	beq.n	20000e4c <enable_slave_if_required+0x1c>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
20000e42:	687b      	ldr	r3, [r7, #4]
20000e44:	699b      	ldr	r3, [r3, #24]
20000e46:	f04f 0201 	mov.w	r2, #1
20000e4a:	609a      	str	r2, [r3, #8]
    }
}
20000e4c:	f107 070c 	add.w	r7, r7, #12
20000e50:	46bd      	mov	sp, r7
20000e52:	bc80      	pop	{r7}
20000e54:	4770      	bx	lr
20000e56:	bf00      	nop

20000e58 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
20000e58:	b580      	push	{r7, lr}
20000e5a:	b084      	sub	sp, #16
20000e5c:	af00      	add	r7, sp, #0
20000e5e:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
20000e60:	f04f 0301 	mov.w	r3, #1
20000e64:	73bb      	strb	r3, [r7, #14]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000e66:	687a      	ldr	r2, [r7, #4]
20000e68:	f641 4364 	movw	r3, #7268	; 0x1c64
20000e6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e70:	429a      	cmp	r2, r3
20000e72:	d007      	beq.n	20000e84 <mss_i2c_isr+0x2c>
20000e74:	687a      	ldr	r2, [r7, #4]
20000e76:	f641 43d8 	movw	r3, #7384	; 0x1cd8
20000e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e7e:	429a      	cmp	r2, r3
20000e80:	d000      	beq.n	20000e84 <mss_i2c_isr+0x2c>
20000e82:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
20000e84:	687b      	ldr	r3, [r7, #4]
20000e86:	695b      	ldr	r3, [r3, #20]
20000e88:	791b      	ldrb	r3, [r3, #4]
20000e8a:	72fb      	strb	r3, [r7, #11]

    switch( status )
20000e8c:	7afb      	ldrb	r3, [r7, #11]
20000e8e:	b2db      	uxtb	r3, r3
20000e90:	f1a3 0308 	sub.w	r3, r3, #8
20000e94:	2bd0      	cmp	r3, #208	; 0xd0
20000e96:	f200 841c 	bhi.w	200016d2 <mss_i2c_isr+0x87a>
20000e9a:	a201      	add	r2, pc, #4	; (adr r2, 20000ea0 <mss_i2c_isr+0x48>)
20000e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000ea0:	200011e5 	.word	0x200011e5
20000ea4:	200016d3 	.word	0x200016d3
20000ea8:	200016d3 	.word	0x200016d3
20000eac:	200016d3 	.word	0x200016d3
20000eb0:	200016d3 	.word	0x200016d3
20000eb4:	200016d3 	.word	0x200016d3
20000eb8:	200016d3 	.word	0x200016d3
20000ebc:	200016d3 	.word	0x200016d3
20000ec0:	200011e5 	.word	0x200011e5
20000ec4:	200016d3 	.word	0x200016d3
20000ec8:	200016d3 	.word	0x200016d3
20000ecc:	200016d3 	.word	0x200016d3
20000ed0:	200016d3 	.word	0x200016d3
20000ed4:	200016d3 	.word	0x200016d3
20000ed8:	200016d3 	.word	0x200016d3
20000edc:	200016d3 	.word	0x200016d3
20000ee0:	20001289 	.word	0x20001289
20000ee4:	200016d3 	.word	0x200016d3
20000ee8:	200016d3 	.word	0x200016d3
20000eec:	200016d3 	.word	0x200016d3
20000ef0:	200016d3 	.word	0x200016d3
20000ef4:	200016d3 	.word	0x200016d3
20000ef8:	200016d3 	.word	0x200016d3
20000efc:	200016d3 	.word	0x200016d3
20000f00:	20001265 	.word	0x20001265
20000f04:	200016d3 	.word	0x200016d3
20000f08:	200016d3 	.word	0x200016d3
20000f0c:	200016d3 	.word	0x200016d3
20000f10:	200016d3 	.word	0x200016d3
20000f14:	200016d3 	.word	0x200016d3
20000f18:	200016d3 	.word	0x200016d3
20000f1c:	200016d3 	.word	0x200016d3
20000f20:	20001289 	.word	0x20001289
20000f24:	200016d3 	.word	0x200016d3
20000f28:	200016d3 	.word	0x200016d3
20000f2c:	200016d3 	.word	0x200016d3
20000f30:	200016d3 	.word	0x200016d3
20000f34:	200016d3 	.word	0x200016d3
20000f38:	200016d3 	.word	0x200016d3
20000f3c:	200016d3 	.word	0x200016d3
20000f40:	2000131d 	.word	0x2000131d
20000f44:	200016d3 	.word	0x200016d3
20000f48:	200016d3 	.word	0x200016d3
20000f4c:	200016d3 	.word	0x200016d3
20000f50:	200016d3 	.word	0x200016d3
20000f54:	200016d3 	.word	0x200016d3
20000f58:	200016d3 	.word	0x200016d3
20000f5c:	200016d3 	.word	0x200016d3
20000f60:	20001259 	.word	0x20001259
20000f64:	200016d3 	.word	0x200016d3
20000f68:	200016d3 	.word	0x200016d3
20000f6c:	200016d3 	.word	0x200016d3
20000f70:	200016d3 	.word	0x200016d3
20000f74:	200016d3 	.word	0x200016d3
20000f78:	200016d3 	.word	0x200016d3
20000f7c:	200016d3 	.word	0x200016d3
20000f80:	20001341 	.word	0x20001341
20000f84:	200016d3 	.word	0x200016d3
20000f88:	200016d3 	.word	0x200016d3
20000f8c:	200016d3 	.word	0x200016d3
20000f90:	200016d3 	.word	0x200016d3
20000f94:	200016d3 	.word	0x200016d3
20000f98:	200016d3 	.word	0x200016d3
20000f9c:	200016d3 	.word	0x200016d3
20000fa0:	20001391 	.word	0x20001391
20000fa4:	200016d3 	.word	0x200016d3
20000fa8:	200016d3 	.word	0x200016d3
20000fac:	200016d3 	.word	0x200016d3
20000fb0:	200016d3 	.word	0x200016d3
20000fb4:	200016d3 	.word	0x200016d3
20000fb8:	200016d3 	.word	0x200016d3
20000fbc:	200016d3 	.word	0x200016d3
20000fc0:	200013b5 	.word	0x200013b5
20000fc4:	200016d3 	.word	0x200016d3
20000fc8:	200016d3 	.word	0x200016d3
20000fcc:	200016d3 	.word	0x200016d3
20000fd0:	200016d3 	.word	0x200016d3
20000fd4:	200016d3 	.word	0x200016d3
20000fd8:	200016d3 	.word	0x200016d3
20000fdc:	200016d3 	.word	0x200016d3
20000fe0:	200013ef 	.word	0x200013ef
20000fe4:	200016d3 	.word	0x200016d3
20000fe8:	200016d3 	.word	0x200016d3
20000fec:	200016d3 	.word	0x200016d3
20000ff0:	200016d3 	.word	0x200016d3
20000ff4:	200016d3 	.word	0x200016d3
20000ff8:	200016d3 	.word	0x200016d3
20000ffc:	200016d3 	.word	0x200016d3
20001000:	20001491 	.word	0x20001491
20001004:	200016d3 	.word	0x200016d3
20001008:	200016d3 	.word	0x200016d3
2000100c:	200016d3 	.word	0x200016d3
20001010:	200016d3 	.word	0x200016d3
20001014:	200016d3 	.word	0x200016d3
20001018:	200016d3 	.word	0x200016d3
2000101c:	200016d3 	.word	0x200016d3
20001020:	20001487 	.word	0x20001487
20001024:	200016d3 	.word	0x200016d3
20001028:	200016d3 	.word	0x200016d3
2000102c:	200016d3 	.word	0x200016d3
20001030:	200016d3 	.word	0x200016d3
20001034:	200016d3 	.word	0x200016d3
20001038:	200016d3 	.word	0x200016d3
2000103c:	200016d3 	.word	0x200016d3
20001040:	20001491 	.word	0x20001491
20001044:	200016d3 	.word	0x200016d3
20001048:	200016d3 	.word	0x200016d3
2000104c:	200016d3 	.word	0x200016d3
20001050:	200016d3 	.word	0x200016d3
20001054:	200016d3 	.word	0x200016d3
20001058:	200016d3 	.word	0x200016d3
2000105c:	200016d3 	.word	0x200016d3
20001060:	20001487 	.word	0x20001487
20001064:	200016d3 	.word	0x200016d3
20001068:	200016d3 	.word	0x200016d3
2000106c:	200016d3 	.word	0x200016d3
20001070:	200016d3 	.word	0x200016d3
20001074:	200016d3 	.word	0x200016d3
20001078:	200016d3 	.word	0x200016d3
2000107c:	200016d3 	.word	0x200016d3
20001080:	200014d3 	.word	0x200014d3
20001084:	200016d3 	.word	0x200016d3
20001088:	200016d3 	.word	0x200016d3
2000108c:	200016d3 	.word	0x200016d3
20001090:	200016d3 	.word	0x200016d3
20001094:	200016d3 	.word	0x200016d3
20001098:	200016d3 	.word	0x200016d3
2000109c:	200016d3 	.word	0x200016d3
200010a0:	20001453 	.word	0x20001453
200010a4:	200016d3 	.word	0x200016d3
200010a8:	200016d3 	.word	0x200016d3
200010ac:	200016d3 	.word	0x200016d3
200010b0:	200016d3 	.word	0x200016d3
200010b4:	200016d3 	.word	0x200016d3
200010b8:	200016d3 	.word	0x200016d3
200010bc:	200016d3 	.word	0x200016d3
200010c0:	200014d3 	.word	0x200014d3
200010c4:	200016d3 	.word	0x200016d3
200010c8:	200016d3 	.word	0x200016d3
200010cc:	200016d3 	.word	0x200016d3
200010d0:	200016d3 	.word	0x200016d3
200010d4:	200016d3 	.word	0x200016d3
200010d8:	200016d3 	.word	0x200016d3
200010dc:	200016d3 	.word	0x200016d3
200010e0:	20001453 	.word	0x20001453
200010e4:	200016d3 	.word	0x200016d3
200010e8:	200016d3 	.word	0x200016d3
200010ec:	200016d3 	.word	0x200016d3
200010f0:	200016d3 	.word	0x200016d3
200010f4:	200016d3 	.word	0x200016d3
200010f8:	200016d3 	.word	0x200016d3
200010fc:	200016d3 	.word	0x200016d3
20001100:	2000152f 	.word	0x2000152f
20001104:	200016d3 	.word	0x200016d3
20001108:	200016d3 	.word	0x200016d3
2000110c:	200016d3 	.word	0x200016d3
20001110:	200016d3 	.word	0x200016d3
20001114:	200016d3 	.word	0x200016d3
20001118:	200016d3 	.word	0x200016d3
2000111c:	200016d3 	.word	0x200016d3
20001120:	20001607 	.word	0x20001607
20001124:	200016d3 	.word	0x200016d3
20001128:	200016d3 	.word	0x200016d3
2000112c:	200016d3 	.word	0x200016d3
20001130:	200016d3 	.word	0x200016d3
20001134:	200016d3 	.word	0x200016d3
20001138:	200016d3 	.word	0x200016d3
2000113c:	200016d3 	.word	0x200016d3
20001140:	20001607 	.word	0x20001607
20001144:	200016d3 	.word	0x200016d3
20001148:	200016d3 	.word	0x200016d3
2000114c:	200016d3 	.word	0x200016d3
20001150:	200016d3 	.word	0x200016d3
20001154:	200016d3 	.word	0x200016d3
20001158:	200016d3 	.word	0x200016d3
2000115c:	200016d3 	.word	0x200016d3
20001160:	20001607 	.word	0x20001607
20001164:	200016d3 	.word	0x200016d3
20001168:	200016d3 	.word	0x200016d3
2000116c:	200016d3 	.word	0x200016d3
20001170:	200016d3 	.word	0x200016d3
20001174:	200016d3 	.word	0x200016d3
20001178:	200016d3 	.word	0x200016d3
2000117c:	200016d3 	.word	0x200016d3
20001180:	20001699 	.word	0x20001699
20001184:	200016d3 	.word	0x200016d3
20001188:	200016d3 	.word	0x200016d3
2000118c:	200016d3 	.word	0x200016d3
20001190:	200016d3 	.word	0x200016d3
20001194:	200016d3 	.word	0x200016d3
20001198:	200016d3 	.word	0x200016d3
2000119c:	200016d3 	.word	0x200016d3
200011a0:	20001699 	.word	0x20001699
200011a4:	200016d3 	.word	0x200016d3
200011a8:	200016d3 	.word	0x200016d3
200011ac:	200016d3 	.word	0x200016d3
200011b0:	200016d3 	.word	0x200016d3
200011b4:	200016d3 	.word	0x200016d3
200011b8:	200016d3 	.word	0x200016d3
200011bc:	200016d3 	.word	0x200016d3
200011c0:	200016d3 	.word	0x200016d3
200011c4:	200016d3 	.word	0x200016d3
200011c8:	200016d3 	.word	0x200016d3
200011cc:	200016d3 	.word	0x200016d3
200011d0:	200016d3 	.word	0x200016d3
200011d4:	200016d3 	.word	0x200016d3
200011d8:	200016d3 	.word	0x200016d3
200011dc:	200016d3 	.word	0x200016d3
200011e0:	200015d9 	.word	0x200015d9
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
200011e4:	687b      	ldr	r3, [r7, #4]
200011e6:	699b      	ldr	r3, [r3, #24]
200011e8:	f04f 0200 	mov.w	r2, #0
200011ec:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
200011ee:	687b      	ldr	r3, [r7, #4]
200011f0:	695b      	ldr	r3, [r3, #20]
200011f2:	687a      	ldr	r2, [r7, #4]
200011f4:	6852      	ldr	r2, [r2, #4]
200011f6:	b2d2      	uxtb	r2, r2
200011f8:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
200011fa:	687b      	ldr	r3, [r7, #4]
200011fc:	699b      	ldr	r3, [r3, #24]
200011fe:	687a      	ldr	r2, [r7, #4]
20001200:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001202:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
20001206:	687b      	ldr	r3, [r7, #4]
20001208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000120a:	2b00      	cmp	r3, #0
2000120c:	d104      	bne.n	20001218 <mss_i2c_isr+0x3c0>
            {
                this_i2c->master_tx_idx = 0u;
2000120e:	687b      	ldr	r3, [r7, #4]
20001210:	f04f 0200 	mov.w	r2, #0
20001214:	629a      	str	r2, [r3, #40]	; 0x28
20001216:	e007      	b.n	20001228 <mss_i2c_isr+0x3d0>
            }
            else if ( this_i2c->dir == READ_DIR)
20001218:	687b      	ldr	r3, [r7, #4]
2000121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000121c:	2b01      	cmp	r3, #1
2000121e:	d103      	bne.n	20001228 <mss_i2c_isr+0x3d0>
            {
                this_i2c->master_rx_idx = 0u;
20001220:	687b      	ldr	r3, [r7, #4]
20001222:	f04f 0200 	mov.w	r2, #0
20001226:	639a      	str	r2, [r3, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
20001228:	687b      	ldr	r3, [r7, #4]
2000122a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
2000122e:	2b00      	cmp	r3, #0
20001230:	d004      	beq.n	2000123c <mss_i2c_isr+0x3e4>
            {
                this_i2c->is_transaction_pending = 0u;
20001232:	687b      	ldr	r3, [r7, #4]
20001234:	f04f 0200 	mov.w	r2, #0
20001238:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
2000123c:	687b      	ldr	r3, [r7, #4]
2000123e:	7a1a      	ldrb	r2, [r3, #8]
20001240:	687b      	ldr	r3, [r7, #4]
20001242:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
20001246:	429a      	cmp	r2, r3
20001248:	f000 8267 	beq.w	2000171a <mss_i2c_isr+0x8c2>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
2000124c:	687b      	ldr	r3, [r7, #4]
2000124e:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
20001252:	687b      	ldr	r3, [r7, #4]
20001254:	721a      	strb	r2, [r3, #8]
            }
            break;
20001256:	e269      	b.n	2000172c <mss_i2c_isr+0x8d4>
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001258:	687b      	ldr	r3, [r7, #4]
2000125a:	699b      	ldr	r3, [r3, #24]
2000125c:	f04f 0201 	mov.w	r2, #1
20001260:	615a      	str	r2, [r3, #20]
            break;
20001262:	e263      	b.n	2000172c <mss_i2c_isr+0x8d4>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001264:	687b      	ldr	r3, [r7, #4]
20001266:	699b      	ldr	r3, [r3, #24]
20001268:	f04f 0201 	mov.w	r2, #1
2000126c:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
2000126e:	687b      	ldr	r3, [r7, #4]
20001270:	f04f 0202 	mov.w	r2, #2
20001274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
20001278:	687b      	ldr	r3, [r7, #4]
2000127a:	f04f 0200 	mov.w	r2, #0
2000127e:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001280:	6878      	ldr	r0, [r7, #4]
20001282:	f7ff fdd5 	bl	20000e30 <enable_slave_if_required>
            break;
20001286:	e251      	b.n	2000172c <mss_i2c_isr+0x8d4>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20001288:	687b      	ldr	r3, [r7, #4]
2000128a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2000128c:	687b      	ldr	r3, [r7, #4]
2000128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001290:	429a      	cmp	r2, r3
20001292:	d20d      	bcs.n	200012b0 <mss_i2c_isr+0x458>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
20001294:	687b      	ldr	r3, [r7, #4]
20001296:	695a      	ldr	r2, [r3, #20]
20001298:	687b      	ldr	r3, [r7, #4]
2000129a:	6a19      	ldr	r1, [r3, #32]
2000129c:	687b      	ldr	r3, [r7, #4]
2000129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200012a0:	4419      	add	r1, r3
200012a2:	7809      	ldrb	r1, [r1, #0]
200012a4:	7211      	strb	r1, [r2, #8]
200012a6:	f103 0201 	add.w	r2, r3, #1
200012aa:	687b      	ldr	r3, [r7, #4]
200012ac:	629a      	str	r2, [r3, #40]	; 0x28
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
200012ae:	e23d      	b.n	2000172c <mss_i2c_isr+0x8d4>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
200012b0:	687b      	ldr	r3, [r7, #4]
200012b2:	7a1b      	ldrb	r3, [r3, #8]
200012b4:	2b03      	cmp	r3, #3
200012b6:	d109      	bne.n	200012cc <mss_i2c_isr+0x474>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
200012b8:	687b      	ldr	r3, [r7, #4]
200012ba:	f04f 0201 	mov.w	r2, #1
200012be:	62da      	str	r2, [r3, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200012c0:	687b      	ldr	r3, [r7, #4]
200012c2:	699b      	ldr	r3, [r3, #24]
200012c4:	f04f 0201 	mov.w	r2, #1
200012c8:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
200012ca:	e22f      	b.n	2000172c <mss_i2c_isr+0x8d4>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
200012cc:	687b      	ldr	r3, [r7, #4]
200012ce:	f04f 0200 	mov.w	r2, #0
200012d2:	721a      	strb	r2, [r3, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
200012d4:	687b      	ldr	r3, [r7, #4]
200012d6:	7c1b      	ldrb	r3, [r3, #16]
200012d8:	f003 0301 	and.w	r3, r3, #1
200012dc:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
200012de:	687b      	ldr	r3, [r7, #4]
200012e0:	7b7a      	ldrb	r2, [r7, #13]
200012e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if ( hold_bus == 0u )
200012e6:	7b7b      	ldrb	r3, [r7, #13]
200012e8:	2b00      	cmp	r3, #0
200012ea:	d108      	bne.n	200012fe <mss_i2c_isr+0x4a6>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
200012ec:	687b      	ldr	r3, [r7, #4]
200012ee:	699b      	ldr	r3, [r3, #24]
200012f0:	f04f 0201 	mov.w	r2, #1
200012f4:	611a      	str	r2, [r3, #16]
                    enable_slave_if_required(this_i2c);
200012f6:	6878      	ldr	r0, [r7, #4]
200012f8:	f7ff fd9a 	bl	20000e30 <enable_slave_if_required>
200012fc:	e008      	b.n	20001310 <mss_i2c_isr+0x4b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
200012fe:	687b      	ldr	r3, [r7, #4]
20001300:	8a5b      	ldrh	r3, [r3, #18]
20001302:	b21b      	sxth	r3, r3
20001304:	4618      	mov	r0, r3
20001306:	f7ff fb87 	bl	20000a18 <NVIC_DisableIRQ>
                    clear_irq = 0u;
2000130a:	f04f 0300 	mov.w	r3, #0
2000130e:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001310:	687b      	ldr	r3, [r7, #4]
20001312:	f04f 0200 	mov.w	r2, #0
20001316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
2000131a:	e207      	b.n	2000172c <mss_i2c_isr+0x8d4>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
2000131c:	687b      	ldr	r3, [r7, #4]
2000131e:	699b      	ldr	r3, [r3, #24]
20001320:	f04f 0201 	mov.w	r2, #1
20001324:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001326:	687b      	ldr	r3, [r7, #4]
20001328:	f04f 0202 	mov.w	r2, #2
2000132c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001330:	687b      	ldr	r3, [r7, #4]
20001332:	f04f 0200 	mov.w	r2, #0
20001336:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001338:	6878      	ldr	r0, [r7, #4]
2000133a:	f7ff fd79 	bl	20000e30 <enable_slave_if_required>

            break;
2000133e:	e1f5      	b.n	2000172c <mss_i2c_isr+0x8d4>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20001340:	687b      	ldr	r3, [r7, #4]
20001342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001344:	2b01      	cmp	r3, #1
20001346:	d905      	bls.n	20001354 <mss_i2c_isr+0x4fc>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001348:	687b      	ldr	r3, [r7, #4]
2000134a:	699b      	ldr	r3, [r3, #24]
2000134c:	f04f 0201 	mov.w	r2, #1
20001350:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20001352:	e1eb      	b.n	2000172c <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
20001354:	687b      	ldr	r3, [r7, #4]
20001356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001358:	2b01      	cmp	r3, #1
2000135a:	d105      	bne.n	20001368 <mss_i2c_isr+0x510>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
2000135c:	687b      	ldr	r3, [r7, #4]
2000135e:	699b      	ldr	r3, [r3, #24]
20001360:	f04f 0200 	mov.w	r2, #0
20001364:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20001366:	e1e1      	b.n	2000172c <mss_i2c_isr+0x8d4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001368:	687b      	ldr	r3, [r7, #4]
2000136a:	699b      	ldr	r3, [r3, #24]
2000136c:	f04f 0201 	mov.w	r2, #1
20001370:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001372:	687b      	ldr	r3, [r7, #4]
20001374:	699b      	ldr	r3, [r3, #24]
20001376:	f04f 0201 	mov.w	r2, #1
2000137a:	611a      	str	r2, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
2000137c:	687b      	ldr	r3, [r7, #4]
2000137e:	f04f 0200 	mov.w	r2, #0
20001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
20001386:	687b      	ldr	r3, [r7, #4]
20001388:	f04f 0200 	mov.w	r2, #0
2000138c:	721a      	strb	r2, [r3, #8]
            }
            break;
2000138e:	e1cd      	b.n	2000172c <mss_i2c_isr+0x8d4>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001390:	687b      	ldr	r3, [r7, #4]
20001392:	699b      	ldr	r3, [r3, #24]
20001394:	f04f 0201 	mov.w	r2, #1
20001398:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
2000139a:	687b      	ldr	r3, [r7, #4]
2000139c:	f04f 0202 	mov.w	r2, #2
200013a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200013a4:	687b      	ldr	r3, [r7, #4]
200013a6:	f04f 0200 	mov.w	r2, #0
200013aa:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
200013ac:	6878      	ldr	r0, [r7, #4]
200013ae:	f7ff fd3f 	bl	20000e30 <enable_slave_if_required>
            break;
200013b2:	e1bb      	b.n	2000172c <mss_i2c_isr+0x8d4>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
200013b4:	687b      	ldr	r3, [r7, #4]
200013b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200013b8:	687b      	ldr	r3, [r7, #4]
200013ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200013bc:	441a      	add	r2, r3
200013be:	6879      	ldr	r1, [r7, #4]
200013c0:	6949      	ldr	r1, [r1, #20]
200013c2:	7a09      	ldrb	r1, [r1, #8]
200013c4:	b2c9      	uxtb	r1, r1
200013c6:	7011      	strb	r1, [r2, #0]
200013c8:	f103 0201 	add.w	r2, r3, #1
200013cc:	687b      	ldr	r3, [r7, #4]
200013ce:	639a      	str	r2, [r3, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
200013d0:	687b      	ldr	r3, [r7, #4]
200013d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200013d4:	687b      	ldr	r3, [r7, #4]
200013d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200013d8:	f103 33ff 	add.w	r3, r3, #4294967295
200013dc:	429a      	cmp	r2, r3
200013de:	f0c0 819e 	bcc.w	2000171e <mss_i2c_isr+0x8c6>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
200013e2:	687b      	ldr	r3, [r7, #4]
200013e4:	699b      	ldr	r3, [r3, #24]
200013e6:	f04f 0200 	mov.w	r2, #0
200013ea:	609a      	str	r2, [r3, #8]
            }
            break;
200013ec:	e19e      	b.n	2000172c <mss_i2c_isr+0x8d4>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
200013ee:	687b      	ldr	r3, [r7, #4]
200013f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200013f2:	687b      	ldr	r3, [r7, #4]
200013f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200013f6:	4413      	add	r3, r2
200013f8:	687a      	ldr	r2, [r7, #4]
200013fa:	6952      	ldr	r2, [r2, #20]
200013fc:	7a12      	ldrb	r2, [r2, #8]
200013fe:	b2d2      	uxtb	r2, r2
20001400:	701a      	strb	r2, [r3, #0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
20001402:	687b      	ldr	r3, [r7, #4]
20001404:	7c1b      	ldrb	r3, [r3, #16]
20001406:	f003 0301 	and.w	r3, r3, #1
2000140a:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
2000140c:	687b      	ldr	r3, [r7, #4]
2000140e:	7b7a      	ldrb	r2, [r7, #13]
20001410:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            if ( hold_bus == 0u )
20001414:	7b7b      	ldrb	r3, [r7, #13]
20001416:	2b00      	cmp	r3, #0
20001418:	d108      	bne.n	2000142c <mss_i2c_isr+0x5d4>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
2000141a:	687b      	ldr	r3, [r7, #4]
2000141c:	699b      	ldr	r3, [r3, #24]
2000141e:	f04f 0201 	mov.w	r2, #1
20001422:	611a      	str	r2, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20001424:	6878      	ldr	r0, [r7, #4]
20001426:	f7ff fd03 	bl	20000e30 <enable_slave_if_required>
2000142a:	e008      	b.n	2000143e <mss_i2c_isr+0x5e6>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
2000142c:	687b      	ldr	r3, [r7, #4]
2000142e:	8a5b      	ldrh	r3, [r3, #18]
20001430:	b21b      	sxth	r3, r3
20001432:	4618      	mov	r0, r3
20001434:	f7ff faf0 	bl	20000a18 <NVIC_DisableIRQ>
                clear_irq = 0u;
20001438:	f04f 0300 	mov.w	r3, #0
2000143c:	73bb      	strb	r3, [r7, #14]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
2000143e:	687b      	ldr	r3, [r7, #4]
20001440:	f04f 0200 	mov.w	r2, #0
20001444:	721a      	strb	r2, [r3, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
20001446:	687b      	ldr	r3, [r7, #4]
20001448:	f04f 0200 	mov.w	r2, #0
2000144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            break;
20001450:	e16c      	b.n	2000172c <mss_i2c_isr+0x8d4>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001452:	687b      	ldr	r3, [r7, #4]
20001454:	699b      	ldr	r3, [r3, #24]
20001456:	f04f 0201 	mov.w	r2, #1
2000145a:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
2000145c:	687b      	ldr	r3, [r7, #4]
2000145e:	f04f 0200 	mov.w	r2, #0
20001462:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001464:	687b      	ldr	r3, [r7, #4]
20001466:	f04f 0200 	mov.w	r2, #0
2000146a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
2000146e:	687b      	ldr	r3, [r7, #4]
20001470:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001474:	2b00      	cmp	r3, #0
20001476:	f000 8154 	beq.w	20001722 <mss_i2c_isr+0x8ca>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
2000147a:	687b      	ldr	r3, [r7, #4]
2000147c:	699b      	ldr	r3, [r3, #24]
2000147e:	f04f 0201 	mov.w	r2, #1
20001482:	615a      	str	r2, [r3, #20]
            }
            break;
20001484:	e152      	b.n	2000172c <mss_i2c_isr+0x8d4>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20001486:	687b      	ldr	r3, [r7, #4]
20001488:	f04f 0201 	mov.w	r2, #1
2000148c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20001490:	687b      	ldr	r3, [r7, #4]
20001492:	f04f 0204 	mov.w	r2, #4
20001496:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_rx_idx = 0u;
20001498:	687b      	ldr	r3, [r7, #4]
2000149a:	f04f 0200 	mov.w	r2, #0
2000149e:	659a      	str	r2, [r3, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
200014a0:	687b      	ldr	r3, [r7, #4]
200014a2:	f04f 0200 	mov.w	r2, #0
200014a6:	60da      	str	r2, [r3, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
200014a8:	687b      	ldr	r3, [r7, #4]
200014aa:	699b      	ldr	r3, [r3, #24]
200014ac:	695b      	ldr	r3, [r3, #20]
200014ae:	2b00      	cmp	r3, #0
200014b0:	d009      	beq.n	200014c6 <mss_i2c_isr+0x66e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
200014b2:	687b      	ldr	r3, [r7, #4]
200014b4:	699b      	ldr	r3, [r3, #24]
200014b6:	f04f 0200 	mov.w	r2, #0
200014ba:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
200014bc:	687b      	ldr	r3, [r7, #4]
200014be:	f04f 0201 	mov.w	r2, #1
200014c2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
200014c6:	687b      	ldr	r3, [r7, #4]
200014c8:	f04f 0201 	mov.w	r2, #1
200014cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
200014d0:	e12c      	b.n	2000172c <mss_i2c_isr+0x8d4>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
200014d2:	687b      	ldr	r3, [r7, #4]
200014d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200014d6:	2b00      	cmp	r3, #0
200014d8:	d01c      	beq.n	20001514 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
200014da:	687b      	ldr	r3, [r7, #4]
200014dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
200014de:	687b      	ldr	r3, [r7, #4]
200014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
200014e2:	429a      	cmp	r2, r3
200014e4:	d216      	bcs.n	20001514 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
200014e6:	687b      	ldr	r3, [r7, #4]
200014e8:	695b      	ldr	r3, [r3, #20]
200014ea:	7a1b      	ldrb	r3, [r3, #8]
200014ec:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
200014ee:	687b      	ldr	r3, [r7, #4]
200014f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200014f2:	687b      	ldr	r3, [r7, #4]
200014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200014f6:	441a      	add	r2, r3
200014f8:	7b39      	ldrb	r1, [r7, #12]
200014fa:	7011      	strb	r1, [r2, #0]
200014fc:	f103 0201 	add.w	r2, r3, #1
20001500:	687b      	ldr	r3, [r7, #4]
20001502:	659a      	str	r2, [r3, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20001504:	687b      	ldr	r3, [r7, #4]
20001506:	68db      	ldr	r3, [r3, #12]
20001508:	ea4f 2203 	mov.w	r2, r3, lsl #8
2000150c:	7b3b      	ldrb	r3, [r7, #12]
2000150e:	441a      	add	r2, r3
20001510:	687b      	ldr	r3, [r7, #4]
20001512:	60da      	str	r2, [r3, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20001514:	687b      	ldr	r3, [r7, #4]
20001516:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001518:	687b      	ldr	r3, [r7, #4]
2000151a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000151c:	429a      	cmp	r2, r3
2000151e:	f0c0 8102 	bcc.w	20001726 <mss_i2c_isr+0x8ce>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
20001522:	687b      	ldr	r3, [r7, #4]
20001524:	699b      	ldr	r3, [r3, #24]
20001526:	f04f 0200 	mov.w	r2, #0
2000152a:	609a      	str	r2, [r3, #8]
            }
            break;
2000152c:	e0fe      	b.n	2000172c <mss_i2c_isr+0x8d4>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
2000152e:	687b      	ldr	r3, [r7, #4]
20001530:	7a1b      	ldrb	r3, [r3, #8]
20001532:	2b04      	cmp	r3, #4
20001534:	d135      	bne.n	200015a2 <mss_i2c_isr+0x74a>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20001536:	687b      	ldr	r3, [r7, #4]
20001538:	6d9a      	ldr	r2, [r3, #88]	; 0x58
2000153a:	687b      	ldr	r3, [r7, #4]
2000153c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2000153e:	429a      	cmp	r2, r3
20001540:	d103      	bne.n	2000154a <mss_i2c_isr+0x6f2>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20001542:	687b      	ldr	r3, [r7, #4]
20001544:	68da      	ldr	r2, [r3, #12]
20001546:	687b      	ldr	r3, [r7, #4]
20001548:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
2000154a:	687b      	ldr	r3, [r7, #4]
2000154c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2000154e:	2b00      	cmp	r3, #0
20001550:	d021      	beq.n	20001596 <mss_i2c_isr+0x73e>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20001552:	687b      	ldr	r3, [r7, #4]
20001554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001556:	687a      	ldr	r2, [r7, #4]
20001558:	6d11      	ldr	r1, [r2, #80]	; 0x50
2000155a:	687a      	ldr	r2, [r7, #4]
2000155c:	6d92      	ldr	r2, [r2, #88]	; 0x58
2000155e:	b292      	uxth	r2, r2
20001560:	6878      	ldr	r0, [r7, #4]
20001562:	4798      	blx	r3
20001564:	4603      	mov	r3, r0
20001566:	73fb      	strb	r3, [r7, #15]
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20001568:	7bfb      	ldrb	r3, [r7, #15]
2000156a:	2b00      	cmp	r3, #0
2000156c:	d108      	bne.n	20001580 <mss_i2c_isr+0x728>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
2000156e:	6878      	ldr	r0, [r7, #4]
20001570:	f7ff fc5e 	bl	20000e30 <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001574:	687b      	ldr	r3, [r7, #4]
20001576:	699b      	ldr	r3, [r3, #24]
20001578:	f04f 0201 	mov.w	r2, #1
2000157c:	609a      	str	r2, [r3, #8]
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000157e:	e017      	b.n	200015b0 <mss_i2c_isr+0x758>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001580:	687b      	ldr	r3, [r7, #4]
20001582:	699b      	ldr	r3, [r3, #24]
20001584:	f04f 0200 	mov.w	r2, #0
20001588:	609a      	str	r2, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
2000158a:	687b      	ldr	r3, [r7, #4]
2000158c:	f04f 0200 	mov.w	r2, #0
20001590:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001594:	e00c      	b.n	200015b0 <mss_i2c_isr+0x758>
20001596:	687b      	ldr	r3, [r7, #4]
20001598:	699b      	ldr	r3, [r3, #24]
2000159a:	f04f 0201 	mov.w	r2, #1
2000159e:	609a      	str	r2, [r3, #8]
200015a0:	e006      	b.n	200015b0 <mss_i2c_isr+0x758>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
200015a2:	687b      	ldr	r3, [r7, #4]
200015a4:	f04f 0200 	mov.w	r2, #0
200015a8:	64da      	str	r2, [r3, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
200015aa:	6878      	ldr	r0, [r7, #4]
200015ac:	f7ff fc40 	bl	20000e30 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
200015b0:	687b      	ldr	r3, [r7, #4]
200015b2:	f04f 0200 	mov.w	r2, #0
200015b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200015ba:	687b      	ldr	r3, [r7, #4]
200015bc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
200015c0:	2b00      	cmp	r3, #0
200015c2:	d004      	beq.n	200015ce <mss_i2c_isr+0x776>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
200015c4:	687b      	ldr	r3, [r7, #4]
200015c6:	699b      	ldr	r3, [r3, #24]
200015c8:	f04f 0201 	mov.w	r2, #1
200015cc:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200015ce:	687b      	ldr	r3, [r7, #4]
200015d0:	f04f 0200 	mov.w	r2, #0
200015d4:	721a      	strb	r2, [r3, #8]
            break;
200015d6:	e0a9      	b.n	2000172c <mss_i2c_isr+0x8d4>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
200015d8:	687b      	ldr	r3, [r7, #4]
200015da:	f04f 0200 	mov.w	r2, #0
200015de:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
200015e0:	687b      	ldr	r3, [r7, #4]
200015e2:	f04f 0200 	mov.w	r2, #0
200015e6:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
200015e8:	687b      	ldr	r3, [r7, #4]
200015ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
200015ee:	b2db      	uxtb	r3, r3
200015f0:	2b01      	cmp	r3, #1
200015f2:	d104      	bne.n	200015fe <mss_i2c_isr+0x7a6>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
200015f4:	687b      	ldr	r3, [r7, #4]
200015f6:	f04f 0202 	mov.w	r2, #2
200015fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
200015fe:	6878      	ldr	r0, [r7, #4]
20001600:	f7ff fc16 	bl	20000e30 <enable_slave_if_required>

            break;
20001604:	e092      	b.n	2000172c <mss_i2c_isr+0x8d4>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20001606:	7afb      	ldrb	r3, [r7, #11]
20001608:	b2db      	uxtb	r3, r3
2000160a:	2ba8      	cmp	r3, #168	; 0xa8
2000160c:	d11b      	bne.n	20001646 <mss_i2c_isr+0x7ee>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
2000160e:	687b      	ldr	r3, [r7, #4]
20001610:	f04f 0205 	mov.w	r2, #5
20001614:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0u;
20001616:	687b      	ldr	r3, [r7, #4]
20001618:	f04f 0200 	mov.w	r2, #0
2000161c:	60da      	str	r2, [r3, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
2000161e:	687b      	ldr	r3, [r7, #4]
20001620:	f04f 0201 	mov.w	r2, #1
20001624:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
20001628:	687b      	ldr	r3, [r7, #4]
2000162a:	699b      	ldr	r3, [r3, #24]
2000162c:	695b      	ldr	r3, [r3, #20]
2000162e:	2b00      	cmp	r3, #0
20001630:	d009      	beq.n	20001646 <mss_i2c_isr+0x7ee>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001632:	687b      	ldr	r3, [r7, #4]
20001634:	699b      	ldr	r3, [r3, #24]
20001636:	f04f 0200 	mov.w	r2, #0
2000163a:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
2000163c:	687b      	ldr	r3, [r7, #4]
2000163e:	f04f 0201 	mov.w	r2, #1
20001642:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20001646:	687b      	ldr	r3, [r7, #4]
20001648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2000164a:	687b      	ldr	r3, [r7, #4]
2000164c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000164e:	429a      	cmp	r2, r3
20001650:	d305      	bcc.n	2000165e <mss_i2c_isr+0x806>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
20001652:	687b      	ldr	r3, [r7, #4]
20001654:	695b      	ldr	r3, [r3, #20]
20001656:	f04f 32ff 	mov.w	r2, #4294967295
2000165a:	721a      	strb	r2, [r3, #8]
2000165c:	e00c      	b.n	20001678 <mss_i2c_isr+0x820>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
2000165e:	687b      	ldr	r3, [r7, #4]
20001660:	695a      	ldr	r2, [r3, #20]
20001662:	687b      	ldr	r3, [r7, #4]
20001664:	6c59      	ldr	r1, [r3, #68]	; 0x44
20001666:	687b      	ldr	r3, [r7, #4]
20001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000166a:	4419      	add	r1, r3
2000166c:	7809      	ldrb	r1, [r1, #0]
2000166e:	7211      	strb	r1, [r2, #8]
20001670:	f103 0201 	add.w	r2, r3, #1
20001674:	687b      	ldr	r3, [r7, #4]
20001676:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20001678:	687b      	ldr	r3, [r7, #4]
2000167a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
2000167c:	687b      	ldr	r3, [r7, #4]
2000167e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001680:	429a      	cmp	r2, r3
20001682:	d352      	bcc.n	2000172a <mss_i2c_isr+0x8d2>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001684:	687b      	ldr	r3, [r7, #4]
20001686:	699b      	ldr	r3, [r3, #24]
20001688:	f04f 0200 	mov.w	r2, #0
2000168c:	609a      	str	r2, [r3, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
2000168e:	687b      	ldr	r3, [r7, #4]
20001690:	f04f 0200 	mov.w	r2, #0
20001694:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            break;
20001696:	e049      	b.n	2000172c <mss_i2c_isr+0x8d4>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20001698:	687b      	ldr	r3, [r7, #4]
2000169a:	f04f 0200 	mov.w	r2, #0
2000169e:	64da      	str	r2, [r3, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200016a0:	687b      	ldr	r3, [r7, #4]
200016a2:	699b      	ldr	r3, [r3, #24]
200016a4:	f04f 0201 	mov.w	r2, #1
200016a8:	609a      	str	r2, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
200016aa:	687b      	ldr	r3, [r7, #4]
200016ac:	f04f 0200 	mov.w	r2, #0
200016b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200016b4:	687b      	ldr	r3, [r7, #4]
200016b6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
200016ba:	2b00      	cmp	r3, #0
200016bc:	d004      	beq.n	200016c8 <mss_i2c_isr+0x870>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
200016be:	687b      	ldr	r3, [r7, #4]
200016c0:	699b      	ldr	r3, [r3, #24]
200016c2:	f04f 0201 	mov.w	r2, #1
200016c6:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200016c8:	687b      	ldr	r3, [r7, #4]
200016ca:	f04f 0200 	mov.w	r2, #0
200016ce:	721a      	strb	r2, [r3, #8]
            break;
200016d0:	e02c      	b.n	2000172c <mss_i2c_isr+0x8d4>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
200016d2:	687b      	ldr	r3, [r7, #4]
200016d4:	699b      	ldr	r3, [r3, #24]
200016d6:	f04f 0200 	mov.w	r2, #0
200016da:	615a      	str	r2, [r3, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200016dc:	687b      	ldr	r3, [r7, #4]
200016de:	f04f 0200 	mov.w	r2, #0
200016e2:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
200016e4:	687b      	ldr	r3, [r7, #4]
200016e6:	f04f 0200 	mov.w	r2, #0
200016ea:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
200016ec:	687b      	ldr	r3, [r7, #4]
200016ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
200016f2:	b2db      	uxtb	r3, r3
200016f4:	2b01      	cmp	r3, #1
200016f6:	d104      	bne.n	20001702 <mss_i2c_isr+0x8aa>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
200016f8:	687b      	ldr	r3, [r7, #4]
200016fa:	f04f 0202 	mov.w	r2, #2
200016fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001702:	687b      	ldr	r3, [r7, #4]
20001704:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001708:	b2db      	uxtb	r3, r3
2000170a:	2b01      	cmp	r3, #1
2000170c:	d10e      	bne.n	2000172c <mss_i2c_isr+0x8d4>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
2000170e:	687b      	ldr	r3, [r7, #4]
20001710:	f04f 0202 	mov.w	r2, #2
20001714:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
20001718:	e008      	b.n	2000172c <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
2000171a:	bf00      	nop
2000171c:	e006      	b.n	2000172c <mss_i2c_isr+0x8d4>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            break;
2000171e:	bf00      	nop
20001720:	e004      	b.n	2000172c <mss_i2c_isr+0x8d4>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
            }
            break;
20001722:	bf00      	nop
20001724:	e002      	b.n	2000172c <mss_i2c_isr+0x8d4>
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
            }
            break;
20001726:	bf00      	nop
20001728:	e000      	b.n	2000172c <mss_i2c_isr+0x8d4>
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
2000172a:	bf00      	nop


            break;
    }
    
    if ( clear_irq )
2000172c:	7bbb      	ldrb	r3, [r7, #14]
2000172e:	2b00      	cmp	r3, #0
20001730:	d004      	beq.n	2000173c <mss_i2c_isr+0x8e4>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001732:	687b      	ldr	r3, [r7, #4]
20001734:	699b      	ldr	r3, [r3, #24]
20001736:	f04f 0200 	mov.w	r2, #0
2000173a:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
2000173c:	687b      	ldr	r3, [r7, #4]
2000173e:	695b      	ldr	r3, [r3, #20]
20001740:	791b      	ldrb	r3, [r3, #4]
20001742:	72fb      	strb	r3, [r7, #11]
}
20001744:	f107 0710 	add.w	r7, r7, #16
20001748:	46bd      	mov	sp, r7
2000174a:	bd80      	pop	{r7, pc}

2000174c <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
2000174c:	b580      	push	{r7, lr}
2000174e:	b082      	sub	sp, #8
20001750:	af00      	add	r7, sp, #0
    uint32_t primask;
    primask = __get_PRIMASK();
20001752:	f000 f94d 	bl	200019f0 <__get_PRIMASK>
20001756:	4603      	mov	r3, r0
20001758:	607b      	str	r3, [r7, #4]
    __set_PRIMASK(1u);
2000175a:	f04f 0001 	mov.w	r0, #1
2000175e:	f000 f957 	bl	20001a10 <__set_PRIMASK>
    return primask;
20001762:	687b      	ldr	r3, [r7, #4]
}
20001764:	4618      	mov	r0, r3
20001766:	f107 0708 	add.w	r7, r7, #8
2000176a:	46bd      	mov	sp, r7
2000176c:	bd80      	pop	{r7, pc}
2000176e:	bf00      	nop

20001770 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
20001770:	b580      	push	{r7, lr}
20001772:	b082      	sub	sp, #8
20001774:	af00      	add	r7, sp, #0
20001776:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( primask );
20001778:	6878      	ldr	r0, [r7, #4]
2000177a:	f000 f949 	bl	20001a10 <__set_PRIMASK>
}
2000177e:	f107 0708 	add.w	r7, r7, #8
20001782:	46bd      	mov	sp, r7
20001784:	bd80      	pop	{r7, pc}
20001786:	bf00      	nop

20001788 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
20001788:	4668      	mov	r0, sp
2000178a:	f020 0107 	bic.w	r1, r0, #7
2000178e:	468d      	mov	sp, r1
20001790:	b589      	push	{r0, r3, r7, lr}
20001792:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c0 );
20001794:	f641 4064 	movw	r0, #7268	; 0x1c64
20001798:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000179c:	f7ff fb5c 	bl	20000e58 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
200017a0:	f04f 000e 	mov.w	r0, #14
200017a4:	f7ff f956 	bl	20000a54 <NVIC_ClearPendingIRQ>
}
200017a8:	46bd      	mov	sp, r7
200017aa:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200017ae:	4685      	mov	sp, r0
200017b0:	4770      	bx	lr
200017b2:	bf00      	nop

200017b4 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
200017b4:	4668      	mov	r0, sp
200017b6:	f020 0107 	bic.w	r1, r0, #7
200017ba:	468d      	mov	sp, r1
200017bc:	b589      	push	{r0, r3, r7, lr}
200017be:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c1 );
200017c0:	f641 40d8 	movw	r0, #7384	; 0x1cd8
200017c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200017c8:	f7ff fb46 	bl	20000e58 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
200017cc:	f04f 0011 	mov.w	r0, #17
200017d0:	f7ff f940 	bl	20000a54 <NVIC_ClearPendingIRQ>
}
200017d4:	46bd      	mov	sp, r7
200017d6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200017da:	4685      	mov	sp, r0
200017dc:	4770      	bx	lr
200017de:	bf00      	nop

200017e0 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200017e0:	b480      	push	{r7}
200017e2:	b083      	sub	sp, #12
200017e4:	af00      	add	r7, sp, #0
200017e6:	4603      	mov	r3, r0
200017e8:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200017ea:	f24e 1300 	movw	r3, #57600	; 0xe100
200017ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
200017f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200017f6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200017fa:	88f9      	ldrh	r1, [r7, #6]
200017fc:	f001 011f 	and.w	r1, r1, #31
20001800:	f04f 0001 	mov.w	r0, #1
20001804:	fa00 f101 	lsl.w	r1, r0, r1
20001808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000180c:	f107 070c 	add.w	r7, r7, #12
20001810:	46bd      	mov	sp, r7
20001812:	bc80      	pop	{r7}
20001814:	4770      	bx	lr
20001816:	bf00      	nop

20001818 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001818:	b480      	push	{r7}
2000181a:	b083      	sub	sp, #12
2000181c:	af00      	add	r7, sp, #0
2000181e:	4603      	mov	r3, r0
20001820:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001822:	f24e 1300 	movw	r3, #57600	; 0xe100
20001826:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000182a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000182e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001832:	88f9      	ldrh	r1, [r7, #6]
20001834:	f001 011f 	and.w	r1, r1, #31
20001838:	f04f 0001 	mov.w	r0, #1
2000183c:	fa00 f101 	lsl.w	r1, r0, r1
20001840:	f102 0260 	add.w	r2, r2, #96	; 0x60
20001844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001848:	f107 070c 	add.w	r7, r7, #12
2000184c:	46bd      	mov	sp, r7
2000184e:	bc80      	pop	{r7}
20001850:	4770      	bx	lr
20001852:	bf00      	nop

20001854 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
20001854:	b580      	push	{r7, lr}
20001856:	b082      	sub	sp, #8
20001858:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
2000185a:	f242 0300 	movw	r3, #8192	; 0x2000
2000185e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001862:	f242 0200 	movw	r2, #8192	; 0x2000
20001866:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000186a:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000186c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20001870:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001872:	f04f 0300 	mov.w	r3, #0
20001876:	607b      	str	r3, [r7, #4]
20001878:	e00e      	b.n	20001898 <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
2000187a:	687a      	ldr	r2, [r7, #4]
2000187c:	f641 33f0 	movw	r3, #7152	; 0x1bf0
20001880:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001884:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
20001888:	b21b      	sxth	r3, r3
2000188a:	4618      	mov	r0, r3
2000188c:	f7ff ffc4 	bl	20001818 <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001890:	687b      	ldr	r3, [r7, #4]
20001892:	f103 0301 	add.w	r3, r3, #1
20001896:	607b      	str	r3, [r7, #4]
20001898:	687b      	ldr	r3, [r7, #4]
2000189a:	2b1f      	cmp	r3, #31
2000189c:	d9ed      	bls.n	2000187a <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
2000189e:	f242 0300 	movw	r3, #8192	; 0x2000
200018a2:	f2ce 0304 	movt	r3, #57348	; 0xe004
200018a6:	f242 0200 	movw	r2, #8192	; 0x2000
200018aa:	f2ce 0204 	movt	r2, #57348	; 0xe004
200018ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
200018b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
200018b4:	631a      	str	r2, [r3, #48]	; 0x30
}
200018b6:	f107 0708 	add.w	r7, r7, #8
200018ba:	46bd      	mov	sp, r7
200018bc:	bd80      	pop	{r7, pc}
200018be:	bf00      	nop

200018c0 <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
200018c0:	b480      	push	{r7}
200018c2:	b085      	sub	sp, #20
200018c4:	af00      	add	r7, sp, #0
200018c6:	4603      	mov	r3, r0
200018c8:	6039      	str	r1, [r7, #0]
200018ca:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
200018cc:	79fb      	ldrb	r3, [r7, #7]
200018ce:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200018d0:	68fb      	ldr	r3, [r7, #12]
200018d2:	2b1f      	cmp	r3, #31
200018d4:	d900      	bls.n	200018d8 <MSS_GPIO_config+0x18>
200018d6:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
200018d8:	68fb      	ldr	r3, [r7, #12]
200018da:	2b1f      	cmp	r3, #31
200018dc:	d808      	bhi.n	200018f0 <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
200018de:	68fa      	ldr	r2, [r7, #12]
200018e0:	f641 3370 	movw	r3, #7024	; 0x1b70
200018e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200018e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200018ec:	683a      	ldr	r2, [r7, #0]
200018ee:	601a      	str	r2, [r3, #0]
    }
}
200018f0:	f107 0714 	add.w	r7, r7, #20
200018f4:	46bd      	mov	sp, r7
200018f6:	bc80      	pop	{r7}
200018f8:	4770      	bx	lr
200018fa:	bf00      	nop

200018fc <MSS_GPIO_set_output>:
void MSS_GPIO_set_output
(
    mss_gpio_id_t       port_id,
    uint8_t             value
)
{
200018fc:	b480      	push	{r7}
200018fe:	b085      	sub	sp, #20
20001900:	af00      	add	r7, sp, #0
20001902:	4602      	mov	r2, r0
20001904:	460b      	mov	r3, r1
20001906:	71fa      	strb	r2, [r7, #7]
20001908:	71bb      	strb	r3, [r7, #6]
    uint32_t gpio_idx = (uint32_t)port_id;
2000190a:	79fb      	ldrb	r3, [r7, #7]
2000190c:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
2000190e:	68fb      	ldr	r3, [r7, #12]
20001910:	2b1f      	cmp	r3, #31
20001912:	d900      	bls.n	20001916 <MSS_GPIO_set_output+0x1a>
20001914:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20001916:	68fb      	ldr	r3, [r7, #12]
20001918:	2b1f      	cmp	r3, #31
2000191a:	d809      	bhi.n	20001930 <MSS_GPIO_set_output+0x34>
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
2000191c:	f240 0300 	movw	r3, #0
20001920:	f2c4 2326 	movt	r3, #16934	; 0x4226
20001924:	68fa      	ldr	r2, [r7, #12]
20001926:	79b9      	ldrb	r1, [r7, #6]
20001928:	f502 6288 	add.w	r2, r2, #1088	; 0x440
2000192c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
20001930:	f107 0714 	add.w	r7, r7, #20
20001934:	46bd      	mov	sp, r7
20001936:	bc80      	pop	{r7}
20001938:	4770      	bx	lr
2000193a:	bf00      	nop

2000193c <MSS_GPIO_enable_irq>:
 */
void MSS_GPIO_enable_irq
(
    mss_gpio_id_t port_id
)
{
2000193c:	b580      	push	{r7, lr}
2000193e:	b084      	sub	sp, #16
20001940:	af00      	add	r7, sp, #0
20001942:	4603      	mov	r3, r0
20001944:	71fb      	strb	r3, [r7, #7]
    uint32_t cfg_value;
    uint32_t gpio_idx = (uint32_t)port_id;
20001946:	79fb      	ldrb	r3, [r7, #7]
20001948:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
2000194a:	68fb      	ldr	r3, [r7, #12]
2000194c:	2b1f      	cmp	r3, #31
2000194e:	d900      	bls.n	20001952 <MSS_GPIO_enable_irq+0x16>
20001950:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20001952:	68fb      	ldr	r3, [r7, #12]
20001954:	2b1f      	cmp	r3, #31
20001956:	d81e      	bhi.n	20001996 <MSS_GPIO_enable_irq+0x5a>
    {
        cfg_value = *(g_config_reg_lut[gpio_idx]);
20001958:	68fa      	ldr	r2, [r7, #12]
2000195a:	f641 3370 	movw	r3, #7024	; 0x1b70
2000195e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001966:	681b      	ldr	r3, [r3, #0]
20001968:	60bb      	str	r3, [r7, #8]
        *(g_config_reg_lut[gpio_idx]) = (cfg_value | GPIO_INT_ENABLE_MASK);
2000196a:	68fa      	ldr	r2, [r7, #12]
2000196c:	f641 3370 	movw	r3, #7024	; 0x1b70
20001970:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001978:	68ba      	ldr	r2, [r7, #8]
2000197a:	f042 0208 	orr.w	r2, r2, #8
2000197e:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ( g_gpio_irqn_lut[gpio_idx] );
20001980:	68fa      	ldr	r2, [r7, #12]
20001982:	f641 33f0 	movw	r3, #7152	; 0x1bf0
20001986:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000198a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
2000198e:	b21b      	sxth	r3, r3
20001990:	4618      	mov	r0, r3
20001992:	f7ff ff25 	bl	200017e0 <NVIC_EnableIRQ>
    }
}
20001996:	f107 0710 	add.w	r7, r7, #16
2000199a:	46bd      	mov	sp, r7
2000199c:	bd80      	pop	{r7, pc}
2000199e:	bf00      	nop

200019a0 <MSS_GPIO_clear_irq>:
 */
void MSS_GPIO_clear_irq
(
    mss_gpio_id_t port_id
)
{
200019a0:	b580      	push	{r7, lr}
200019a2:	b084      	sub	sp, #16
200019a4:	af00      	add	r7, sp, #0
200019a6:	4603      	mov	r3, r0
200019a8:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
200019aa:	79fb      	ldrb	r3, [r7, #7]
200019ac:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200019ae:	68fb      	ldr	r3, [r7, #12]
200019b0:	2b1f      	cmp	r3, #31
200019b2:	d900      	bls.n	200019b6 <MSS_GPIO_clear_irq+0x16>
200019b4:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
200019b6:	68fb      	ldr	r3, [r7, #12]
200019b8:	2b1f      	cmp	r3, #31
200019ba:	d815      	bhi.n	200019e8 <MSS_GPIO_clear_irq+0x48>
    {
        GPIO->GPIO_IRQ = ((uint32_t)1) << gpio_idx;
200019bc:	f243 0300 	movw	r3, #12288	; 0x3000
200019c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
200019c4:	68fa      	ldr	r2, [r7, #12]
200019c6:	f04f 0101 	mov.w	r1, #1
200019ca:	fa01 f202 	lsl.w	r2, r1, r2
200019ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[gpio_idx] );
200019d2:	68fa      	ldr	r2, [r7, #12]
200019d4:	f641 33f0 	movw	r3, #7152	; 0x1bf0
200019d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200019dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200019e0:	b21b      	sxth	r3, r3
200019e2:	4618      	mov	r0, r3
200019e4:	f7ff ff18 	bl	20001818 <NVIC_ClearPendingIRQ>
    }
}
200019e8:	f107 0710 	add.w	r7, r7, #16
200019ec:	46bd      	mov	sp, r7
200019ee:	bd80      	pop	{r7, pc}

200019f0 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
200019f0:	b480      	push	{r7}
200019f2:	b083      	sub	sp, #12
200019f4:	af00      	add	r7, sp, #0
  uint32_t result=0;
200019f6:	f04f 0300 	mov.w	r3, #0
200019fa:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200019fc:	f3ef 8310 	mrs	r3, PRIMASK
20001a00:	607b      	str	r3, [r7, #4]
  return(result);
20001a02:	687b      	ldr	r3, [r7, #4]
}
20001a04:	4618      	mov	r0, r3
20001a06:	f107 070c 	add.w	r7, r7, #12
20001a0a:	46bd      	mov	sp, r7
20001a0c:	bc80      	pop	{r7}
20001a0e:	4770      	bx	lr

20001a10 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
20001a10:	b480      	push	{r7}
20001a12:	b083      	sub	sp, #12
20001a14:	af00      	add	r7, sp, #0
20001a16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
20001a18:	687b      	ldr	r3, [r7, #4]
20001a1a:	f383 8810 	msr	PRIMASK, r3
}
20001a1e:	f107 070c 	add.w	r7, r7, #12
20001a22:	46bd      	mov	sp, r7
20001a24:	bc80      	pop	{r7}
20001a26:	4770      	bx	lr

20001a28 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20001a28:	b480      	push	{r7}
20001a2a:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20001a2c:	46bd      	mov	sp, r7
20001a2e:	bc80      	pop	{r7}
20001a30:	4770      	bx	lr
20001a32:	bf00      	nop

20001a34 <__libc_init_array>:
20001a34:	b570      	push	{r4, r5, r6, lr}
20001a36:	f641 4648 	movw	r6, #7240	; 0x1c48
20001a3a:	f641 4548 	movw	r5, #7240	; 0x1c48
20001a3e:	f2c2 0600 	movt	r6, #8192	; 0x2000
20001a42:	f2c2 0500 	movt	r5, #8192	; 0x2000
20001a46:	1b76      	subs	r6, r6, r5
20001a48:	10b6      	asrs	r6, r6, #2
20001a4a:	d006      	beq.n	20001a5a <__libc_init_array+0x26>
20001a4c:	2400      	movs	r4, #0
20001a4e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20001a52:	3401      	adds	r4, #1
20001a54:	4798      	blx	r3
20001a56:	42a6      	cmp	r6, r4
20001a58:	d8f9      	bhi.n	20001a4e <__libc_init_array+0x1a>
20001a5a:	f641 4548 	movw	r5, #7240	; 0x1c48
20001a5e:	f641 464c 	movw	r6, #7244	; 0x1c4c
20001a62:	f2c2 0500 	movt	r5, #8192	; 0x2000
20001a66:	f2c2 0600 	movt	r6, #8192	; 0x2000
20001a6a:	1b76      	subs	r6, r6, r5
20001a6c:	f000 f8e0 	bl	20001c30 <_init>
20001a70:	10b6      	asrs	r6, r6, #2
20001a72:	d006      	beq.n	20001a82 <__libc_init_array+0x4e>
20001a74:	2400      	movs	r4, #0
20001a76:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20001a7a:	3401      	adds	r4, #1
20001a7c:	4798      	blx	r3
20001a7e:	42a6      	cmp	r6, r4
20001a80:	d8f9      	bhi.n	20001a76 <__libc_init_array+0x42>
20001a82:	bd70      	pop	{r4, r5, r6, pc}

20001a84 <memset>:
20001a84:	2a03      	cmp	r2, #3
20001a86:	b2c9      	uxtb	r1, r1
20001a88:	b430      	push	{r4, r5}
20001a8a:	d807      	bhi.n	20001a9c <memset+0x18>
20001a8c:	b122      	cbz	r2, 20001a98 <memset+0x14>
20001a8e:	2300      	movs	r3, #0
20001a90:	54c1      	strb	r1, [r0, r3]
20001a92:	3301      	adds	r3, #1
20001a94:	4293      	cmp	r3, r2
20001a96:	d1fb      	bne.n	20001a90 <memset+0xc>
20001a98:	bc30      	pop	{r4, r5}
20001a9a:	4770      	bx	lr
20001a9c:	eb00 0c02 	add.w	ip, r0, r2
20001aa0:	4603      	mov	r3, r0
20001aa2:	e001      	b.n	20001aa8 <memset+0x24>
20001aa4:	f803 1c01 	strb.w	r1, [r3, #-1]
20001aa8:	f003 0403 	and.w	r4, r3, #3
20001aac:	461a      	mov	r2, r3
20001aae:	3301      	adds	r3, #1
20001ab0:	2c00      	cmp	r4, #0
20001ab2:	d1f7      	bne.n	20001aa4 <memset+0x20>
20001ab4:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20001ab8:	ebc2 040c 	rsb	r4, r2, ip
20001abc:	fb03 f301 	mul.w	r3, r3, r1
20001ac0:	e01f      	b.n	20001b02 <memset+0x7e>
20001ac2:	f842 3c40 	str.w	r3, [r2, #-64]
20001ac6:	f842 3c3c 	str.w	r3, [r2, #-60]
20001aca:	f842 3c38 	str.w	r3, [r2, #-56]
20001ace:	f842 3c34 	str.w	r3, [r2, #-52]
20001ad2:	f842 3c30 	str.w	r3, [r2, #-48]
20001ad6:	f842 3c2c 	str.w	r3, [r2, #-44]
20001ada:	f842 3c28 	str.w	r3, [r2, #-40]
20001ade:	f842 3c24 	str.w	r3, [r2, #-36]
20001ae2:	f842 3c20 	str.w	r3, [r2, #-32]
20001ae6:	f842 3c1c 	str.w	r3, [r2, #-28]
20001aea:	f842 3c18 	str.w	r3, [r2, #-24]
20001aee:	f842 3c14 	str.w	r3, [r2, #-20]
20001af2:	f842 3c10 	str.w	r3, [r2, #-16]
20001af6:	f842 3c0c 	str.w	r3, [r2, #-12]
20001afa:	f842 3c08 	str.w	r3, [r2, #-8]
20001afe:	f842 3c04 	str.w	r3, [r2, #-4]
20001b02:	4615      	mov	r5, r2
20001b04:	3240      	adds	r2, #64	; 0x40
20001b06:	2c3f      	cmp	r4, #63	; 0x3f
20001b08:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20001b0c:	dcd9      	bgt.n	20001ac2 <memset+0x3e>
20001b0e:	462a      	mov	r2, r5
20001b10:	ebc5 040c 	rsb	r4, r5, ip
20001b14:	e007      	b.n	20001b26 <memset+0xa2>
20001b16:	f842 3c10 	str.w	r3, [r2, #-16]
20001b1a:	f842 3c0c 	str.w	r3, [r2, #-12]
20001b1e:	f842 3c08 	str.w	r3, [r2, #-8]
20001b22:	f842 3c04 	str.w	r3, [r2, #-4]
20001b26:	4615      	mov	r5, r2
20001b28:	3210      	adds	r2, #16
20001b2a:	2c0f      	cmp	r4, #15
20001b2c:	f1a4 0410 	sub.w	r4, r4, #16
20001b30:	dcf1      	bgt.n	20001b16 <memset+0x92>
20001b32:	462a      	mov	r2, r5
20001b34:	ebc5 050c 	rsb	r5, r5, ip
20001b38:	e001      	b.n	20001b3e <memset+0xba>
20001b3a:	f842 3c04 	str.w	r3, [r2, #-4]
20001b3e:	4614      	mov	r4, r2
20001b40:	3204      	adds	r2, #4
20001b42:	2d03      	cmp	r5, #3
20001b44:	f1a5 0504 	sub.w	r5, r5, #4
20001b48:	dcf7      	bgt.n	20001b3a <memset+0xb6>
20001b4a:	e001      	b.n	20001b50 <memset+0xcc>
20001b4c:	f804 1b01 	strb.w	r1, [r4], #1
20001b50:	4564      	cmp	r4, ip
20001b52:	d3fb      	bcc.n	20001b4c <memset+0xc8>
20001b54:	e7a0      	b.n	20001a98 <memset+0x14>
20001b56:	bf00      	nop

20001b58 <PN532_ACK_FRAME>:
20001b58:	0001 ff00 ff00 0000                         ........

20001b60 <PN532_NACK_FRAME>:
20001b60:	0001 ff00 00ff 0000                         ........

20001b68 <NFC_ACK_LENGTH>:
20001b68:	0007 0000                                   ....

20001b6c <C.27.4035>:
20001b6c:	1401 0001                                   ....

20001b70 <g_config_reg_lut>:
20001b70:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
20001b80:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
20001b90:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
20001ba0:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20001bb0:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20001bc0:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20001bd0:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20001be0:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

20001bf0 <g_gpio_irqn_lut>:
20001bf0:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
20001c00:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
20001c10:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
20001c20:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

20001c30 <_init>:
20001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001c32:	bf00      	nop
20001c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001c36:	bc08      	pop	{r3}
20001c38:	469e      	mov	lr, r3
20001c3a:	4770      	bx	lr

20001c3c <_fini>:
20001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20001c3e:	bf00      	nop
20001c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
20001c42:	bc08      	pop	{r3}
20001c44:	469e      	mov	lr, r3
20001c46:	4770      	bx	lr

20001c48 <__frame_dummy_init_array_entry>:
20001c48:	0485 2000                                   ... 

20001c4c <__do_global_dtors_aux_fini_array_entry>:
20001c4c:	0471 2000                                   q.. 
