
lockNET_SF_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025dc  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  200025dc  200025dc  0000a5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000314  200025e4  200025e4  0000a5e4  2**2
                  ALLOC
  3 .stack        00003000  200028f8  200028f8  0000a5e4  2**0
                  ALLOC
  4 .comment      0000022f  00000000  00000000  0000a5e4  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000658  00000000  00000000  0000a813  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f42  00000000  00000000  0000ae6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000075dc  00000000  00000000  0000bdad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001013  00000000  00000000  00013389  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000037be  00000000  00000000  0001439c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001428  00000000  00000000  00017b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002c0b  00000000  00000000  00018f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000211f  00000000  00000000  0001bb8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00049207  00000000  00000000  0001dcae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  00066eb5  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000608  00000000  00000000  00066eda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	2000032f 	.word	0x2000032f
2000006c:	20000331 	.word	0x20000331
20000070:	200013e9 	.word	0x200013e9
20000074:	20001415 	.word	0x20001415
20000078:	20001dd5 	.word	0x20001dd5
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	20001e01 	.word	0x20001e01
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000831 	.word	0x20000831
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>

2000032e <UART0_IRQHandler>:
2000032e:	e7fe      	b.n	2000032e <UART0_IRQHandler>

20000330 <UART1_IRQHandler>:
20000330:	e7fe      	b.n	20000330 <UART1_IRQHandler>
20000332:	e7fe      	b.n	20000332 <UART1_IRQHandler+0x2>
20000334:	e7fe      	b.n	20000334 <UART1_IRQHandler+0x4>
20000336:	e7fe      	b.n	20000336 <UART1_IRQHandler+0x6>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>
20000350:	e7fe      	b.n	20000350 <GPIO0_IRQHandler+0x2>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	20001f61 	.word	0x20001f61
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	200025dc 	.word	0x200025dc
20000450:	200025dc 	.word	0x200025dc
20000454:	200025dc 	.word	0x200025dc
20000458:	200025e4 	.word	0x200025e4
2000045c:	00000000 	.word	0x00000000
20000460:	200025e4 	.word	0x200025e4
20000464:	200028f8 	.word	0x200028f8
20000468:	200023d1 	.word	0x200023d1
2000046c:	20000885 	.word	0x20000885

20000470 <__do_global_dtors_aux>:
20000470:	f242 53e4 	movw	r3, #9700	; 0x25e4
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f242 50dc 	movw	r0, #9692	; 0x25dc
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <LORA_init>:
	tx_header_flags |= set;
}

// END RHGenericDriver code

uint8_t LORA_init(void){
200004a0:	b580      	push	{r7, lr}
200004a2:	b084      	sub	sp, #16
200004a4:	af02      	add	r7, sp, #8
	MSS_SPI_init(&g_mss_spi1);
200004a6:	f242 7004 	movw	r0, #9988	; 0x2704
200004aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004ae:	f000 fa61 	bl	20000974 <MSS_SPI_init>
	MSS_SPI_configure_master_mode
200004b2:	f242 43f4 	movw	r3, #9460	; 0x24f4
200004b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200004ba:	781b      	ldrb	r3, [r3, #0]
200004bc:	9300      	str	r3, [sp, #0]
200004be:	f242 7004 	movw	r0, #9988	; 0x2704
200004c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004c6:	f04f 0100 	mov.w	r1, #0
200004ca:	f04f 0200 	mov.w	r2, #0
200004ce:	f04f 0307 	mov.w	r3, #7
200004d2:	f000 fb99 	bl	20000c08 <MSS_SPI_configure_master_mode>
		MSS_SPI_PCLK_DIV_256,
		frame_size
	);

	//MSS_GPIO_config( MSS_GPIO_8, MSS_GPIO_OUTPUT_MODE);
	MSS_GPIO_config( MSS_GPIO_9, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE );
200004d6:	f04f 0009 	mov.w	r0, #9
200004da:	f04f 0142 	mov.w	r1, #66	; 0x42
200004de:	f001 fcf9 	bl	20001ed4 <MSS_GPIO_config>
	//MSS_GPIO_config( MSS_GPIO_10, MSS_GPIO_INOUT_MODE);


	//MSS_GPIO_drive_inout(MSS_GPIO_10, MSS_GPIO_HIGH_Z);
	int i;
	LORA_write(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
200004e2:	f04f 0001 	mov.w	r0, #1
200004e6:	f04f 0180 	mov.w	r1, #128	; 0x80
200004ea:	f000 f96f 	bl	200007cc <LORA_write>
//	    delay(10); // Wait for sleep mode to take over from say, CAD
	for (i=0;i<100000;i++);
200004ee:	f04f 0300 	mov.w	r3, #0
200004f2:	603b      	str	r3, [r7, #0]
200004f4:	e003      	b.n	200004fe <LORA_init+0x5e>
200004f6:	683b      	ldr	r3, [r7, #0]
200004f8:	f103 0301 	add.w	r3, r3, #1
200004fc:	603b      	str	r3, [r7, #0]
200004fe:	683a      	ldr	r2, [r7, #0]
20000500:	f248 639f 	movw	r3, #34463	; 0x869f
20000504:	f2c0 0301 	movt	r3, #1
20000508:	429a      	cmp	r2, r3
2000050a:	ddf4      	ble.n	200004f6 <LORA_init+0x56>

	LORA_read(RH_RF95_REG_06_FRF_MSB);
2000050c:	f04f 0006 	mov.w	r0, #6
20000510:	f000 f934 	bl	2000077c <LORA_read>
	uint8_t read_result = LORA_read(RH_RF95_REG_01_OP_MODE);
20000514:	f04f 0001 	mov.w	r0, #1
20000518:	f000 f930 	bl	2000077c <LORA_read>
2000051c:	4603      	mov	r3, r0
2000051e:	71bb      	strb	r3, [r7, #6]
	uint8_t comp = RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE;
20000520:	f06f 037f 	mvn.w	r3, #127	; 0x7f
20000524:	71fb      	strb	r3, [r7, #7]
	    // Check we are in sleep mode, with LORA set
	if (read_result != comp)
20000526:	79ba      	ldrb	r2, [r7, #6]
20000528:	79fb      	ldrb	r3, [r7, #7]
2000052a:	429a      	cmp	r2, r3
2000052c:	d002      	beq.n	20000534 <LORA_init+0x94>
	{
		//	Serial.println(spiRead(RH_RF95_REG_01_OP_MODE), HEX);
		return 1; // No device present?
2000052e:	f04f 0301 	mov.w	r3, #1
20000532:	e024      	b.n	2000057e <LORA_init+0xde>
	}

	// Sets up FIFO so transmit data starts at 0, receive starts at 128
	LORA_write(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
20000534:	f04f 000e 	mov.w	r0, #14
20000538:	f04f 0100 	mov.w	r1, #0
2000053c:	f000 f946 	bl	200007cc <LORA_write>
	LORA_write(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 128);
20000540:	f04f 000f 	mov.w	r0, #15
20000544:	f04f 0180 	mov.w	r1, #128	; 0x80
20000548:	f000 f940 	bl	200007cc <LORA_write>

	LORA_set_mode_idle();
2000054c:	f000 f820 	bl	20000590 <LORA_set_mode_idle>

	LORA_set_modem_config(modem_default); // Radio default
20000550:	f242 40f8 	movw	r0, #9464	; 0x24f8
20000554:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000558:	f000 f832 	bl	200005c0 <LORA_set_modem_config>

	LORA_set_preamble_length(8);
2000055c:	f04f 0008 	mov.w	r0, #8
20000560:	f000 f850 	bl	20000604 <LORA_set_preamble_length>

	LORA_set_frequency(915.0);
20000564:	a108      	add	r1, pc, #32	; (adr r1, 20000588 <LORA_init+0xe8>)
20000566:	e9d1 0100 	ldrd	r0, r1, [r1]
2000056a:	f000 f865 	bl	20000638 <LORA_set_frequency>

	// Lowish power
	LORA_set_tx_power(13, 0);
2000056e:	f04f 000d 	mov.w	r0, #13
20000572:	f04f 0100 	mov.w	r1, #0
20000576:	f000 f8a3 	bl	200006c0 <LORA_set_tx_power>

	return 0;
2000057a:	f04f 0300 	mov.w	r3, #0
}
2000057e:	4618      	mov	r0, r3
20000580:	f107 0708 	add.w	r7, r7, #8
20000584:	46bd      	mov	sp, r7
20000586:	bd80      	pop	{r7, pc}
20000588:	00000000 	.word	0x00000000
2000058c:	408c9800 	.word	0x408c9800

20000590 <LORA_set_mode_idle>:

void LORA_set_mode_idle(void){
20000590:	b580      	push	{r7, lr}
20000592:	af00      	add	r7, sp, #0
	if (mode != LORA_MODE_IDLE){
20000594:	f242 53ef 	movw	r3, #9711	; 0x25ef
20000598:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000059c:	781b      	ldrb	r3, [r3, #0]
2000059e:	2b00      	cmp	r3, #0
200005a0:	d00c      	beq.n	200005bc <LORA_set_mode_idle+0x2c>
		LORA_write(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
200005a2:	f04f 0001 	mov.w	r0, #1
200005a6:	f04f 0101 	mov.w	r1, #1
200005aa:	f000 f90f 	bl	200007cc <LORA_write>
		mode = LORA_MODE_IDLE;
200005ae:	f242 53ef 	movw	r3, #9711	; 0x25ef
200005b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005b6:	f04f 0200 	mov.w	r2, #0
200005ba:	701a      	strb	r2, [r3, #0]
	}
}
200005bc:	bd80      	pop	{r7, pc}
200005be:	bf00      	nop

200005c0 <LORA_set_modem_config>:
		LORA_write(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
		mode = LORA_MODE_TX;
    }
}

void LORA_set_modem_config(uint8_t *config){
200005c0:	b580      	push	{r7, lr}
200005c2:	b082      	sub	sp, #8
200005c4:	af00      	add	r7, sp, #0
200005c6:	6078      	str	r0, [r7, #4]
	LORA_write(RH_RF95_REG_1D_MODEM_CONFIG1, config[0]);
200005c8:	687b      	ldr	r3, [r7, #4]
200005ca:	781b      	ldrb	r3, [r3, #0]
200005cc:	f04f 001d 	mov.w	r0, #29
200005d0:	4619      	mov	r1, r3
200005d2:	f000 f8fb 	bl	200007cc <LORA_write>
	LORA_write(RH_RF95_REG_1E_MODEM_CONFIG2, config[1]);
200005d6:	687b      	ldr	r3, [r7, #4]
200005d8:	f103 0301 	add.w	r3, r3, #1
200005dc:	781b      	ldrb	r3, [r3, #0]
200005de:	f04f 001e 	mov.w	r0, #30
200005e2:	4619      	mov	r1, r3
200005e4:	f000 f8f2 	bl	200007cc <LORA_write>
	LORA_write(RH_RF95_REG_26_MODEM_CONFIG3, config[2]);
200005e8:	687b      	ldr	r3, [r7, #4]
200005ea:	f103 0302 	add.w	r3, r3, #2
200005ee:	781b      	ldrb	r3, [r3, #0]
200005f0:	f04f 0026 	mov.w	r0, #38	; 0x26
200005f4:	4619      	mov	r1, r3
200005f6:	f000 f8e9 	bl	200007cc <LORA_write>
}
200005fa:	f107 0708 	add.w	r7, r7, #8
200005fe:	46bd      	mov	sp, r7
20000600:	bd80      	pop	{r7, pc}
20000602:	bf00      	nop

20000604 <LORA_set_preamble_length>:

void LORA_set_preamble_length(uint16_t bytes){
20000604:	b580      	push	{r7, lr}
20000606:	b082      	sub	sp, #8
20000608:	af00      	add	r7, sp, #0
2000060a:	4603      	mov	r3, r0
2000060c:	80fb      	strh	r3, [r7, #6]
	LORA_write(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
2000060e:	88fb      	ldrh	r3, [r7, #6]
20000610:	ea4f 2313 	mov.w	r3, r3, lsr #8
20000614:	b29b      	uxth	r3, r3
20000616:	b2db      	uxtb	r3, r3
20000618:	f04f 0020 	mov.w	r0, #32
2000061c:	4619      	mov	r1, r3
2000061e:	f000 f8d5 	bl	200007cc <LORA_write>
	LORA_write(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
20000622:	88fb      	ldrh	r3, [r7, #6]
20000624:	b2db      	uxtb	r3, r3
20000626:	f04f 0021 	mov.w	r0, #33	; 0x21
2000062a:	4619      	mov	r1, r3
2000062c:	f000 f8ce 	bl	200007cc <LORA_write>
}
20000630:	f107 0708 	add.w	r7, r7, #8
20000634:	46bd      	mov	sp, r7
20000636:	bd80      	pop	{r7, pc}

20000638 <LORA_set_frequency>:

void LORA_set_frequency(double f){
20000638:	b580      	push	{r7, lr}
2000063a:	b084      	sub	sp, #16
2000063c:	af00      	add	r7, sp, #0
2000063e:	e9c7 0100 	strd	r0, r1, [r7]
	uint32_t frf = (f * 1000000.0) / RH_RF95_FSTEP;
20000642:	e9d7 0100 	ldrd	r0, r1, [r7]
20000646:	a31a      	add	r3, pc, #104	; (adr r3, 200006b0 <LORA_set_frequency+0x78>)
20000648:	e9d3 2300 	ldrd	r2, r3, [r3]
2000064c:	f001 fc8e 	bl	20001f6c <__aeabi_dmul>
20000650:	4602      	mov	r2, r0
20000652:	460b      	mov	r3, r1
20000654:	4610      	mov	r0, r2
20000656:	4619      	mov	r1, r3
20000658:	a317      	add	r3, pc, #92	; (adr r3, 200006b8 <LORA_set_frequency+0x80>)
2000065a:	e9d3 2300 	ldrd	r2, r3, [r3]
2000065e:	f001 fdaf 	bl	200021c0 <__aeabi_ddiv>
20000662:	4602      	mov	r2, r0
20000664:	460b      	mov	r3, r1
20000666:	4610      	mov	r0, r2
20000668:	4619      	mov	r1, r3
2000066a:	f001 fe91 	bl	20002390 <__aeabi_d2uiz>
2000066e:	4603      	mov	r3, r0
20000670:	60fb      	str	r3, [r7, #12]
	LORA_write(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	ea4f 4313 	mov.w	r3, r3, lsr #16
20000678:	b2db      	uxtb	r3, r3
2000067a:	f04f 0006 	mov.w	r0, #6
2000067e:	4619      	mov	r1, r3
20000680:	f000 f8a4 	bl	200007cc <LORA_write>
	LORA_write(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
20000684:	68fb      	ldr	r3, [r7, #12]
20000686:	ea4f 2313 	mov.w	r3, r3, lsr #8
2000068a:	b2db      	uxtb	r3, r3
2000068c:	f04f 0007 	mov.w	r0, #7
20000690:	4619      	mov	r1, r3
20000692:	f000 f89b 	bl	200007cc <LORA_write>
	LORA_write(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
20000696:	68fb      	ldr	r3, [r7, #12]
20000698:	b2db      	uxtb	r3, r3
2000069a:	f04f 0008 	mov.w	r0, #8
2000069e:	4619      	mov	r1, r3
200006a0:	f000 f894 	bl	200007cc <LORA_write>
}
200006a4:	f107 0710 	add.w	r7, r7, #16
200006a8:	46bd      	mov	sp, r7
200006aa:	bd80      	pop	{r7, pc}
200006ac:	f3af 8000 	nop.w
200006b0:	00000000 	.word	0x00000000
200006b4:	412e8480 	.word	0x412e8480
200006b8:	00000000 	.word	0x00000000
200006bc:	404e8480 	.word	0x404e8480

200006c0 <LORA_set_tx_power>:

void LORA_set_tx_power(int8_t power, uint8_t useRFO)
{
200006c0:	b580      	push	{r7, lr}
200006c2:	b082      	sub	sp, #8
200006c4:	af00      	add	r7, sp, #0
200006c6:	4602      	mov	r2, r0
200006c8:	460b      	mov	r3, r1
200006ca:	71fa      	strb	r2, [r7, #7]
200006cc:	71bb      	strb	r3, [r7, #6]
    // Sigh, different behaviours depending on whther the module use PA_BOOST or the RFO pin
    // for the transmitter output
    if (useRFO){
200006ce:	79bb      	ldrb	r3, [r7, #6]
200006d0:	2b00      	cmp	r3, #0
200006d2:	d01c      	beq.n	2000070e <LORA_set_tx_power+0x4e>
		if (power > 14)
200006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
200006d8:	2b0e      	cmp	r3, #14
200006da:	dd02      	ble.n	200006e2 <LORA_set_tx_power+0x22>
			power = 14;
200006dc:	f04f 030e 	mov.w	r3, #14
200006e0:	71fb      	strb	r3, [r7, #7]
		if (power < -1)
200006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
200006e6:	f1b3 3fff 	cmp.w	r3, #4294967295
200006ea:	da02      	bge.n	200006f2 <LORA_set_tx_power+0x32>
			power = -1;
200006ec:	f04f 33ff 	mov.w	r3, #4294967295
200006f0:	71fb      	strb	r3, [r7, #7]
		LORA_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
200006f2:	79fb      	ldrb	r3, [r7, #7]
200006f4:	f103 0301 	add.w	r3, r3, #1
200006f8:	b2db      	uxtb	r3, r3
200006fa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
200006fe:	b2db      	uxtb	r3, r3
20000700:	b2db      	uxtb	r3, r3
20000702:	f04f 0009 	mov.w	r0, #9
20000706:	4619      	mov	r1, r3
20000708:	f000 f860 	bl	200007cc <LORA_write>
2000070c:	e032      	b.n	20000774 <LORA_set_tx_power+0xb4>
    } else {
		if (power > 23)
2000070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000712:	2b17      	cmp	r3, #23
20000714:	dd02      	ble.n	2000071c <LORA_set_tx_power+0x5c>
			power = 23;
20000716:	f04f 0317 	mov.w	r3, #23
2000071a:	71fb      	strb	r3, [r7, #7]
		if (power < 5)
2000071c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000720:	2b04      	cmp	r3, #4
20000722:	dc02      	bgt.n	2000072a <LORA_set_tx_power+0x6a>
			power = 5;
20000724:	f04f 0305 	mov.w	r3, #5
20000728:	71fb      	strb	r3, [r7, #7]

		// For RH_RF95_PA_DAC_ENABLE, manual says '+20dBm on PA_BOOST when OutputPower=0xf'
		// RH_RF95_PA_DAC_ENABLE actually adds about 3dBm to all power levels. We will use it
		// for 21, 22 and 23dBm
		if (power > 20) {
2000072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000072e:	2b14      	cmp	r3, #20
20000730:	dd0b      	ble.n	2000074a <LORA_set_tx_power+0x8a>
			LORA_write(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
20000732:	f04f 004d 	mov.w	r0, #77	; 0x4d
20000736:	f04f 0107 	mov.w	r1, #7
2000073a:	f000 f847 	bl	200007cc <LORA_write>
			power -= 3;
2000073e:	79fb      	ldrb	r3, [r7, #7]
20000740:	f1a3 0303 	sub.w	r3, r3, #3
20000744:	b2db      	uxtb	r3, r3
20000746:	71fb      	strb	r3, [r7, #7]
20000748:	e005      	b.n	20000756 <LORA_set_tx_power+0x96>
		} else {
			LORA_write(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
2000074a:	f04f 004d 	mov.w	r0, #77	; 0x4d
2000074e:	f04f 0104 	mov.w	r1, #4
20000752:	f000 f83b 	bl	200007cc <LORA_write>
		// pin is connected, so must use PA_BOOST
		// Pout = 2 + OutputPower.
		// The documentation is pretty confusing on this topic: PaSelect says the max power is 20dBm,
		// but OutputPower claims it would be 17dBm.
		// My measurements show 20dBm is correct
		LORA_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
20000756:	79fb      	ldrb	r3, [r7, #7]
20000758:	f1a3 0305 	sub.w	r3, r3, #5
2000075c:	b2db      	uxtb	r3, r3
2000075e:	ea6f 6343 	mvn.w	r3, r3, lsl #25
20000762:	ea6f 6353 	mvn.w	r3, r3, lsr #25
20000766:	b2db      	uxtb	r3, r3
20000768:	b2db      	uxtb	r3, r3
2000076a:	f04f 0009 	mov.w	r0, #9
2000076e:	4619      	mov	r1, r3
20000770:	f000 f82c 	bl	200007cc <LORA_write>
	}
}
20000774:	f107 0708 	add.w	r7, r7, #8
20000778:	46bd      	mov	sp, r7
2000077a:	bd80      	pop	{r7, pc}

2000077c <LORA_read>:
    }
    LORA_clear_rx_buf(); // This message accepted and cleared
    return TRUE;
}

uint8_t LORA_read(uint8_t addr){
2000077c:	b580      	push	{r7, lr}
2000077e:	b084      	sub	sp, #16
20000780:	af00      	add	r7, sp, #0
20000782:	4603      	mov	r3, r0
20000784:	71fb      	strb	r3, [r7, #7]
	uint8_t response;
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000786:	f242 7004 	movw	r0, #9988	; 0x2704
2000078a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000078e:	f04f 0100 	mov.w	r1, #0
20000792:	f000 fac9 	bl	20000d28 <MSS_SPI_set_slave_select>
	response = MSS_SPI_transfer_frame(&g_mss_spi1, addr << 8);
20000796:	79fb      	ldrb	r3, [r7, #7]
20000798:	ea4f 2303 	mov.w	r3, r3, lsl #8
2000079c:	f242 7004 	movw	r0, #9988	; 0x2704
200007a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200007a4:	4619      	mov	r1, r3
200007a6:	f000 fb8b 	bl	20000ec0 <MSS_SPI_transfer_frame>
200007aa:	4603      	mov	r3, r0
200007ac:	73fb      	strb	r3, [r7, #15]
	MSS_SPI_clear_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
200007ae:	f242 7004 	movw	r0, #9988	; 0x2704
200007b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
200007b6:	f04f 0100 	mov.w	r1, #0
200007ba:	f000 fb39 	bl	20000e30 <MSS_SPI_clear_slave_select>
	return response;
200007be:	7bfb      	ldrb	r3, [r7, #15]
}
200007c0:	4618      	mov	r0, r3
200007c2:	f107 0710 	add.w	r7, r7, #16
200007c6:	46bd      	mov	sp, r7
200007c8:	bd80      	pop	{r7, pc}
200007ca:	bf00      	nop

200007cc <LORA_write>:

void LORA_write(uint8_t addr, uint8_t data){
200007cc:	b580      	push	{r7, lr}
200007ce:	b084      	sub	sp, #16
200007d0:	af00      	add	r7, sp, #0
200007d2:	4602      	mov	r2, r0
200007d4:	460b      	mov	r3, r1
200007d6:	71fa      	strb	r2, [r7, #7]
200007d8:	71bb      	strb	r3, [r7, #6]
	uint16_t cmd = (1 << 15) | (addr << 8) | data;
200007da:	79fb      	ldrb	r3, [r7, #7]
200007dc:	ea4f 2303 	mov.w	r3, r3, lsl #8
200007e0:	b29b      	uxth	r3, r3
200007e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
200007e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
200007ea:	b29a      	uxth	r2, r3
200007ec:	79bb      	ldrb	r3, [r7, #6]
200007ee:	ea42 0303 	orr.w	r3, r2, r3
200007f2:	b29b      	uxth	r3, r3
200007f4:	81fb      	strh	r3, [r7, #14]
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
200007f6:	f242 7004 	movw	r0, #9988	; 0x2704
200007fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
200007fe:	f04f 0100 	mov.w	r1, #0
20000802:	f000 fa91 	bl	20000d28 <MSS_SPI_set_slave_select>
	MSS_SPI_transfer_frame( &g_mss_spi1, cmd);
20000806:	89fb      	ldrh	r3, [r7, #14]
20000808:	f242 7004 	movw	r0, #9988	; 0x2704
2000080c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000810:	4619      	mov	r1, r3
20000812:	f000 fb55 	bl	20000ec0 <MSS_SPI_transfer_frame>
	MSS_SPI_clear_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000816:	f242 7004 	movw	r0, #9988	; 0x2704
2000081a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000081e:	f04f 0100 	mov.w	r1, #0
20000822:	f000 fb05 	bl	20000e30 <MSS_SPI_clear_slave_select>
}
20000826:	f107 0710 	add.w	r7, r7, #16
2000082a:	46bd      	mov	sp, r7
2000082c:	bd80      	pop	{r7, pc}
2000082e:	bf00      	nop

20000830 <GPIO1_IRQHandler>:

uint8_t last_was_ack = 0;

// Interrupts Handler
__attribute__ ((interrupt)) void GPIO1_IRQHandler( void )
{
20000830:	4668      	mov	r0, sp
20000832:	f020 0107 	bic.w	r1, r0, #7
20000836:	468d      	mov	sp, r1
20000838:	b589      	push	{r0, r3, r7, lr}
2000083a:	af00      	add	r7, sp, #0
	// Add interrupt status?
	MSS_GPIO_clear_irq(MSS_GPIO_1);
2000083c:	f04f 0001 	mov.w	r0, #1
20000840:	f001 fb66 	bl	20001f10 <MSS_GPIO_clear_irq>
	// For the NFC module
	//int n_bytes_to_read =; //Need to look it in the datasheet
	if (!last_was_ack){
20000844:	f242 53e5 	movw	r3, #9701	; 0x25e5
20000848:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000084c:	781b      	ldrb	r3, [r3, #0]
2000084e:	2b00      	cmp	r3, #0
20000850:	d107      	bne.n	20000862 <GPIO1_IRQHandler+0x32>
					receive_buf,
					7,
					MSS_I2C_RELEASE_BUS
			);
		MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);*/
		last_was_ack = 1;
20000852:	f242 53e5 	movw	r3, #9701	; 0x25e5
20000856:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000085a:	f04f 0201 	mov.w	r2, #1
2000085e:	701a      	strb	r2, [r3, #0]
20000860:	e006      	b.n	20000870 <GPIO1_IRQHandler+0x40>
					receive_buf,
					7,
					MSS_I2C_RELEASE_BUS
			);
		MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);*/
		last_was_ack = 0;
20000862:	f242 53e5 	movw	r3, #9701	; 0x25e5
20000866:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000086a:	f04f 0200 	mov.w	r2, #0
2000086e:	701a      	strb	r2, [r3, #0]
	}

	set_interrupt_handled(1);
20000870:	f04f 0001 	mov.w	r0, #1
20000874:	f000 f816 	bl	200008a4 <set_interrupt_handled>
}
20000878:	46bd      	mov	sp, r7
2000087a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000087e:	4685      	mov	sp, r0
20000880:	4770      	bx	lr
20000882:	bf00      	nop

20000884 <main>:

// Main program
int main()
{
20000884:	b580      	push	{r7, lr}
20000886:	b082      	sub	sp, #8
20000888:	af00      	add	r7, sp, #0
	MSS_GPIO_init();
2000088a:	f001 faed 	bl	20001e68 <MSS_GPIO_init>

	int init_res = LORA_init();
2000088e:	f7ff fe07 	bl	200004a0 <LORA_init>
20000892:	4603      	mov	r3, r0
20000894:	607b      	str	r3, [r7, #4]
		}
	}
	return 0;
	*/

	return(0);
20000896:	f04f 0300 	mov.w	r3, #0

}
2000089a:	4618      	mov	r0, r3
2000089c:	f107 0708 	add.w	r7, r7, #8
200008a0:	46bd      	mov	sp, r7
200008a2:	bd80      	pop	{r7, pc}

200008a4 <set_interrupt_handled>:

uint8_t is_interrupt_handled(void){
	return interrupt_handled;
}

void set_interrupt_handled(uint8_t val){
200008a4:	b480      	push	{r7}
200008a6:	b083      	sub	sp, #12
200008a8:	af00      	add	r7, sp, #0
200008aa:	4603      	mov	r3, r0
200008ac:	71fb      	strb	r3, [r7, #7]
	interrupt_handled = val;
200008ae:	f242 53e0 	movw	r3, #9696	; 0x25e0
200008b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008b6:	79fa      	ldrb	r2, [r7, #7]
200008b8:	701a      	strb	r2, [r3, #0]
}
200008ba:	f107 070c 	add.w	r7, r7, #12
200008be:	46bd      	mov	sp, r7
200008c0:	bc80      	pop	{r7}
200008c2:	4770      	bx	lr

200008c4 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200008c4:	b480      	push	{r7}
200008c6:	b083      	sub	sp, #12
200008c8:	af00      	add	r7, sp, #0
200008ca:	4603      	mov	r3, r0
200008cc:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200008ce:	f24e 1300 	movw	r3, #57600	; 0xe100
200008d2:	f2ce 0300 	movt	r3, #57344	; 0xe000
200008d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200008da:	ea4f 1252 	mov.w	r2, r2, lsr #5
200008de:	88f9      	ldrh	r1, [r7, #6]
200008e0:	f001 011f 	and.w	r1, r1, #31
200008e4:	f04f 0001 	mov.w	r0, #1
200008e8:	fa00 f101 	lsl.w	r1, r0, r1
200008ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200008f0:	f107 070c 	add.w	r7, r7, #12
200008f4:	46bd      	mov	sp, r7
200008f6:	bc80      	pop	{r7}
200008f8:	4770      	bx	lr
200008fa:	bf00      	nop

200008fc <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
200008fc:	b480      	push	{r7}
200008fe:	b083      	sub	sp, #12
20000900:	af00      	add	r7, sp, #0
20000902:	4603      	mov	r3, r0
20000904:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000906:	f24e 1300 	movw	r3, #57600	; 0xe100
2000090a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000090e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000912:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000916:	88f9      	ldrh	r1, [r7, #6]
20000918:	f001 011f 	and.w	r1, r1, #31
2000091c:	f04f 0001 	mov.w	r0, #1
20000920:	fa00 f101 	lsl.w	r1, r0, r1
20000924:	f102 0220 	add.w	r2, r2, #32
20000928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000092c:	f107 070c 	add.w	r7, r7, #12
20000930:	46bd      	mov	sp, r7
20000932:	bc80      	pop	{r7}
20000934:	4770      	bx	lr
20000936:	bf00      	nop

20000938 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000938:	b480      	push	{r7}
2000093a:	b083      	sub	sp, #12
2000093c:	af00      	add	r7, sp, #0
2000093e:	4603      	mov	r3, r0
20000940:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000942:	f24e 1300 	movw	r3, #57600	; 0xe100
20000946:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000094a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000094e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000952:	88f9      	ldrh	r1, [r7, #6]
20000954:	f001 011f 	and.w	r1, r1, #31
20000958:	f04f 0001 	mov.w	r0, #1
2000095c:	fa00 f101 	lsl.w	r1, r0, r1
20000960:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000968:	f107 070c 	add.w	r7, r7, #12
2000096c:	46bd      	mov	sp, r7
2000096e:	bc80      	pop	{r7}
20000970:	4770      	bx	lr
20000972:	bf00      	nop

20000974 <MSS_SPI_init>:
 */
void MSS_SPI_init
(
    mss_spi_instance_t * this_spi
)
{
20000974:	b580      	push	{r7, lr}
20000976:	b084      	sub	sp, #16
20000978:	af00      	add	r7, sp, #0
2000097a:	6078      	str	r0, [r7, #4]
    uint16_t slave;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
2000097c:	687a      	ldr	r2, [r7, #4]
2000097e:	f242 7388 	movw	r3, #10120	; 0x2788
20000982:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000986:	429a      	cmp	r2, r3
20000988:	d007      	beq.n	2000099a <MSS_SPI_init+0x26>
2000098a:	687a      	ldr	r2, [r7, #4]
2000098c:	f242 7304 	movw	r3, #9988	; 0x2704
20000990:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000994:	429a      	cmp	r2, r3
20000996:	d000      	beq.n	2000099a <MSS_SPI_init+0x26>
20000998:	be00      	bkpt	0x0000
     * Initialize SPI driver instance data. Relies on the majority
     * of data requiring 0 for initial state so we just need to fill
     * with 0s and finish off with a small number of non zero values.
     */
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
2000099a:	687b      	ldr	r3, [r7, #4]
2000099c:	889b      	ldrh	r3, [r3, #4]
2000099e:	b21b      	sxth	r3, r3
200009a0:	4618      	mov	r0, r3
200009a2:	f7ff ffab 	bl	200008fc <NVIC_DisableIRQ>

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
200009a6:	6878      	ldr	r0, [r7, #4]
200009a8:	f04f 0100 	mov.w	r1, #0
200009ac:	f04f 0284 	mov.w	r2, #132	; 0x84
200009b0:	f001 fd36 	bl	20002420 <memset>
    
    this_spi->cmd_done = 1u;
200009b4:	687b      	ldr	r3, [r7, #4]
200009b6:	f04f 0201 	mov.w	r2, #1
200009ba:	625a      	str	r2, [r3, #36]	; 0x24

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
200009bc:	f04f 0300 	mov.w	r3, #0
200009c0:	81fb      	strh	r3, [r7, #14]
200009c2:	e00d      	b.n	200009e0 <MSS_SPI_init+0x6c>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
200009c4:	89fb      	ldrh	r3, [r7, #14]
200009c6:	687a      	ldr	r2, [r7, #4]
200009c8:	f103 0306 	add.w	r3, r3, #6
200009cc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200009d0:	4413      	add	r3, r2
200009d2:	f04f 32ff 	mov.w	r2, #4294967295
200009d6:	605a      	str	r2, [r3, #4]

    memset(this_spi, 0, sizeof(mss_spi_instance_t));
    
    this_spi->cmd_done = 1u;

    for(slave = 0u; slave < (uint16_t)MSS_SPI_MAX_NB_OF_SLAVES; ++slave)
200009d8:	89fb      	ldrh	r3, [r7, #14]
200009da:	f103 0301 	add.w	r3, r3, #1
200009de:	81fb      	strh	r3, [r7, #14]
200009e0:	89fb      	ldrh	r3, [r7, #14]
200009e2:	2b07      	cmp	r3, #7
200009e4:	d9ee      	bls.n	200009c4 <MSS_SPI_init+0x50>
    {
        this_spi->slaves_cfg[slave].ctrl_reg = NOT_CONFIGURED;
    }

    if(this_spi == &g_mss_spi0)
200009e6:	687a      	ldr	r2, [r7, #4]
200009e8:	f242 7388 	movw	r3, #10120	; 0x2788
200009ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009f0:	429a      	cmp	r2, r3
200009f2:	d126      	bne.n	20000a42 <MSS_SPI_init+0xce>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
200009f4:	687a      	ldr	r2, [r7, #4]
200009f6:	f241 0300 	movw	r3, #4096	; 0x1000
200009fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
200009fe:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
20000a00:	687b      	ldr	r3, [r7, #4]
20000a02:	f04f 020c 	mov.w	r2, #12
20000a06:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20000a08:	f242 0300 	movw	r3, #8192	; 0x2000
20000a0c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000a10:	f242 0200 	movw	r2, #8192	; 0x2000
20000a14:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000a18:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20000a1e:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
20000a20:	f04f 000c 	mov.w	r0, #12
20000a24:	f7ff ff88 	bl	20000938 <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20000a28:	f242 0300 	movw	r3, #8192	; 0x2000
20000a2c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000a30:	f242 0200 	movw	r2, #8192	; 0x2000
20000a34:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000a38:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000a3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20000a3e:	631a      	str	r2, [r3, #48]	; 0x30
20000a40:	e025      	b.n	20000a8e <MSS_SPI_init+0x11a>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20000a42:	687a      	ldr	r2, [r7, #4]
20000a44:	f241 0300 	movw	r3, #4096	; 0x1000
20000a48:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000a4c:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
20000a4e:	687b      	ldr	r3, [r7, #4]
20000a50:	f04f 020d 	mov.w	r2, #13
20000a54:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20000a56:	f242 0300 	movw	r3, #8192	; 0x2000
20000a5a:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000a5e:	f242 0200 	movw	r2, #8192	; 0x2000
20000a62:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000a66:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000a68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20000a6c:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
20000a6e:	f04f 000d 	mov.w	r0, #13
20000a72:	f7ff ff61 	bl	20000938 <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20000a76:	f242 0300 	movw	r3, #8192	; 0x2000
20000a7a:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000a7e:	f242 0200 	movw	r2, #8192	; 0x2000
20000a82:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000a86:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20000a8c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* De-assert reset bit. */
    this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20000a8e:	687b      	ldr	r3, [r7, #4]
20000a90:	681b      	ldr	r3, [r3, #0]
20000a92:	687a      	ldr	r2, [r7, #4]
20000a94:	6812      	ldr	r2, [r2, #0]
20000a96:	6812      	ldr	r2, [r2, #0]
20000a98:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20000a9c:	601a      	str	r2, [r3, #0]
}
20000a9e:	f107 0710 	add.w	r7, r7, #16
20000aa2:	46bd      	mov	sp, r7
20000aa4:	bd80      	pop	{r7, pc}
20000aa6:	bf00      	nop

20000aa8 <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
20000aa8:	b580      	push	{r7, lr}
20000aaa:	b08a      	sub	sp, #40	; 0x28
20000aac:	af00      	add	r7, sp, #0
20000aae:	6078      	str	r0, [r7, #4]
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
20000ab0:	687b      	ldr	r3, [r7, #4]
20000ab2:	681b      	ldr	r3, [r3, #0]
20000ab4:	681b      	ldr	r3, [r3, #0]
20000ab6:	60fb      	str	r3, [r7, #12]
    clk_gen = this_spi->hw_reg->CLK_GEN;
20000ab8:	687b      	ldr	r3, [r7, #4]
20000aba:	681b      	ldr	r3, [r3, #0]
20000abc:	699b      	ldr	r3, [r3, #24]
20000abe:	613b      	str	r3, [r7, #16]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	681b      	ldr	r3, [r3, #0]
20000ac4:	685b      	ldr	r3, [r3, #4]
20000ac6:	617b      	str	r3, [r7, #20]
    control2 = this_spi->hw_reg->CONTROL2;
20000ac8:	687b      	ldr	r3, [r7, #4]
20000aca:	681b      	ldr	r3, [r3, #0]
20000acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000ace:	61bb      	str	r3, [r7, #24]
    packet_size = this_spi->hw_reg->PKTSIZE;
20000ad0:	687b      	ldr	r3, [r7, #4]
20000ad2:	681b      	ldr	r3, [r3, #0]
20000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000ad6:	61fb      	str	r3, [r7, #28]
    cmd_size = this_spi->hw_reg->CMDSIZE;
20000ad8:	687b      	ldr	r3, [r7, #4]
20000ada:	681b      	ldr	r3, [r3, #0]
20000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20000ade:	623b      	str	r3, [r7, #32]
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
20000ae0:	687b      	ldr	r3, [r7, #4]
20000ae2:	681b      	ldr	r3, [r3, #0]
20000ae4:	69db      	ldr	r3, [r3, #28]
20000ae6:	627b      	str	r3, [r7, #36]	; 0x24
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
20000ae8:	687a      	ldr	r2, [r7, #4]
20000aea:	f242 7388 	movw	r3, #10120	; 0x2788
20000aee:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000af2:	429a      	cmp	r2, r3
20000af4:	d12e      	bne.n	20000b54 <recover_from_rx_overflow+0xac>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
20000af6:	687a      	ldr	r2, [r7, #4]
20000af8:	f241 0300 	movw	r3, #4096	; 0x1000
20000afc:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000b00:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI0_IRQn;
20000b02:	687b      	ldr	r3, [r7, #4]
20000b04:	f04f 020c 	mov.w	r2, #12
20000b08:	809a      	strh	r2, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
20000b0a:	f242 0300 	movw	r3, #8192	; 0x2000
20000b0e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b12:	f242 0200 	movw	r2, #8192	; 0x2000
20000b16:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20000b20:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
20000b22:	f04f 000c 	mov.w	r0, #12
20000b26:	f7ff ff07 	bl	20000938 <NVIC_ClearPendingIRQ>
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
20000b2a:	f242 0300 	movw	r3, #8192	; 0x2000
20000b2e:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b32:	f242 0200 	movw	r2, #8192	; 0x2000
20000b36:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
20000b40:	631a      	str	r2, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20000b42:	687b      	ldr	r3, [r7, #4]
20000b44:	681b      	ldr	r3, [r3, #0]
20000b46:	687a      	ldr	r2, [r7, #4]
20000b48:	6812      	ldr	r2, [r2, #0]
20000b4a:	6812      	ldr	r2, [r2, #0]
20000b4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20000b50:	601a      	str	r2, [r3, #0]
20000b52:	e02d      	b.n	20000bb0 <recover_from_rx_overflow+0x108>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20000b54:	687a      	ldr	r2, [r7, #4]
20000b56:	f241 0300 	movw	r3, #4096	; 0x1000
20000b5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
20000b5e:	6013      	str	r3, [r2, #0]
        this_spi->irqn = SPI1_IRQn;
20000b60:	687b      	ldr	r3, [r7, #4]
20000b62:	f04f 020d 	mov.w	r2, #13
20000b66:	809a      	strh	r2, [r3, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20000b68:	f242 0300 	movw	r3, #8192	; 0x2000
20000b6c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b70:	f242 0200 	movw	r2, #8192	; 0x2000
20000b74:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b78:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
20000b7e:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
20000b80:	f04f 000d 	mov.w	r0, #13
20000b84:	f7ff fed8 	bl	20000938 <NVIC_ClearPendingIRQ>
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20000b88:	f242 0300 	movw	r3, #8192	; 0x2000
20000b8c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000b90:	f242 0200 	movw	r2, #8192	; 0x2000
20000b94:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
20000b9e:	631a      	str	r2, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
20000ba0:	687b      	ldr	r3, [r7, #4]
20000ba2:	681b      	ldr	r3, [r3, #0]
20000ba4:	687a      	ldr	r2, [r7, #4]
20000ba6:	6812      	ldr	r2, [r2, #0]
20000ba8:	6812      	ldr	r2, [r2, #0]
20000baa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
20000bae:	601a      	str	r2, [r3, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
20000bb0:	68fb      	ldr	r3, [r7, #12]
20000bb2:	f023 0301 	bic.w	r3, r3, #1
20000bb6:	60fb      	str	r3, [r7, #12]
    this_spi->hw_reg->CONTROL = control_reg;
20000bb8:	687b      	ldr	r3, [r7, #4]
20000bba:	681b      	ldr	r3, [r3, #0]
20000bbc:	68fa      	ldr	r2, [r7, #12]
20000bbe:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
20000bc0:	687b      	ldr	r3, [r7, #4]
20000bc2:	681b      	ldr	r3, [r3, #0]
20000bc4:	693a      	ldr	r2, [r7, #16]
20000bc6:	619a      	str	r2, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
20000bc8:	687b      	ldr	r3, [r7, #4]
20000bca:	681b      	ldr	r3, [r3, #0]
20000bcc:	697a      	ldr	r2, [r7, #20]
20000bce:	605a      	str	r2, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20000bd0:	687b      	ldr	r3, [r7, #4]
20000bd2:	681b      	ldr	r3, [r3, #0]
20000bd4:	687a      	ldr	r2, [r7, #4]
20000bd6:	6812      	ldr	r2, [r2, #0]
20000bd8:	6812      	ldr	r2, [r2, #0]
20000bda:	f042 0201 	orr.w	r2, r2, #1
20000bde:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
20000be0:	687b      	ldr	r3, [r7, #4]
20000be2:	681b      	ldr	r3, [r3, #0]
20000be4:	69ba      	ldr	r2, [r7, #24]
20000be6:	629a      	str	r2, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
20000be8:	687b      	ldr	r3, [r7, #4]
20000bea:	681b      	ldr	r3, [r3, #0]
20000bec:	69fa      	ldr	r2, [r7, #28]
20000bee:	631a      	str	r2, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
20000bf0:	687b      	ldr	r3, [r7, #4]
20000bf2:	681b      	ldr	r3, [r3, #0]
20000bf4:	6a3a      	ldr	r2, [r7, #32]
20000bf6:	635a      	str	r2, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
20000bf8:	687b      	ldr	r3, [r7, #4]
20000bfa:	681b      	ldr	r3, [r3, #0]
20000bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000bfe:	61da      	str	r2, [r3, #28]
}
20000c00:	f107 0728 	add.w	r7, r7, #40	; 0x28
20000c04:	46bd      	mov	sp, r7
20000c06:	bd80      	pop	{r7, pc}

20000c08 <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
20000c08:	b580      	push	{r7, lr}
20000c0a:	b084      	sub	sp, #16
20000c0c:	af00      	add	r7, sp, #0
20000c0e:	60f8      	str	r0, [r7, #12]
20000c10:	607a      	str	r2, [r7, #4]
20000c12:	460a      	mov	r2, r1
20000c14:	72fa      	strb	r2, [r7, #11]
20000c16:	70fb      	strb	r3, [r7, #3]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000c18:	68fa      	ldr	r2, [r7, #12]
20000c1a:	f242 7388 	movw	r3, #10120	; 0x2788
20000c1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c22:	429a      	cmp	r2, r3
20000c24:	d007      	beq.n	20000c36 <MSS_SPI_configure_master_mode+0x2e>
20000c26:	68fa      	ldr	r2, [r7, #12]
20000c28:	f242 7304 	movw	r3, #9988	; 0x2704
20000c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c30:	429a      	cmp	r2, r3
20000c32:	d000      	beq.n	20000c36 <MSS_SPI_configure_master_mode+0x2e>
20000c34:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
20000c36:	7afb      	ldrb	r3, [r7, #11]
20000c38:	2b07      	cmp	r3, #7
20000c3a:	d900      	bls.n	20000c3e <MSS_SPI_configure_master_mode+0x36>
20000c3c:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
20000c3e:	7e3b      	ldrb	r3, [r7, #24]
20000c40:	2b20      	cmp	r3, #32
20000c42:	d900      	bls.n	20000c46 <MSS_SPI_configure_master_mode+0x3e>
20000c44:	be00      	bkpt	0x0000
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20000c46:	68fb      	ldr	r3, [r7, #12]
20000c48:	889b      	ldrh	r3, [r3, #4]
20000c4a:	b21b      	sxth	r3, r3
20000c4c:	4618      	mov	r0, r3
20000c4e:	f7ff fe55 	bl	200008fc <NVIC_DisableIRQ>

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
20000c52:	68fb      	ldr	r3, [r7, #12]
20000c54:	f04f 0200 	mov.w	r2, #0
20000c58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20000c5c:	68fb      	ldr	r3, [r7, #12]
20000c5e:	681b      	ldr	r3, [r3, #0]
20000c60:	68fa      	ldr	r2, [r7, #12]
20000c62:	6812      	ldr	r2, [r2, #0]
20000c64:	6812      	ldr	r2, [r2, #0]
20000c66:	f022 0201 	bic.w	r2, r2, #1
20000c6a:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
20000c6c:	68fb      	ldr	r3, [r7, #12]
20000c6e:	681b      	ldr	r3, [r3, #0]
20000c70:	68fa      	ldr	r2, [r7, #12]
20000c72:	6812      	ldr	r2, [r2, #0]
20000c74:	6812      	ldr	r2, [r2, #0]
20000c76:	f042 0202 	orr.w	r2, r2, #2
20000c7a:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20000c7c:	68fb      	ldr	r3, [r7, #12]
20000c7e:	681b      	ldr	r3, [r3, #0]
20000c80:	68fa      	ldr	r2, [r7, #12]
20000c82:	6812      	ldr	r2, [r2, #0]
20000c84:	6812      	ldr	r2, [r2, #0]
20000c86:	f042 0201 	orr.w	r2, r2, #1
20000c8a:	601a      	str	r2, [r3, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
20000c8c:	7afb      	ldrb	r3, [r7, #11]
20000c8e:	2b07      	cmp	r3, #7
20000c90:	d83f      	bhi.n	20000d12 <MSS_SPI_configure_master_mode+0x10a>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
20000c92:	687b      	ldr	r3, [r7, #4]
20000c94:	2b00      	cmp	r3, #0
20000c96:	d00b      	beq.n	20000cb0 <MSS_SPI_configure_master_mode+0xa8>
20000c98:	687b      	ldr	r3, [r7, #4]
20000c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20000c9e:	d007      	beq.n	20000cb0 <MSS_SPI_configure_master_mode+0xa8>
20000ca0:	687b      	ldr	r3, [r7, #4]
20000ca2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20000ca6:	d003      	beq.n	20000cb0 <MSS_SPI_configure_master_mode+0xa8>
20000ca8:	687b      	ldr	r3, [r7, #4]
20000caa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
20000cae:	d10f      	bne.n	20000cd0 <MSS_SPI_configure_master_mode+0xc8>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
20000cb0:	7afa      	ldrb	r2, [r7, #11]
20000cb2:	6879      	ldr	r1, [r7, #4]
20000cb4:	f240 1302 	movw	r3, #258	; 0x102
20000cb8:	f2c2 4300 	movt	r3, #9216	; 0x2400
20000cbc:	ea41 0303 	orr.w	r3, r1, r3
20000cc0:	68f9      	ldr	r1, [r7, #12]
20000cc2:	f102 0206 	add.w	r2, r2, #6
20000cc6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20000cca:	440a      	add	r2, r1
20000ccc:	6053      	str	r3, [r2, #4]
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
20000cce:	e00e      	b.n	20000cee <MSS_SPI_configure_master_mode+0xe6>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
20000cd0:	7afa      	ldrb	r2, [r7, #11]
20000cd2:	6879      	ldr	r1, [r7, #4]
20000cd4:	f240 1302 	movw	r3, #258	; 0x102
20000cd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cdc:	ea41 0303 	orr.w	r3, r1, r3
20000ce0:	68f9      	ldr	r1, [r7, #12]
20000ce2:	f102 0206 	add.w	r2, r2, #6
20000ce6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20000cea:	440a      	add	r2, r1
20000cec:	6053      	str	r3, [r2, #4]
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
20000cee:	7afb      	ldrb	r3, [r7, #11]
20000cf0:	68fa      	ldr	r2, [r7, #12]
20000cf2:	f103 0306 	add.w	r3, r3, #6
20000cf6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000cfa:	4413      	add	r3, r2
20000cfc:	7e3a      	ldrb	r2, [r7, #24]
20000cfe:	721a      	strb	r2, [r3, #8]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
20000d00:	7afb      	ldrb	r3, [r7, #11]
20000d02:	68fa      	ldr	r2, [r7, #12]
20000d04:	f103 0306 	add.w	r3, r3, #6
20000d08:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000d0c:	4413      	add	r3, r2
20000d0e:	78fa      	ldrb	r2, [r7, #3]
20000d10:	725a      	strb	r2, [r3, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20000d12:	68fb      	ldr	r3, [r7, #12]
20000d14:	889b      	ldrh	r3, [r3, #4]
20000d16:	b21b      	sxth	r3, r3
20000d18:	4618      	mov	r0, r3
20000d1a:	f7ff fdd3 	bl	200008c4 <NVIC_EnableIRQ>
}
20000d1e:	f107 0710 	add.w	r7, r7, #16
20000d22:	46bd      	mov	sp, r7
20000d24:	bd80      	pop	{r7, pc}
20000d26:	bf00      	nop

20000d28 <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20000d28:	b580      	push	{r7, lr}
20000d2a:	b084      	sub	sp, #16
20000d2c:	af00      	add	r7, sp, #0
20000d2e:	6078      	str	r0, [r7, #4]
20000d30:	460b      	mov	r3, r1
20000d32:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000d34:	687a      	ldr	r2, [r7, #4]
20000d36:	f242 7388 	movw	r3, #10120	; 0x2788
20000d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d3e:	429a      	cmp	r2, r3
20000d40:	d007      	beq.n	20000d52 <MSS_SPI_set_slave_select+0x2a>
20000d42:	687a      	ldr	r2, [r7, #4]
20000d44:	f242 7304 	movw	r3, #9988	; 0x2704
20000d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d4c:	429a      	cmp	r2, r3
20000d4e:	d000      	beq.n	20000d52 <MSS_SPI_set_slave_select+0x2a>
20000d50:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20000d52:	687b      	ldr	r3, [r7, #4]
20000d54:	681b      	ldr	r3, [r3, #0]
20000d56:	681b      	ldr	r3, [r3, #0]
20000d58:	f003 0302 	and.w	r3, r3, #2
20000d5c:	2b00      	cmp	r3, #0
20000d5e:	d100      	bne.n	20000d62 <MSS_SPI_set_slave_select+0x3a>
20000d60:	be00      	bkpt	0x0000
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
20000d62:	78fb      	ldrb	r3, [r7, #3]
20000d64:	687a      	ldr	r2, [r7, #4]
20000d66:	f103 0306 	add.w	r3, r3, #6
20000d6a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000d6e:	4413      	add	r3, r2
20000d70:	685b      	ldr	r3, [r3, #4]
20000d72:	f1b3 3fff 	cmp.w	r3, #4294967295
20000d76:	d100      	bne.n	20000d7a <MSS_SPI_set_slave_select+0x52>
20000d78:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20000d7a:	687b      	ldr	r3, [r7, #4]
20000d7c:	889b      	ldrh	r3, [r3, #4]
20000d7e:	b21b      	sxth	r3, r3
20000d80:	4618      	mov	r0, r3
20000d82:	f7ff fdbb 	bl	200008fc <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20000d86:	687b      	ldr	r3, [r7, #4]
20000d88:	681b      	ldr	r3, [r3, #0]
20000d8a:	689b      	ldr	r3, [r3, #8]
20000d8c:	f003 0304 	and.w	r3, r3, #4
20000d90:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
20000d92:	68fb      	ldr	r3, [r7, #12]
20000d94:	2b00      	cmp	r3, #0
20000d96:	d002      	beq.n	20000d9e <MSS_SPI_set_slave_select+0x76>
    {
         recover_from_rx_overflow(this_spi);
20000d98:	6878      	ldr	r0, [r7, #4]
20000d9a:	f7ff fe85 	bl	20000aa8 <recover_from_rx_overflow>
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
20000d9e:	687b      	ldr	r3, [r7, #4]
20000da0:	681b      	ldr	r3, [r3, #0]
20000da2:	687a      	ldr	r2, [r7, #4]
20000da4:	6812      	ldr	r2, [r2, #0]
20000da6:	6812      	ldr	r2, [r2, #0]
20000da8:	f022 0201 	bic.w	r2, r2, #1
20000dac:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
20000dae:	687b      	ldr	r3, [r7, #4]
20000db0:	681a      	ldr	r2, [r3, #0]
20000db2:	78fb      	ldrb	r3, [r7, #3]
20000db4:	6879      	ldr	r1, [r7, #4]
20000db6:	f103 0306 	add.w	r3, r3, #6
20000dba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000dbe:	440b      	add	r3, r1
20000dc0:	685b      	ldr	r3, [r3, #4]
20000dc2:	6013      	str	r3, [r2, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
20000dc4:	687b      	ldr	r3, [r7, #4]
20000dc6:	681a      	ldr	r2, [r3, #0]
20000dc8:	78fb      	ldrb	r3, [r7, #3]
20000dca:	6879      	ldr	r1, [r7, #4]
20000dcc:	f103 0306 	add.w	r3, r3, #6
20000dd0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000dd4:	440b      	add	r3, r1
20000dd6:	7a5b      	ldrb	r3, [r3, #9]
20000dd8:	6193      	str	r3, [r2, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
20000dda:	687b      	ldr	r3, [r7, #4]
20000ddc:	681a      	ldr	r2, [r3, #0]
20000dde:	78fb      	ldrb	r3, [r7, #3]
20000de0:	6879      	ldr	r1, [r7, #4]
20000de2:	f103 0306 	add.w	r3, r3, #6
20000de6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000dea:	440b      	add	r3, r1
20000dec:	7a1b      	ldrb	r3, [r3, #8]
20000dee:	6053      	str	r3, [r2, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20000df0:	687b      	ldr	r3, [r7, #4]
20000df2:	681b      	ldr	r3, [r3, #0]
20000df4:	687a      	ldr	r2, [r7, #4]
20000df6:	6812      	ldr	r2, [r2, #0]
20000df8:	6812      	ldr	r2, [r2, #0]
20000dfa:	f042 0201 	orr.w	r2, r2, #1
20000dfe:	601a      	str	r2, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
20000e00:	687b      	ldr	r3, [r7, #4]
20000e02:	681b      	ldr	r3, [r3, #0]
20000e04:	687a      	ldr	r2, [r7, #4]
20000e06:	6812      	ldr	r2, [r2, #0]
20000e08:	69d1      	ldr	r1, [r2, #28]
20000e0a:	78fa      	ldrb	r2, [r7, #3]
20000e0c:	f04f 0001 	mov.w	r0, #1
20000e10:	fa00 f202 	lsl.w	r2, r0, r2
20000e14:	ea41 0202 	orr.w	r2, r1, r2
20000e18:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20000e1a:	687b      	ldr	r3, [r7, #4]
20000e1c:	889b      	ldrh	r3, [r3, #4]
20000e1e:	b21b      	sxth	r3, r3
20000e20:	4618      	mov	r0, r3
20000e22:	f7ff fd4f 	bl	200008c4 <NVIC_EnableIRQ>
}
20000e26:	f107 0710 	add.w	r7, r7, #16
20000e2a:	46bd      	mov	sp, r7
20000e2c:	bd80      	pop	{r7, pc}
20000e2e:	bf00      	nop

20000e30 <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20000e30:	b580      	push	{r7, lr}
20000e32:	b084      	sub	sp, #16
20000e34:	af00      	add	r7, sp, #0
20000e36:	6078      	str	r0, [r7, #4]
20000e38:	460b      	mov	r3, r1
20000e3a:	70fb      	strb	r3, [r7, #3]
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000e3c:	687a      	ldr	r2, [r7, #4]
20000e3e:	f242 7388 	movw	r3, #10120	; 0x2788
20000e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e46:	429a      	cmp	r2, r3
20000e48:	d007      	beq.n	20000e5a <MSS_SPI_clear_slave_select+0x2a>
20000e4a:	687a      	ldr	r2, [r7, #4]
20000e4c:	f242 7304 	movw	r3, #9988	; 0x2704
20000e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e54:	429a      	cmp	r2, r3
20000e56:	d000      	beq.n	20000e5a <MSS_SPI_clear_slave_select+0x2a>
20000e58:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20000e5a:	687b      	ldr	r3, [r7, #4]
20000e5c:	681b      	ldr	r3, [r3, #0]
20000e5e:	681b      	ldr	r3, [r3, #0]
20000e60:	f003 0302 	and.w	r3, r3, #2
20000e64:	2b00      	cmp	r3, #0
20000e66:	d100      	bne.n	20000e6a <MSS_SPI_clear_slave_select+0x3a>
20000e68:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20000e6a:	687b      	ldr	r3, [r7, #4]
20000e6c:	889b      	ldrh	r3, [r3, #4]
20000e6e:	b21b      	sxth	r3, r3
20000e70:	4618      	mov	r0, r3
20000e72:	f7ff fd43 	bl	200008fc <NVIC_DisableIRQ>

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20000e76:	687b      	ldr	r3, [r7, #4]
20000e78:	681b      	ldr	r3, [r3, #0]
20000e7a:	689b      	ldr	r3, [r3, #8]
20000e7c:	f003 0304 	and.w	r3, r3, #4
20000e80:	60fb      	str	r3, [r7, #12]
    if(rx_overflow)
20000e82:	68fb      	ldr	r3, [r7, #12]
20000e84:	2b00      	cmp	r3, #0
20000e86:	d002      	beq.n	20000e8e <MSS_SPI_clear_slave_select+0x5e>
    {
         recover_from_rx_overflow(this_spi);
20000e88:	6878      	ldr	r0, [r7, #4]
20000e8a:	f7ff fe0d 	bl	20000aa8 <recover_from_rx_overflow>
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
20000e8e:	687b      	ldr	r3, [r7, #4]
20000e90:	681b      	ldr	r3, [r3, #0]
20000e92:	687a      	ldr	r2, [r7, #4]
20000e94:	6812      	ldr	r2, [r2, #0]
20000e96:	69d1      	ldr	r1, [r2, #28]
20000e98:	78fa      	ldrb	r2, [r7, #3]
20000e9a:	f04f 0001 	mov.w	r0, #1
20000e9e:	fa00 f202 	lsl.w	r2, r0, r2
20000ea2:	ea6f 0202 	mvn.w	r2, r2
20000ea6:	ea01 0202 	and.w	r2, r1, r2
20000eaa:	61da      	str	r2, [r3, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20000eac:	687b      	ldr	r3, [r7, #4]
20000eae:	889b      	ldrh	r3, [r3, #4]
20000eb0:	b21b      	sxth	r3, r3
20000eb2:	4618      	mov	r0, r3
20000eb4:	f7ff fd06 	bl	200008c4 <NVIC_EnableIRQ>
}
20000eb8:	f107 0710 	add.w	r7, r7, #16
20000ebc:	46bd      	mov	sp, r7
20000ebe:	bd80      	pop	{r7, pc}

20000ec0 <MSS_SPI_transfer_frame>:
uint32_t MSS_SPI_transfer_frame
(
    mss_spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
20000ec0:	b480      	push	{r7}
20000ec2:	b087      	sub	sp, #28
20000ec4:	af00      	add	r7, sp, #0
20000ec6:	6078      	str	r0, [r7, #4]
20000ec8:	6039      	str	r1, [r7, #0]
    volatile uint32_t dummy;
    uint32_t rx_fifo_empty;
    uint32_t rx_ready;
    uint32_t tx_done;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20000eca:	687a      	ldr	r2, [r7, #4]
20000ecc:	f242 7388 	movw	r3, #10120	; 0x2788
20000ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ed4:	429a      	cmp	r2, r3
20000ed6:	d007      	beq.n	20000ee8 <MSS_SPI_transfer_frame+0x28>
20000ed8:	687a      	ldr	r2, [r7, #4]
20000eda:	f242 7304 	movw	r3, #9988	; 0x2704
20000ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ee2:	429a      	cmp	r2, r3
20000ee4:	d000      	beq.n	20000ee8 <MSS_SPI_transfer_frame+0x28>
20000ee6:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20000ee8:	687b      	ldr	r3, [r7, #4]
20000eea:	681b      	ldr	r3, [r3, #0]
20000eec:	681b      	ldr	r3, [r3, #0]
20000eee:	f003 0302 	and.w	r3, r3, #2
20000ef2:	2b00      	cmp	r3, #0
20000ef4:	d100      	bne.n	20000ef8 <MSS_SPI_transfer_frame+0x38>
20000ef6:	be00      	bkpt	0x0000
    
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
20000ef8:	687b      	ldr	r3, [r7, #4]
20000efa:	681a      	ldr	r2, [r3, #0]
20000efc:	687b      	ldr	r3, [r7, #4]
20000efe:	681b      	ldr	r3, [r3, #0]
20000f00:	6819      	ldr	r1, [r3, #0]
20000f02:	f240 03ff 	movw	r3, #255	; 0xff
20000f06:	f6cf 7300 	movt	r3, #65280	; 0xff00
20000f0a:	ea01 0303 	and.w	r3, r1, r3
20000f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20000f12:	6013      	str	r3, [r2, #0]
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20000f14:	687b      	ldr	r3, [r7, #4]
20000f16:	681b      	ldr	r3, [r3, #0]
20000f18:	687a      	ldr	r2, [r7, #4]
20000f1a:	6812      	ldr	r2, [r2, #0]
20000f1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20000f1e:	f042 020c 	orr.w	r2, r2, #12
20000f22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20000f24:	687b      	ldr	r3, [r7, #4]
20000f26:	681b      	ldr	r3, [r3, #0]
20000f28:	689b      	ldr	r3, [r3, #8]
20000f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000f2e:	60fb      	str	r3, [r7, #12]
    while(0u == rx_fifo_empty)
20000f30:	e00b      	b.n	20000f4a <MSS_SPI_transfer_frame+0x8a>
    {
        dummy = this_spi->hw_reg->RX_DATA;
20000f32:	687b      	ldr	r3, [r7, #4]
20000f34:	681b      	ldr	r3, [r3, #0]
20000f36:	691b      	ldr	r3, [r3, #16]
20000f38:	60bb      	str	r3, [r7, #8]
        dummy = dummy;  /* Prevent Lint warning. */
20000f3a:	68bb      	ldr	r3, [r7, #8]
20000f3c:	60bb      	str	r3, [r7, #8]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
20000f3e:	687b      	ldr	r3, [r7, #4]
20000f40:	681b      	ldr	r3, [r3, #0]
20000f42:	689b      	ldr	r3, [r3, #8]
20000f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000f48:	60fb      	str	r3, [r7, #12]
    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
20000f4a:	68fb      	ldr	r3, [r7, #12]
20000f4c:	2b00      	cmp	r3, #0
20000f4e:	d0f0      	beq.n	20000f32 <MSS_SPI_transfer_frame+0x72>
        dummy = dummy;  /* Prevent Lint warning. */
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
20000f50:	687b      	ldr	r3, [r7, #4]
20000f52:	681b      	ldr	r3, [r3, #0]
20000f54:	683a      	ldr	r2, [r7, #0]
20000f56:	615a      	str	r2, [r3, #20]
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20000f58:	687b      	ldr	r3, [r7, #4]
20000f5a:	681b      	ldr	r3, [r3, #0]
20000f5c:	689b      	ldr	r3, [r3, #8]
20000f5e:	f003 0301 	and.w	r3, r3, #1
20000f62:	617b      	str	r3, [r7, #20]
    while(0u == tx_done)
20000f64:	e005      	b.n	20000f72 <MSS_SPI_transfer_frame+0xb2>
    {
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20000f66:	687b      	ldr	r3, [r7, #4]
20000f68:	681b      	ldr	r3, [r3, #0]
20000f6a:	689b      	ldr	r3, [r3, #8]
20000f6c:	f003 0301 	and.w	r3, r3, #1
20000f70:	617b      	str	r3, [r7, #20]
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    while(0u == tx_done)
20000f72:	697b      	ldr	r3, [r7, #20]
20000f74:	2b00      	cmp	r3, #0
20000f76:	d0f6      	beq.n	20000f66 <MSS_SPI_transfer_frame+0xa6>
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20000f78:	687b      	ldr	r3, [r7, #4]
20000f7a:	681b      	ldr	r3, [r3, #0]
20000f7c:	689b      	ldr	r3, [r3, #8]
20000f7e:	f003 0302 	and.w	r3, r3, #2
20000f82:	613b      	str	r3, [r7, #16]
    while(0u == rx_ready)
20000f84:	e005      	b.n	20000f92 <MSS_SPI_transfer_frame+0xd2>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20000f86:	687b      	ldr	r3, [r7, #4]
20000f88:	681b      	ldr	r3, [r3, #0]
20000f8a:	689b      	ldr	r3, [r3, #8]
20000f8c:	f003 0302 	and.w	r3, r3, #2
20000f90:	613b      	str	r3, [r7, #16]
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    while(0u == rx_ready)
20000f92:	693b      	ldr	r3, [r7, #16]
20000f94:	2b00      	cmp	r3, #0
20000f96:	d0f6      	beq.n	20000f86 <MSS_SPI_transfer_frame+0xc6>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    }
    /* Return Rx data. */
    return( this_spi->hw_reg->RX_DATA );
20000f98:	687b      	ldr	r3, [r7, #4]
20000f9a:	681b      	ldr	r3, [r3, #0]
20000f9c:	691b      	ldr	r3, [r3, #16]
}
20000f9e:	4618      	mov	r0, r3
20000fa0:	f107 071c 	add.w	r7, r7, #28
20000fa4:	46bd      	mov	sp, r7
20000fa6:	bc80      	pop	{r7}
20000fa8:	4770      	bx	lr
20000faa:	bf00      	nop

20000fac <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20000fac:	b480      	push	{r7}
20000fae:	b085      	sub	sp, #20
20000fb0:	af00      	add	r7, sp, #0
20000fb2:	6078      	str	r0, [r7, #4]
    uint32_t guard = 0u;
20000fb4:	f04f 0300 	mov.w	r3, #0
20000fb8:	60fb      	str	r3, [r7, #12]

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000fba:	e00e      	b.n	20000fda <fill_slave_tx_fifo+0x2e>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
20000fbc:	687b      	ldr	r3, [r7, #4]
20000fbe:	681b      	ldr	r3, [r3, #0]
20000fc0:	687a      	ldr	r2, [r7, #4]
20000fc2:	6891      	ldr	r1, [r2, #8]
20000fc4:	687a      	ldr	r2, [r7, #4]
20000fc6:	6912      	ldr	r2, [r2, #16]
20000fc8:	440a      	add	r2, r1
20000fca:	7812      	ldrb	r2, [r2, #0]
20000fcc:	615a      	str	r2, [r3, #20]
        ++this_spi->slave_tx_idx;
20000fce:	687b      	ldr	r3, [r7, #4]
20000fd0:	691b      	ldr	r3, [r3, #16]
20000fd2:	f103 0201 	add.w	r2, r3, #1
20000fd6:	687b      	ldr	r3, [r7, #4]
20000fd8:	611a      	str	r2, [r3, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000fda:	687b      	ldr	r3, [r7, #4]
20000fdc:	681b      	ldr	r3, [r3, #0]
20000fde:	689b      	ldr	r3, [r3, #8]
20000fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
20000fe4:	2b00      	cmp	r3, #0
20000fe6:	d105      	bne.n	20000ff4 <fill_slave_tx_fifo+0x48>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20000fe8:	687b      	ldr	r3, [r7, #4]
20000fea:	691a      	ldr	r2, [r3, #16]
20000fec:	687b      	ldr	r3, [r7, #4]
20000fee:	68db      	ldr	r3, [r3, #12]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20000ff0:	429a      	cmp	r2, r3
20000ff2:	d3e3      	bcc.n	20000fbc <fill_slave_tx_fifo+0x10>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
20000ff4:	687b      	ldr	r3, [r7, #4]
20000ff6:	691a      	ldr	r2, [r3, #16]
20000ff8:	687b      	ldr	r3, [r7, #4]
20000ffa:	68db      	ldr	r3, [r3, #12]
20000ffc:	429a      	cmp	r2, r3
20000ffe:	d31c      	bcc.n	2000103a <fill_slave_tx_fifo+0x8e>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001000:	e00e      	b.n	20001020 <fill_slave_tx_fifo+0x74>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
20001002:	687b      	ldr	r3, [r7, #4]
20001004:	681b      	ldr	r3, [r3, #0]
20001006:	687a      	ldr	r2, [r7, #4]
20001008:	6951      	ldr	r1, [r2, #20]
2000100a:	687a      	ldr	r2, [r7, #4]
2000100c:	69d2      	ldr	r2, [r2, #28]
2000100e:	440a      	add	r2, r1
20001010:	7812      	ldrb	r2, [r2, #0]
20001012:	615a      	str	r2, [r3, #20]
            ++this_spi->resp_buff_tx_idx;
20001014:	687b      	ldr	r3, [r7, #4]
20001016:	69db      	ldr	r3, [r3, #28]
20001018:	f103 0201 	add.w	r2, r3, #1
2000101c:	687b      	ldr	r3, [r7, #4]
2000101e:	61da      	str	r2, [r3, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001020:	687b      	ldr	r3, [r7, #4]
20001022:	681b      	ldr	r3, [r3, #0]
20001024:	689b      	ldr	r3, [r3, #8]
20001026:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000102a:	2b00      	cmp	r3, #0
2000102c:	d105      	bne.n	2000103a <fill_slave_tx_fifo+0x8e>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
2000102e:	687b      	ldr	r3, [r7, #4]
20001030:	69da      	ldr	r2, [r3, #28]
20001032:	687b      	ldr	r3, [r7, #4]
20001034:	699b      	ldr	r3, [r3, #24]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001036:	429a      	cmp	r2, r3
20001038:	d3e3      	bcc.n	20001002 <fill_slave_tx_fifo+0x56>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
2000103a:	687b      	ldr	r3, [r7, #4]
2000103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000103e:	2b00      	cmp	r3, #0
20001040:	d01f      	beq.n	20001082 <fill_slave_tx_fifo+0xd6>
20001042:	687b      	ldr	r3, [r7, #4]
20001044:	691a      	ldr	r2, [r3, #16]
20001046:	687b      	ldr	r3, [r7, #4]
20001048:	68db      	ldr	r3, [r3, #12]
2000104a:	429a      	cmp	r2, r3
2000104c:	d319      	bcc.n	20001082 <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
2000104e:	687b      	ldr	r3, [r7, #4]
20001050:	69da      	ldr	r2, [r3, #28]
20001052:	687b      	ldr	r3, [r7, #4]
20001054:	699b      	ldr	r3, [r3, #24]
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
20001056:	429a      	cmp	r2, r3
20001058:	d313      	bcc.n	20001082 <fill_slave_tx_fifo+0xd6>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000105a:	e008      	b.n	2000106e <fill_slave_tx_fifo+0xc2>
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
2000105c:	687b      	ldr	r3, [r7, #4]
2000105e:	681b      	ldr	r3, [r3, #0]
20001060:	f04f 0200 	mov.w	r2, #0
20001064:	615a      	str	r2, [r3, #20]
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
20001066:	68fb      	ldr	r3, [r7, #12]
20001068:	f103 0301 	add.w	r3, r3, #1
2000106c:	60fb      	str	r3, [r7, #12]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
2000106e:	687b      	ldr	r3, [r7, #4]
20001070:	681b      	ldr	r3, [r3, #0]
20001072:	689b      	ldr	r3, [r3, #8]
20001074:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001078:	2b00      	cmp	r3, #0
2000107a:	d102      	bne.n	20001082 <fill_slave_tx_fifo+0xd6>
2000107c:	68fb      	ldr	r3, [r7, #12]
2000107e:	2b1f      	cmp	r3, #31
20001080:	d9ec      	bls.n	2000105c <fill_slave_tx_fifo+0xb0>
             */
            guard++;
        }
    }

}
20001082:	f107 0714 	add.w	r7, r7, #20
20001086:	46bd      	mov	sp, r7
20001088:	bc80      	pop	{r7}
2000108a:	4770      	bx	lr

2000108c <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
2000108c:	b580      	push	{r7, lr}
2000108e:	b084      	sub	sp, #16
20001090:	af00      	add	r7, sp, #0
20001092:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001094:	687b      	ldr	r3, [r7, #4]
20001096:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000109a:	2b02      	cmp	r3, #2
2000109c:	d115      	bne.n	200010ca <read_slave_rx_fifo+0x3e>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000109e:	e00c      	b.n	200010ba <read_slave_rx_fifo+0x2e>
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
200010a0:	687b      	ldr	r3, [r7, #4]
200010a2:	681b      	ldr	r3, [r3, #0]
200010a4:	691b      	ldr	r3, [r3, #16]
200010a6:	60fb      	str	r3, [r7, #12]
            if(0u != this_spi->frame_rx_handler)
200010a8:	687b      	ldr	r3, [r7, #4]
200010aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200010ac:	2b00      	cmp	r3, #0
200010ae:	d004      	beq.n	200010ba <read_slave_rx_fifo+0x2e>
            {
                this_spi->frame_rx_handler( rx_frame );
200010b0:	687b      	ldr	r3, [r7, #4]
200010b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
200010b4:	68fa      	ldr	r2, [r7, #12]
200010b6:	4610      	mov	r0, r2
200010b8:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200010ba:	687b      	ldr	r3, [r7, #4]
200010bc:	681b      	ldr	r3, [r3, #0]
200010be:	689b      	ldr	r3, [r3, #8]
200010c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200010c4:	2b00      	cmp	r3, #0
200010c6:	d0eb      	beq.n	200010a0 <read_slave_rx_fifo+0x14>
200010c8:	e032      	b.n	20001130 <read_slave_rx_fifo+0xa4>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
200010ca:	687b      	ldr	r3, [r7, #4]
200010cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200010d0:	2b01      	cmp	r3, #1
200010d2:	d125      	bne.n	20001120 <read_slave_rx_fifo+0x94>
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200010d4:	e017      	b.n	20001106 <read_slave_rx_fifo+0x7a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
200010d6:	687b      	ldr	r3, [r7, #4]
200010d8:	681b      	ldr	r3, [r3, #0]
200010da:	691b      	ldr	r3, [r3, #16]
200010dc:	60fb      	str	r3, [r7, #12]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
200010de:	687b      	ldr	r3, [r7, #4]
200010e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200010e2:	687b      	ldr	r3, [r7, #4]
200010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200010e6:	429a      	cmp	r2, r3
200010e8:	d207      	bcs.n	200010fa <read_slave_rx_fifo+0x6e>
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
200010ea:	687b      	ldr	r3, [r7, #4]
200010ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
200010ee:	687b      	ldr	r3, [r7, #4]
200010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200010f2:	4413      	add	r3, r2
200010f4:	68fa      	ldr	r2, [r7, #12]
200010f6:	b2d2      	uxtb	r2, r2
200010f8:	701a      	strb	r2, [r3, #0]
            }

            ++this_spi->slave_rx_idx;
200010fa:	687b      	ldr	r3, [r7, #4]
200010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200010fe:	f103 0201 	add.w	r2, r3, #1
20001102:	687b      	ldr	r3, [r7, #4]
20001104:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001106:	687b      	ldr	r3, [r7, #4]
20001108:	681b      	ldr	r3, [r3, #0]
2000110a:	689b      	ldr	r3, [r3, #8]
2000110c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001110:	2b00      	cmp	r3, #0
20001112:	d0e0      	beq.n	200010d6 <read_slave_rx_fifo+0x4a>
20001114:	e00c      	b.n	20001130 <read_slave_rx_fifo+0xa4>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
20001116:	687b      	ldr	r3, [r7, #4]
20001118:	681b      	ldr	r3, [r3, #0]
2000111a:	691b      	ldr	r3, [r3, #16]
2000111c:	60fb      	str	r3, [r7, #12]
2000111e:	e000      	b.n	20001122 <read_slave_rx_fifo+0x96>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001120:	bf00      	nop
20001122:	687b      	ldr	r3, [r7, #4]
20001124:	681b      	ldr	r3, [r3, #0]
20001126:	689b      	ldr	r3, [r3, #8]
20001128:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000112c:	2b00      	cmp	r3, #0
2000112e:	d0f2      	beq.n	20001116 <read_slave_rx_fifo+0x8a>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
20001130:	f107 0710 	add.w	r7, r7, #16
20001134:	46bd      	mov	sp, r7
20001136:	bd80      	pop	{r7, pc}

20001138 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
20001138:	b580      	push	{r7, lr}
2000113a:	b086      	sub	sp, #24
2000113c:	af00      	add	r7, sp, #0
2000113e:	6078      	str	r0, [r7, #4]
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
20001140:	687b      	ldr	r3, [r7, #4]
20001142:	681b      	ldr	r3, [r3, #0]
20001144:	f103 0320 	add.w	r3, r3, #32
20001148:	613b      	str	r3, [r7, #16]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
2000114a:	687a      	ldr	r2, [r7, #4]
2000114c:	f242 7388 	movw	r3, #10120	; 0x2788
20001150:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001154:	429a      	cmp	r2, r3
20001156:	d007      	beq.n	20001168 <mss_spi_isr+0x30>
20001158:	687a      	ldr	r2, [r7, #4]
2000115a:	f242 7304 	movw	r3, #9988	; 0x2704
2000115e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001162:	429a      	cmp	r2, r3
20001164:	d000      	beq.n	20001168 <mss_spi_isr+0x30>
20001166:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
20001168:	693b      	ldr	r3, [r7, #16]
2000116a:	681b      	ldr	r3, [r3, #0]
2000116c:	f003 0302 	and.w	r3, r3, #2
20001170:	2b00      	cmp	r3, #0
20001172:	d052      	beq.n	2000121a <mss_spi_isr+0xe2>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001174:	687b      	ldr	r3, [r7, #4]
20001176:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000117a:	2b02      	cmp	r3, #2
2000117c:	d115      	bne.n	200011aa <mss_spi_isr+0x72>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000117e:	e00c      	b.n	2000119a <mss_spi_isr+0x62>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
20001180:	687b      	ldr	r3, [r7, #4]
20001182:	681b      	ldr	r3, [r3, #0]
20001184:	691b      	ldr	r3, [r3, #16]
20001186:	60fb      	str	r3, [r7, #12]
                if(0u != this_spi->frame_rx_handler)
20001188:	687b      	ldr	r3, [r7, #4]
2000118a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000118c:	2b00      	cmp	r3, #0
2000118e:	d004      	beq.n	2000119a <mss_spi_isr+0x62>
                {
                    this_spi->frame_rx_handler( rx_frame );
20001190:	687b      	ldr	r3, [r7, #4]
20001192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20001194:	68fa      	ldr	r2, [r7, #12]
20001196:	4610      	mov	r0, r2
20001198:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000119a:	687b      	ldr	r3, [r7, #4]
2000119c:	681b      	ldr	r3, [r3, #0]
2000119e:	689b      	ldr	r3, [r3, #8]
200011a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200011a4:	2b00      	cmp	r3, #0
200011a6:	d0eb      	beq.n	20001180 <mss_spi_isr+0x48>
200011a8:	e032      	b.n	20001210 <mss_spi_isr+0xd8>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
200011aa:	687b      	ldr	r3, [r7, #4]
200011ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200011b0:	2b01      	cmp	r3, #1
200011b2:	d125      	bne.n	20001200 <mss_spi_isr+0xc8>
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200011b4:	e017      	b.n	200011e6 <mss_spi_isr+0xae>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
200011b6:	687b      	ldr	r3, [r7, #4]
200011b8:	681b      	ldr	r3, [r3, #0]
200011ba:	691b      	ldr	r3, [r3, #16]
200011bc:	60fb      	str	r3, [r7, #12]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
200011be:	687b      	ldr	r3, [r7, #4]
200011c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200011c2:	687b      	ldr	r3, [r7, #4]
200011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200011c6:	429a      	cmp	r2, r3
200011c8:	d207      	bcs.n	200011da <mss_spi_isr+0xa2>
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
200011ca:	687b      	ldr	r3, [r7, #4]
200011cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
200011ce:	687b      	ldr	r3, [r7, #4]
200011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200011d2:	4413      	add	r3, r2
200011d4:	68fa      	ldr	r2, [r7, #12]
200011d6:	b2d2      	uxtb	r2, r2
200011d8:	701a      	strb	r2, [r3, #0]
                }

                ++this_spi->slave_rx_idx;            
200011da:	687b      	ldr	r3, [r7, #4]
200011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200011de:	f103 0201 	add.w	r2, r3, #1
200011e2:	687b      	ldr	r3, [r7, #4]
200011e4:	631a      	str	r2, [r3, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200011e6:	687b      	ldr	r3, [r7, #4]
200011e8:	681b      	ldr	r3, [r3, #0]
200011ea:	689b      	ldr	r3, [r3, #8]
200011ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
200011f0:	2b00      	cmp	r3, #0
200011f2:	d0e0      	beq.n	200011b6 <mss_spi_isr+0x7e>
200011f4:	e00c      	b.n	20001210 <mss_spi_isr+0xd8>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
200011f6:	687b      	ldr	r3, [r7, #4]
200011f8:	681b      	ldr	r3, [r3, #0]
200011fa:	691b      	ldr	r3, [r3, #16]
200011fc:	60fb      	str	r3, [r7, #12]
200011fe:	e000      	b.n	20001202 <mss_spi_isr+0xca>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001200:	bf00      	nop
20001202:	687b      	ldr	r3, [r7, #4]
20001204:	681b      	ldr	r3, [r3, #0]
20001206:	689b      	ldr	r3, [r3, #8]
20001208:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000120c:	2b00      	cmp	r3, #0
2000120e:	d0f2      	beq.n	200011f6 <mss_spi_isr+0xbe>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
20001210:	687b      	ldr	r3, [r7, #4]
20001212:	681b      	ldr	r3, [r3, #0]
20001214:	f04f 0202 	mov.w	r2, #2
20001218:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
2000121a:	693b      	ldr	r3, [r7, #16]
2000121c:	681b      	ldr	r3, [r3, #0]
2000121e:	f003 0301 	and.w	r3, r3, #1
20001222:	b2db      	uxtb	r3, r3
20001224:	2b00      	cmp	r3, #0
20001226:	d012      	beq.n	2000124e <mss_spi_isr+0x116>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20001228:	687b      	ldr	r3, [r7, #4]
2000122a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
2000122e:	2b02      	cmp	r3, #2
20001230:	d105      	bne.n	2000123e <mss_spi_isr+0x106>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
20001232:	687b      	ldr	r3, [r7, #4]
20001234:	681b      	ldr	r3, [r3, #0]
20001236:	687a      	ldr	r2, [r7, #4]
20001238:	6f92      	ldr	r2, [r2, #120]	; 0x78
2000123a:	615a      	str	r2, [r3, #20]
2000123c:	e002      	b.n	20001244 <mss_spi_isr+0x10c>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
2000123e:	6878      	ldr	r0, [r7, #4]
20001240:	f7ff feb4 	bl	20000fac <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
20001244:	687b      	ldr	r3, [r7, #4]
20001246:	681b      	ldr	r3, [r3, #0]
20001248:	f04f 0201 	mov.w	r2, #1
2000124c:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
2000124e:	693b      	ldr	r3, [r7, #16]
20001250:	681b      	ldr	r3, [r3, #0]
20001252:	f003 0310 	and.w	r3, r3, #16
20001256:	2b00      	cmp	r3, #0
20001258:	d023      	beq.n	200012a2 <mss_spi_isr+0x16a>
    {
        read_slave_rx_fifo(this_spi);
2000125a:	6878      	ldr	r0, [r7, #4]
2000125c:	f7ff ff16 	bl	2000108c <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
20001260:	687b      	ldr	r3, [r7, #4]
20001262:	6a1b      	ldr	r3, [r3, #32]
20001264:	2b00      	cmp	r3, #0
20001266:	d00b      	beq.n	20001280 <mss_spi_isr+0x148>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
20001268:	687b      	ldr	r3, [r7, #4]
2000126a:	6a1b      	ldr	r3, [r3, #32]
2000126c:	687a      	ldr	r2, [r7, #4]
2000126e:	6a91      	ldr	r1, [r2, #40]	; 0x28
20001270:	687a      	ldr	r2, [r7, #4]
20001272:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001274:	4608      	mov	r0, r1
20001276:	4611      	mov	r1, r2
20001278:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
2000127a:	6878      	ldr	r0, [r7, #4]
2000127c:	f7ff fe96 	bl	20000fac <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
20001280:	687b      	ldr	r3, [r7, #4]
20001282:	f04f 0201 	mov.w	r2, #1
20001286:	625a      	str	r2, [r3, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
20001288:	687b      	ldr	r3, [r7, #4]
2000128a:	681b      	ldr	r3, [r3, #0]
2000128c:	687a      	ldr	r2, [r7, #4]
2000128e:	6812      	ldr	r2, [r2, #0]
20001290:	6a92      	ldr	r2, [r2, #40]	; 0x28
20001292:	f022 0210 	bic.w	r2, r2, #16
20001296:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20001298:	687b      	ldr	r3, [r7, #4]
2000129a:	681b      	ldr	r3, [r3, #0]
2000129c:	f04f 0210 	mov.w	r2, #16
200012a0:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
200012a2:	693b      	ldr	r3, [r7, #16]
200012a4:	681b      	ldr	r3, [r3, #0]
200012a6:	f003 0304 	and.w	r3, r3, #4
200012aa:	2b00      	cmp	r3, #0
200012ac:	d00f      	beq.n	200012ce <mss_spi_isr+0x196>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
200012ae:	687b      	ldr	r3, [r7, #4]
200012b0:	681b      	ldr	r3, [r3, #0]
200012b2:	687a      	ldr	r2, [r7, #4]
200012b4:	6812      	ldr	r2, [r2, #0]
200012b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200012b8:	f042 0204 	orr.w	r2, r2, #4
200012bc:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
200012be:	6878      	ldr	r0, [r7, #4]
200012c0:	f7ff fbf2 	bl	20000aa8 <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
200012c4:	687b      	ldr	r3, [r7, #4]
200012c6:	681b      	ldr	r3, [r3, #0]
200012c8:	f04f 0204 	mov.w	r2, #4
200012cc:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
200012ce:	693b      	ldr	r3, [r7, #16]
200012d0:	681b      	ldr	r3, [r3, #0]
200012d2:	f003 0308 	and.w	r3, r3, #8
200012d6:	2b00      	cmp	r3, #0
200012d8:	d031      	beq.n	2000133e <mss_spi_isr+0x206>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
200012da:	687b      	ldr	r3, [r7, #4]
200012dc:	681b      	ldr	r3, [r3, #0]
200012de:	687a      	ldr	r2, [r7, #4]
200012e0:	6812      	ldr	r2, [r2, #0]
200012e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200012e4:	f042 0208 	orr.w	r2, r2, #8
200012e8:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
200012ea:	687b      	ldr	r3, [r7, #4]
200012ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
200012f0:	2b02      	cmp	r3, #2
200012f2:	d113      	bne.n	2000131c <mss_spi_isr+0x1e4>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
200012f4:	687b      	ldr	r3, [r7, #4]
200012f6:	681a      	ldr	r2, [r3, #0]
200012f8:	687b      	ldr	r3, [r7, #4]
200012fa:	681b      	ldr	r3, [r3, #0]
200012fc:	6819      	ldr	r1, [r3, #0]
200012fe:	f240 03ff 	movw	r3, #255	; 0xff
20001302:	f6cf 7300 	movt	r3, #65280	; 0xff00
20001306:	ea01 0303 	and.w	r3, r1, r3
2000130a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000130e:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
20001310:	687b      	ldr	r3, [r7, #4]
20001312:	681b      	ldr	r3, [r3, #0]
20001314:	687a      	ldr	r2, [r7, #4]
20001316:	6f92      	ldr	r2, [r2, #120]	; 0x78
20001318:	615a      	str	r2, [r3, #20]
2000131a:	e00b      	b.n	20001334 <mss_spi_isr+0x1fc>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
2000131c:	687b      	ldr	r3, [r7, #4]
2000131e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
20001322:	2b01      	cmp	r3, #1
20001324:	d106      	bne.n	20001334 <mss_spi_isr+0x1fc>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
20001326:	687b      	ldr	r3, [r7, #4]
20001328:	f04f 0200 	mov.w	r2, #0
2000132c:	611a      	str	r2, [r3, #16]
            fill_slave_tx_fifo(this_spi);
2000132e:	6878      	ldr	r0, [r7, #4]
20001330:	f7ff fe3c 	bl	20000fac <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
20001334:	687b      	ldr	r3, [r7, #4]
20001336:	681b      	ldr	r3, [r3, #0]
20001338:	f04f 0208 	mov.w	r2, #8
2000133c:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
2000133e:	693b      	ldr	r3, [r7, #16]
20001340:	681b      	ldr	r3, [r3, #0]
20001342:	f003 0320 	and.w	r3, r3, #32
20001346:	2b00      	cmp	r3, #0
20001348:	d049      	beq.n	200013de <mss_spi_isr+0x2a6>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
2000134a:	6878      	ldr	r0, [r7, #4]
2000134c:	f7ff fe9e 	bl	2000108c <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
20001350:	687b      	ldr	r3, [r7, #4]
20001352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001354:	617b      	str	r3, [r7, #20]
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
20001356:	687b      	ldr	r3, [r7, #4]
20001358:	6a1b      	ldr	r3, [r3, #32]
2000135a:	2b00      	cmp	r3, #0
2000135c:	d01c      	beq.n	20001398 <mss_spi_isr+0x260>
        {
            this_spi->cmd_done = 0u;
2000135e:	687b      	ldr	r3, [r7, #4]
20001360:	f04f 0200 	mov.w	r2, #0
20001364:	625a      	str	r2, [r3, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
20001366:	687b      	ldr	r3, [r7, #4]
20001368:	f04f 0200 	mov.w	r2, #0
2000136c:	615a      	str	r2, [r3, #20]
            this_spi->resp_buff_size = 0u;
2000136e:	687b      	ldr	r3, [r7, #4]
20001370:	f04f 0200 	mov.w	r2, #0
20001374:	619a      	str	r2, [r3, #24]
            this_spi->resp_buff_tx_idx = 0u;
20001376:	687b      	ldr	r3, [r7, #4]
20001378:	f04f 0200 	mov.w	r2, #0
2000137c:	61da      	str	r2, [r3, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
2000137e:	687b      	ldr	r3, [r7, #4]
20001380:	681b      	ldr	r3, [r3, #0]
20001382:	f04f 0210 	mov.w	r2, #16
20001386:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
20001388:	687b      	ldr	r3, [r7, #4]
2000138a:	681b      	ldr	r3, [r3, #0]
2000138c:	687a      	ldr	r2, [r7, #4]
2000138e:	6812      	ldr	r2, [r2, #0]
20001390:	6a92      	ldr	r2, [r2, #40]	; 0x28
20001392:	f042 0210 	orr.w	r2, r2, #16
20001396:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
20001398:	687b      	ldr	r3, [r7, #4]
2000139a:	f04f 0200 	mov.w	r2, #0
2000139e:	611a      	str	r2, [r3, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
200013a0:	687b      	ldr	r3, [r7, #4]
200013a2:	681b      	ldr	r3, [r3, #0]
200013a4:	687a      	ldr	r2, [r7, #4]
200013a6:	6812      	ldr	r2, [r2, #0]
200013a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
200013aa:	f042 020c 	orr.w	r2, r2, #12
200013ae:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
200013b0:	6878      	ldr	r0, [r7, #4]
200013b2:	f7ff fdfb 	bl	20000fac <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
200013b6:	687b      	ldr	r3, [r7, #4]
200013b8:	f04f 0200 	mov.w	r2, #0
200013bc:	631a      	str	r2, [r3, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
200013be:	687b      	ldr	r3, [r7, #4]
200013c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
200013c2:	2b00      	cmp	r3, #0
200013c4:	d006      	beq.n	200013d4 <mss_spi_isr+0x29c>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
200013c6:	687b      	ldr	r3, [r7, #4]
200013c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
200013ca:	687a      	ldr	r2, [r7, #4]
200013cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
200013ce:	4610      	mov	r0, r2
200013d0:	6979      	ldr	r1, [r7, #20]
200013d2:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
200013d4:	687b      	ldr	r3, [r7, #4]
200013d6:	681b      	ldr	r3, [r3, #0]
200013d8:	f04f 0220 	mov.w	r2, #32
200013dc:	60da      	str	r2, [r3, #12]
    }
}
200013de:	f107 0718 	add.w	r7, r7, #24
200013e2:	46bd      	mov	sp, r7
200013e4:	bd80      	pop	{r7, pc}
200013e6:	bf00      	nop

200013e8 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
200013e8:	4668      	mov	r0, sp
200013ea:	f020 0107 	bic.w	r1, r0, #7
200013ee:	468d      	mov	sp, r1
200013f0:	b589      	push	{r0, r3, r7, lr}
200013f2:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi0);
200013f4:	f242 7088 	movw	r0, #10120	; 0x2788
200013f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200013fc:	f7ff fe9c 	bl	20001138 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI0_IRQn);
20001400:	f04f 000c 	mov.w	r0, #12
20001404:	f7ff fa98 	bl	20000938 <NVIC_ClearPendingIRQ>
}
20001408:	46bd      	mov	sp, r7
2000140a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000140e:	4685      	mov	sp, r0
20001410:	4770      	bx	lr
20001412:	bf00      	nop

20001414 <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
20001414:	4668      	mov	r0, sp
20001416:	f020 0107 	bic.w	r1, r0, #7
2000141a:	468d      	mov	sp, r1
2000141c:	b589      	push	{r0, r3, r7, lr}
2000141e:	af00      	add	r7, sp, #0
    mss_spi_isr(&g_mss_spi1);
20001420:	f242 7004 	movw	r0, #9988	; 0x2704
20001424:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001428:	f7ff fe86 	bl	20001138 <mss_spi_isr>
    NVIC_ClearPendingIRQ(SPI1_IRQn);
2000142c:	f04f 000d 	mov.w	r0, #13
20001430:	f7ff fa82 	bl	20000938 <NVIC_ClearPendingIRQ>
}
20001434:	46bd      	mov	sp, r7
20001436:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000143a:	4685      	mov	sp, r0
2000143c:	4770      	bx	lr
2000143e:	bf00      	nop

20001440 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20001440:	b480      	push	{r7}
20001442:	b083      	sub	sp, #12
20001444:	af00      	add	r7, sp, #0
20001446:	4603      	mov	r3, r0
20001448:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
2000144a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000144e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001452:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001456:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000145a:	88f9      	ldrh	r1, [r7, #6]
2000145c:	f001 011f 	and.w	r1, r1, #31
20001460:	f04f 0001 	mov.w	r0, #1
20001464:	fa00 f101 	lsl.w	r1, r0, r1
20001468:	f102 0220 	add.w	r2, r2, #32
2000146c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001470:	f107 070c 	add.w	r7, r7, #12
20001474:	46bd      	mov	sp, r7
20001476:	bc80      	pop	{r7}
20001478:	4770      	bx	lr
2000147a:	bf00      	nop

2000147c <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2000147c:	b480      	push	{r7}
2000147e:	b083      	sub	sp, #12
20001480:	af00      	add	r7, sp, #0
20001482:	4603      	mov	r3, r0
20001484:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001486:	f24e 1300 	movw	r3, #57600	; 0xe100
2000148a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000148e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001492:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001496:	88f9      	ldrh	r1, [r7, #6]
20001498:	f001 011f 	and.w	r1, r1, #31
2000149c:	f04f 0001 	mov.w	r0, #1
200014a0:	fa00 f101 	lsl.w	r1, r0, r1
200014a4:	f102 0260 	add.w	r2, r2, #96	; 0x60
200014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200014ac:	f107 070c 	add.w	r7, r7, #12
200014b0:	46bd      	mov	sp, r7
200014b2:	bc80      	pop	{r7}
200014b4:	4770      	bx	lr
200014b6:	bf00      	nop

200014b8 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
200014b8:	b480      	push	{r7}
200014ba:	b083      	sub	sp, #12
200014bc:	af00      	add	r7, sp, #0
200014be:	6078      	str	r0, [r7, #4]
    if( this_i2c->is_slave_enabled )
200014c0:	687b      	ldr	r3, [r7, #4]
200014c2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
200014c6:	2b00      	cmp	r3, #0
200014c8:	d004      	beq.n	200014d4 <enable_slave_if_required+0x1c>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
200014ca:	687b      	ldr	r3, [r7, #4]
200014cc:	699b      	ldr	r3, [r3, #24]
200014ce:	f04f 0201 	mov.w	r2, #1
200014d2:	609a      	str	r2, [r3, #8]
    }
}
200014d4:	f107 070c 	add.w	r7, r7, #12
200014d8:	46bd      	mov	sp, r7
200014da:	bc80      	pop	{r7}
200014dc:	4770      	bx	lr
200014de:	bf00      	nop

200014e0 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
200014e0:	b580      	push	{r7, lr}
200014e2:	b084      	sub	sp, #16
200014e4:	af00      	add	r7, sp, #0
200014e6:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
200014e8:	f04f 0301 	mov.w	r3, #1
200014ec:	73bb      	strb	r3, [r7, #14]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200014ee:	687a      	ldr	r2, [r7, #4]
200014f0:	f642 030c 	movw	r3, #10252	; 0x280c
200014f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014f8:	429a      	cmp	r2, r3
200014fa:	d007      	beq.n	2000150c <mss_i2c_isr+0x2c>
200014fc:	687a      	ldr	r2, [r7, #4]
200014fe:	f642 0380 	movw	r3, #10368	; 0x2880
20001502:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001506:	429a      	cmp	r2, r3
20001508:	d000      	beq.n	2000150c <mss_i2c_isr+0x2c>
2000150a:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
2000150c:	687b      	ldr	r3, [r7, #4]
2000150e:	695b      	ldr	r3, [r3, #20]
20001510:	791b      	ldrb	r3, [r3, #4]
20001512:	72fb      	strb	r3, [r7, #11]

    switch( status )
20001514:	7afb      	ldrb	r3, [r7, #11]
20001516:	b2db      	uxtb	r3, r3
20001518:	f1a3 0308 	sub.w	r3, r3, #8
2000151c:	2bd0      	cmp	r3, #208	; 0xd0
2000151e:	f200 841c 	bhi.w	20001d5a <mss_i2c_isr+0x87a>
20001522:	a201      	add	r2, pc, #4	; (adr r2, 20001528 <mss_i2c_isr+0x48>)
20001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001528:	2000186d 	.word	0x2000186d
2000152c:	20001d5b 	.word	0x20001d5b
20001530:	20001d5b 	.word	0x20001d5b
20001534:	20001d5b 	.word	0x20001d5b
20001538:	20001d5b 	.word	0x20001d5b
2000153c:	20001d5b 	.word	0x20001d5b
20001540:	20001d5b 	.word	0x20001d5b
20001544:	20001d5b 	.word	0x20001d5b
20001548:	2000186d 	.word	0x2000186d
2000154c:	20001d5b 	.word	0x20001d5b
20001550:	20001d5b 	.word	0x20001d5b
20001554:	20001d5b 	.word	0x20001d5b
20001558:	20001d5b 	.word	0x20001d5b
2000155c:	20001d5b 	.word	0x20001d5b
20001560:	20001d5b 	.word	0x20001d5b
20001564:	20001d5b 	.word	0x20001d5b
20001568:	20001911 	.word	0x20001911
2000156c:	20001d5b 	.word	0x20001d5b
20001570:	20001d5b 	.word	0x20001d5b
20001574:	20001d5b 	.word	0x20001d5b
20001578:	20001d5b 	.word	0x20001d5b
2000157c:	20001d5b 	.word	0x20001d5b
20001580:	20001d5b 	.word	0x20001d5b
20001584:	20001d5b 	.word	0x20001d5b
20001588:	200018ed 	.word	0x200018ed
2000158c:	20001d5b 	.word	0x20001d5b
20001590:	20001d5b 	.word	0x20001d5b
20001594:	20001d5b 	.word	0x20001d5b
20001598:	20001d5b 	.word	0x20001d5b
2000159c:	20001d5b 	.word	0x20001d5b
200015a0:	20001d5b 	.word	0x20001d5b
200015a4:	20001d5b 	.word	0x20001d5b
200015a8:	20001911 	.word	0x20001911
200015ac:	20001d5b 	.word	0x20001d5b
200015b0:	20001d5b 	.word	0x20001d5b
200015b4:	20001d5b 	.word	0x20001d5b
200015b8:	20001d5b 	.word	0x20001d5b
200015bc:	20001d5b 	.word	0x20001d5b
200015c0:	20001d5b 	.word	0x20001d5b
200015c4:	20001d5b 	.word	0x20001d5b
200015c8:	200019a5 	.word	0x200019a5
200015cc:	20001d5b 	.word	0x20001d5b
200015d0:	20001d5b 	.word	0x20001d5b
200015d4:	20001d5b 	.word	0x20001d5b
200015d8:	20001d5b 	.word	0x20001d5b
200015dc:	20001d5b 	.word	0x20001d5b
200015e0:	20001d5b 	.word	0x20001d5b
200015e4:	20001d5b 	.word	0x20001d5b
200015e8:	200018e1 	.word	0x200018e1
200015ec:	20001d5b 	.word	0x20001d5b
200015f0:	20001d5b 	.word	0x20001d5b
200015f4:	20001d5b 	.word	0x20001d5b
200015f8:	20001d5b 	.word	0x20001d5b
200015fc:	20001d5b 	.word	0x20001d5b
20001600:	20001d5b 	.word	0x20001d5b
20001604:	20001d5b 	.word	0x20001d5b
20001608:	200019c9 	.word	0x200019c9
2000160c:	20001d5b 	.word	0x20001d5b
20001610:	20001d5b 	.word	0x20001d5b
20001614:	20001d5b 	.word	0x20001d5b
20001618:	20001d5b 	.word	0x20001d5b
2000161c:	20001d5b 	.word	0x20001d5b
20001620:	20001d5b 	.word	0x20001d5b
20001624:	20001d5b 	.word	0x20001d5b
20001628:	20001a19 	.word	0x20001a19
2000162c:	20001d5b 	.word	0x20001d5b
20001630:	20001d5b 	.word	0x20001d5b
20001634:	20001d5b 	.word	0x20001d5b
20001638:	20001d5b 	.word	0x20001d5b
2000163c:	20001d5b 	.word	0x20001d5b
20001640:	20001d5b 	.word	0x20001d5b
20001644:	20001d5b 	.word	0x20001d5b
20001648:	20001a3d 	.word	0x20001a3d
2000164c:	20001d5b 	.word	0x20001d5b
20001650:	20001d5b 	.word	0x20001d5b
20001654:	20001d5b 	.word	0x20001d5b
20001658:	20001d5b 	.word	0x20001d5b
2000165c:	20001d5b 	.word	0x20001d5b
20001660:	20001d5b 	.word	0x20001d5b
20001664:	20001d5b 	.word	0x20001d5b
20001668:	20001a77 	.word	0x20001a77
2000166c:	20001d5b 	.word	0x20001d5b
20001670:	20001d5b 	.word	0x20001d5b
20001674:	20001d5b 	.word	0x20001d5b
20001678:	20001d5b 	.word	0x20001d5b
2000167c:	20001d5b 	.word	0x20001d5b
20001680:	20001d5b 	.word	0x20001d5b
20001684:	20001d5b 	.word	0x20001d5b
20001688:	20001b19 	.word	0x20001b19
2000168c:	20001d5b 	.word	0x20001d5b
20001690:	20001d5b 	.word	0x20001d5b
20001694:	20001d5b 	.word	0x20001d5b
20001698:	20001d5b 	.word	0x20001d5b
2000169c:	20001d5b 	.word	0x20001d5b
200016a0:	20001d5b 	.word	0x20001d5b
200016a4:	20001d5b 	.word	0x20001d5b
200016a8:	20001b0f 	.word	0x20001b0f
200016ac:	20001d5b 	.word	0x20001d5b
200016b0:	20001d5b 	.word	0x20001d5b
200016b4:	20001d5b 	.word	0x20001d5b
200016b8:	20001d5b 	.word	0x20001d5b
200016bc:	20001d5b 	.word	0x20001d5b
200016c0:	20001d5b 	.word	0x20001d5b
200016c4:	20001d5b 	.word	0x20001d5b
200016c8:	20001b19 	.word	0x20001b19
200016cc:	20001d5b 	.word	0x20001d5b
200016d0:	20001d5b 	.word	0x20001d5b
200016d4:	20001d5b 	.word	0x20001d5b
200016d8:	20001d5b 	.word	0x20001d5b
200016dc:	20001d5b 	.word	0x20001d5b
200016e0:	20001d5b 	.word	0x20001d5b
200016e4:	20001d5b 	.word	0x20001d5b
200016e8:	20001b0f 	.word	0x20001b0f
200016ec:	20001d5b 	.word	0x20001d5b
200016f0:	20001d5b 	.word	0x20001d5b
200016f4:	20001d5b 	.word	0x20001d5b
200016f8:	20001d5b 	.word	0x20001d5b
200016fc:	20001d5b 	.word	0x20001d5b
20001700:	20001d5b 	.word	0x20001d5b
20001704:	20001d5b 	.word	0x20001d5b
20001708:	20001b5b 	.word	0x20001b5b
2000170c:	20001d5b 	.word	0x20001d5b
20001710:	20001d5b 	.word	0x20001d5b
20001714:	20001d5b 	.word	0x20001d5b
20001718:	20001d5b 	.word	0x20001d5b
2000171c:	20001d5b 	.word	0x20001d5b
20001720:	20001d5b 	.word	0x20001d5b
20001724:	20001d5b 	.word	0x20001d5b
20001728:	20001adb 	.word	0x20001adb
2000172c:	20001d5b 	.word	0x20001d5b
20001730:	20001d5b 	.word	0x20001d5b
20001734:	20001d5b 	.word	0x20001d5b
20001738:	20001d5b 	.word	0x20001d5b
2000173c:	20001d5b 	.word	0x20001d5b
20001740:	20001d5b 	.word	0x20001d5b
20001744:	20001d5b 	.word	0x20001d5b
20001748:	20001b5b 	.word	0x20001b5b
2000174c:	20001d5b 	.word	0x20001d5b
20001750:	20001d5b 	.word	0x20001d5b
20001754:	20001d5b 	.word	0x20001d5b
20001758:	20001d5b 	.word	0x20001d5b
2000175c:	20001d5b 	.word	0x20001d5b
20001760:	20001d5b 	.word	0x20001d5b
20001764:	20001d5b 	.word	0x20001d5b
20001768:	20001adb 	.word	0x20001adb
2000176c:	20001d5b 	.word	0x20001d5b
20001770:	20001d5b 	.word	0x20001d5b
20001774:	20001d5b 	.word	0x20001d5b
20001778:	20001d5b 	.word	0x20001d5b
2000177c:	20001d5b 	.word	0x20001d5b
20001780:	20001d5b 	.word	0x20001d5b
20001784:	20001d5b 	.word	0x20001d5b
20001788:	20001bb7 	.word	0x20001bb7
2000178c:	20001d5b 	.word	0x20001d5b
20001790:	20001d5b 	.word	0x20001d5b
20001794:	20001d5b 	.word	0x20001d5b
20001798:	20001d5b 	.word	0x20001d5b
2000179c:	20001d5b 	.word	0x20001d5b
200017a0:	20001d5b 	.word	0x20001d5b
200017a4:	20001d5b 	.word	0x20001d5b
200017a8:	20001c8f 	.word	0x20001c8f
200017ac:	20001d5b 	.word	0x20001d5b
200017b0:	20001d5b 	.word	0x20001d5b
200017b4:	20001d5b 	.word	0x20001d5b
200017b8:	20001d5b 	.word	0x20001d5b
200017bc:	20001d5b 	.word	0x20001d5b
200017c0:	20001d5b 	.word	0x20001d5b
200017c4:	20001d5b 	.word	0x20001d5b
200017c8:	20001c8f 	.word	0x20001c8f
200017cc:	20001d5b 	.word	0x20001d5b
200017d0:	20001d5b 	.word	0x20001d5b
200017d4:	20001d5b 	.word	0x20001d5b
200017d8:	20001d5b 	.word	0x20001d5b
200017dc:	20001d5b 	.word	0x20001d5b
200017e0:	20001d5b 	.word	0x20001d5b
200017e4:	20001d5b 	.word	0x20001d5b
200017e8:	20001c8f 	.word	0x20001c8f
200017ec:	20001d5b 	.word	0x20001d5b
200017f0:	20001d5b 	.word	0x20001d5b
200017f4:	20001d5b 	.word	0x20001d5b
200017f8:	20001d5b 	.word	0x20001d5b
200017fc:	20001d5b 	.word	0x20001d5b
20001800:	20001d5b 	.word	0x20001d5b
20001804:	20001d5b 	.word	0x20001d5b
20001808:	20001d21 	.word	0x20001d21
2000180c:	20001d5b 	.word	0x20001d5b
20001810:	20001d5b 	.word	0x20001d5b
20001814:	20001d5b 	.word	0x20001d5b
20001818:	20001d5b 	.word	0x20001d5b
2000181c:	20001d5b 	.word	0x20001d5b
20001820:	20001d5b 	.word	0x20001d5b
20001824:	20001d5b 	.word	0x20001d5b
20001828:	20001d21 	.word	0x20001d21
2000182c:	20001d5b 	.word	0x20001d5b
20001830:	20001d5b 	.word	0x20001d5b
20001834:	20001d5b 	.word	0x20001d5b
20001838:	20001d5b 	.word	0x20001d5b
2000183c:	20001d5b 	.word	0x20001d5b
20001840:	20001d5b 	.word	0x20001d5b
20001844:	20001d5b 	.word	0x20001d5b
20001848:	20001d5b 	.word	0x20001d5b
2000184c:	20001d5b 	.word	0x20001d5b
20001850:	20001d5b 	.word	0x20001d5b
20001854:	20001d5b 	.word	0x20001d5b
20001858:	20001d5b 	.word	0x20001d5b
2000185c:	20001d5b 	.word	0x20001d5b
20001860:	20001d5b 	.word	0x20001d5b
20001864:	20001d5b 	.word	0x20001d5b
20001868:	20001c61 	.word	0x20001c61
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
2000186c:	687b      	ldr	r3, [r7, #4]
2000186e:	699b      	ldr	r3, [r3, #24]
20001870:	f04f 0200 	mov.w	r2, #0
20001874:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
20001876:	687b      	ldr	r3, [r7, #4]
20001878:	695b      	ldr	r3, [r3, #20]
2000187a:	687a      	ldr	r2, [r7, #4]
2000187c:	6852      	ldr	r2, [r2, #4]
2000187e:	b2d2      	uxtb	r2, r2
20001880:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
20001882:	687b      	ldr	r3, [r7, #4]
20001884:	699b      	ldr	r3, [r3, #24]
20001886:	687a      	ldr	r2, [r7, #4]
20001888:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
2000188a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
2000188e:	687b      	ldr	r3, [r7, #4]
20001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001892:	2b00      	cmp	r3, #0
20001894:	d104      	bne.n	200018a0 <mss_i2c_isr+0x3c0>
            {
                this_i2c->master_tx_idx = 0u;
20001896:	687b      	ldr	r3, [r7, #4]
20001898:	f04f 0200 	mov.w	r2, #0
2000189c:	629a      	str	r2, [r3, #40]	; 0x28
2000189e:	e007      	b.n	200018b0 <mss_i2c_isr+0x3d0>
            }
            else if ( this_i2c->dir == READ_DIR)
200018a0:	687b      	ldr	r3, [r7, #4]
200018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200018a4:	2b01      	cmp	r3, #1
200018a6:	d103      	bne.n	200018b0 <mss_i2c_isr+0x3d0>
            {
                this_i2c->master_rx_idx = 0u;
200018a8:	687b      	ldr	r3, [r7, #4]
200018aa:	f04f 0200 	mov.w	r2, #0
200018ae:	639a      	str	r2, [r3, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
200018b0:	687b      	ldr	r3, [r7, #4]
200018b2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
200018b6:	2b00      	cmp	r3, #0
200018b8:	d004      	beq.n	200018c4 <mss_i2c_isr+0x3e4>
            {
                this_i2c->is_transaction_pending = 0u;
200018ba:	687b      	ldr	r3, [r7, #4]
200018bc:	f04f 0200 	mov.w	r2, #0
200018c0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
200018c4:	687b      	ldr	r3, [r7, #4]
200018c6:	7a1a      	ldrb	r2, [r3, #8]
200018c8:	687b      	ldr	r3, [r7, #4]
200018ca:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
200018ce:	429a      	cmp	r2, r3
200018d0:	f000 8267 	beq.w	20001da2 <mss_i2c_isr+0x8c2>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
200018d4:	687b      	ldr	r3, [r7, #4]
200018d6:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
200018da:	687b      	ldr	r3, [r7, #4]
200018dc:	721a      	strb	r2, [r3, #8]
            }
            break;
200018de:	e269      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200018e0:	687b      	ldr	r3, [r7, #4]
200018e2:	699b      	ldr	r3, [r3, #24]
200018e4:	f04f 0201 	mov.w	r2, #1
200018e8:	615a      	str	r2, [r3, #20]
            break;
200018ea:	e263      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200018ec:	687b      	ldr	r3, [r7, #4]
200018ee:	699b      	ldr	r3, [r3, #24]
200018f0:	f04f 0201 	mov.w	r2, #1
200018f4:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
200018f6:	687b      	ldr	r3, [r7, #4]
200018f8:	f04f 0202 	mov.w	r2, #2
200018fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
20001900:	687b      	ldr	r3, [r7, #4]
20001902:	f04f 0200 	mov.w	r2, #0
20001906:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001908:	6878      	ldr	r0, [r7, #4]
2000190a:	f7ff fdd5 	bl	200014b8 <enable_slave_if_required>
            break;
2000190e:	e251      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20001910:	687b      	ldr	r3, [r7, #4]
20001912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001914:	687b      	ldr	r3, [r7, #4]
20001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001918:	429a      	cmp	r2, r3
2000191a:	d20d      	bcs.n	20001938 <mss_i2c_isr+0x458>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
2000191c:	687b      	ldr	r3, [r7, #4]
2000191e:	695a      	ldr	r2, [r3, #20]
20001920:	687b      	ldr	r3, [r7, #4]
20001922:	6a19      	ldr	r1, [r3, #32]
20001924:	687b      	ldr	r3, [r7, #4]
20001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20001928:	4419      	add	r1, r3
2000192a:	7809      	ldrb	r1, [r1, #0]
2000192c:	7211      	strb	r1, [r2, #8]
2000192e:	f103 0201 	add.w	r2, r3, #1
20001932:	687b      	ldr	r3, [r7, #4]
20001934:	629a      	str	r2, [r3, #40]	; 0x28
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20001936:	e23d      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20001938:	687b      	ldr	r3, [r7, #4]
2000193a:	7a1b      	ldrb	r3, [r3, #8]
2000193c:	2b03      	cmp	r3, #3
2000193e:	d109      	bne.n	20001954 <mss_i2c_isr+0x474>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
20001940:	687b      	ldr	r3, [r7, #4]
20001942:	f04f 0201 	mov.w	r2, #1
20001946:	62da      	str	r2, [r3, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001948:	687b      	ldr	r3, [r7, #4]
2000194a:	699b      	ldr	r3, [r3, #24]
2000194c:	f04f 0201 	mov.w	r2, #1
20001950:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20001952:	e22f      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
20001954:	687b      	ldr	r3, [r7, #4]
20001956:	f04f 0200 	mov.w	r2, #0
2000195a:	721a      	strb	r2, [r3, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
2000195c:	687b      	ldr	r3, [r7, #4]
2000195e:	7c1b      	ldrb	r3, [r3, #16]
20001960:	f003 0301 	and.w	r3, r3, #1
20001964:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
20001966:	687b      	ldr	r3, [r7, #4]
20001968:	7b7a      	ldrb	r2, [r7, #13]
2000196a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if ( hold_bus == 0u )
2000196e:	7b7b      	ldrb	r3, [r7, #13]
20001970:	2b00      	cmp	r3, #0
20001972:	d108      	bne.n	20001986 <mss_i2c_isr+0x4a6>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
20001974:	687b      	ldr	r3, [r7, #4]
20001976:	699b      	ldr	r3, [r3, #24]
20001978:	f04f 0201 	mov.w	r2, #1
2000197c:	611a      	str	r2, [r3, #16]
                    enable_slave_if_required(this_i2c);
2000197e:	6878      	ldr	r0, [r7, #4]
20001980:	f7ff fd9a 	bl	200014b8 <enable_slave_if_required>
20001984:	e008      	b.n	20001998 <mss_i2c_isr+0x4b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
20001986:	687b      	ldr	r3, [r7, #4]
20001988:	8a5b      	ldrh	r3, [r3, #18]
2000198a:	b21b      	sxth	r3, r3
2000198c:	4618      	mov	r0, r3
2000198e:	f7ff fd57 	bl	20001440 <NVIC_DisableIRQ>
                    clear_irq = 0u;
20001992:	f04f 0300 	mov.w	r3, #0
20001996:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001998:	687b      	ldr	r3, [r7, #4]
2000199a:	f04f 0200 	mov.w	r2, #0
2000199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
200019a2:	e207      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200019a4:	687b      	ldr	r3, [r7, #4]
200019a6:	699b      	ldr	r3, [r3, #24]
200019a8:	f04f 0201 	mov.w	r2, #1
200019ac:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
200019ae:	687b      	ldr	r3, [r7, #4]
200019b0:	f04f 0202 	mov.w	r2, #2
200019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200019b8:	687b      	ldr	r3, [r7, #4]
200019ba:	f04f 0200 	mov.w	r2, #0
200019be:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
200019c0:	6878      	ldr	r0, [r7, #4]
200019c2:	f7ff fd79 	bl	200014b8 <enable_slave_if_required>

            break;
200019c6:	e1f5      	b.n	20001db4 <mss_i2c_isr+0x8d4>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
200019c8:	687b      	ldr	r3, [r7, #4]
200019ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200019cc:	2b01      	cmp	r3, #1
200019ce:	d905      	bls.n	200019dc <mss_i2c_isr+0x4fc>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200019d0:	687b      	ldr	r3, [r7, #4]
200019d2:	699b      	ldr	r3, [r3, #24]
200019d4:	f04f 0201 	mov.w	r2, #1
200019d8:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
200019da:	e1eb      	b.n	20001db4 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
200019dc:	687b      	ldr	r3, [r7, #4]
200019de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200019e0:	2b01      	cmp	r3, #1
200019e2:	d105      	bne.n	200019f0 <mss_i2c_isr+0x510>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
200019e4:	687b      	ldr	r3, [r7, #4]
200019e6:	699b      	ldr	r3, [r3, #24]
200019e8:	f04f 0200 	mov.w	r2, #0
200019ec:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
200019ee:	e1e1      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200019f0:	687b      	ldr	r3, [r7, #4]
200019f2:	699b      	ldr	r3, [r3, #24]
200019f4:	f04f 0201 	mov.w	r2, #1
200019f8:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200019fa:	687b      	ldr	r3, [r7, #4]
200019fc:	699b      	ldr	r3, [r3, #24]
200019fe:	f04f 0201 	mov.w	r2, #1
20001a02:	611a      	str	r2, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001a04:	687b      	ldr	r3, [r7, #4]
20001a06:	f04f 0200 	mov.w	r2, #0
20001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
20001a0e:	687b      	ldr	r3, [r7, #4]
20001a10:	f04f 0200 	mov.w	r2, #0
20001a14:	721a      	strb	r2, [r3, #8]
            }
            break;
20001a16:	e1cd      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001a18:	687b      	ldr	r3, [r7, #4]
20001a1a:	699b      	ldr	r3, [r3, #24]
20001a1c:	f04f 0201 	mov.w	r2, #1
20001a20:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001a22:	687b      	ldr	r3, [r7, #4]
20001a24:	f04f 0202 	mov.w	r2, #2
20001a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001a2c:	687b      	ldr	r3, [r7, #4]
20001a2e:	f04f 0200 	mov.w	r2, #0
20001a32:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001a34:	6878      	ldr	r0, [r7, #4]
20001a36:	f7ff fd3f 	bl	200014b8 <enable_slave_if_required>
            break;
20001a3a:	e1bb      	b.n	20001db4 <mss_i2c_isr+0x8d4>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
20001a3c:	687b      	ldr	r3, [r7, #4]
20001a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001a40:	687b      	ldr	r3, [r7, #4]
20001a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001a44:	441a      	add	r2, r3
20001a46:	6879      	ldr	r1, [r7, #4]
20001a48:	6949      	ldr	r1, [r1, #20]
20001a4a:	7a09      	ldrb	r1, [r1, #8]
20001a4c:	b2c9      	uxtb	r1, r1
20001a4e:	7011      	strb	r1, [r2, #0]
20001a50:	f103 0201 	add.w	r2, r3, #1
20001a54:	687b      	ldr	r3, [r7, #4]
20001a56:	639a      	str	r2, [r3, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
20001a58:	687b      	ldr	r3, [r7, #4]
20001a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001a5c:	687b      	ldr	r3, [r7, #4]
20001a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001a60:	f103 33ff 	add.w	r3, r3, #4294967295
20001a64:	429a      	cmp	r2, r3
20001a66:	f0c0 819e 	bcc.w	20001da6 <mss_i2c_isr+0x8c6>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001a6a:	687b      	ldr	r3, [r7, #4]
20001a6c:	699b      	ldr	r3, [r3, #24]
20001a6e:	f04f 0200 	mov.w	r2, #0
20001a72:	609a      	str	r2, [r3, #8]
            }
            break;
20001a74:	e19e      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
20001a76:	687b      	ldr	r3, [r7, #4]
20001a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001a7a:	687b      	ldr	r3, [r7, #4]
20001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001a7e:	4413      	add	r3, r2
20001a80:	687a      	ldr	r2, [r7, #4]
20001a82:	6952      	ldr	r2, [r2, #20]
20001a84:	7a12      	ldrb	r2, [r2, #8]
20001a86:	b2d2      	uxtb	r2, r2
20001a88:	701a      	strb	r2, [r3, #0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
20001a8a:	687b      	ldr	r3, [r7, #4]
20001a8c:	7c1b      	ldrb	r3, [r3, #16]
20001a8e:	f003 0301 	and.w	r3, r3, #1
20001a92:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20001a94:	687b      	ldr	r3, [r7, #4]
20001a96:	7b7a      	ldrb	r2, [r7, #13]
20001a98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            if ( hold_bus == 0u )
20001a9c:	7b7b      	ldrb	r3, [r7, #13]
20001a9e:	2b00      	cmp	r3, #0
20001aa0:	d108      	bne.n	20001ab4 <mss_i2c_isr+0x5d4>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
20001aa2:	687b      	ldr	r3, [r7, #4]
20001aa4:	699b      	ldr	r3, [r3, #24]
20001aa6:	f04f 0201 	mov.w	r2, #1
20001aaa:	611a      	str	r2, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20001aac:	6878      	ldr	r0, [r7, #4]
20001aae:	f7ff fd03 	bl	200014b8 <enable_slave_if_required>
20001ab2:	e008      	b.n	20001ac6 <mss_i2c_isr+0x5e6>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20001ab4:	687b      	ldr	r3, [r7, #4]
20001ab6:	8a5b      	ldrh	r3, [r3, #18]
20001ab8:	b21b      	sxth	r3, r3
20001aba:	4618      	mov	r0, r3
20001abc:	f7ff fcc0 	bl	20001440 <NVIC_DisableIRQ>
                clear_irq = 0u;
20001ac0:	f04f 0300 	mov.w	r3, #0
20001ac4:	73bb      	strb	r3, [r7, #14]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001ac6:	687b      	ldr	r3, [r7, #4]
20001ac8:	f04f 0200 	mov.w	r2, #0
20001acc:	721a      	strb	r2, [r3, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
20001ace:	687b      	ldr	r3, [r7, #4]
20001ad0:	f04f 0200 	mov.w	r2, #0
20001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            break;
20001ad8:	e16c      	b.n	20001db4 <mss_i2c_isr+0x8d4>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001ada:	687b      	ldr	r3, [r7, #4]
20001adc:	699b      	ldr	r3, [r3, #24]
20001ade:	f04f 0201 	mov.w	r2, #1
20001ae2:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
20001ae4:	687b      	ldr	r3, [r7, #4]
20001ae6:	f04f 0200 	mov.w	r2, #0
20001aea:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001aec:	687b      	ldr	r3, [r7, #4]
20001aee:	f04f 0200 	mov.w	r2, #0
20001af2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001af6:	687b      	ldr	r3, [r7, #4]
20001af8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001afc:	2b00      	cmp	r3, #0
20001afe:	f000 8154 	beq.w	20001daa <mss_i2c_isr+0x8ca>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001b02:	687b      	ldr	r3, [r7, #4]
20001b04:	699b      	ldr	r3, [r3, #24]
20001b06:	f04f 0201 	mov.w	r2, #1
20001b0a:	615a      	str	r2, [r3, #20]
            }
            break;
20001b0c:	e152      	b.n	20001db4 <mss_i2c_isr+0x8d4>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20001b0e:	687b      	ldr	r3, [r7, #4]
20001b10:	f04f 0201 	mov.w	r2, #1
20001b14:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20001b18:	687b      	ldr	r3, [r7, #4]
20001b1a:	f04f 0204 	mov.w	r2, #4
20001b1e:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_rx_idx = 0u;
20001b20:	687b      	ldr	r3, [r7, #4]
20001b22:	f04f 0200 	mov.w	r2, #0
20001b26:	659a      	str	r2, [r3, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
20001b28:	687b      	ldr	r3, [r7, #4]
20001b2a:	f04f 0200 	mov.w	r2, #0
20001b2e:	60da      	str	r2, [r3, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
20001b30:	687b      	ldr	r3, [r7, #4]
20001b32:	699b      	ldr	r3, [r3, #24]
20001b34:	695b      	ldr	r3, [r3, #20]
20001b36:	2b00      	cmp	r3, #0
20001b38:	d009      	beq.n	20001b4e <mss_i2c_isr+0x66e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001b3a:	687b      	ldr	r3, [r7, #4]
20001b3c:	699b      	ldr	r3, [r3, #24]
20001b3e:	f04f 0200 	mov.w	r2, #0
20001b42:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
20001b44:	687b      	ldr	r3, [r7, #4]
20001b46:	f04f 0201 	mov.w	r2, #1
20001b4a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001b4e:	687b      	ldr	r3, [r7, #4]
20001b50:	f04f 0201 	mov.w	r2, #1
20001b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20001b58:	e12c      	b.n	20001db4 <mss_i2c_isr+0x8d4>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20001b5a:	687b      	ldr	r3, [r7, #4]
20001b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20001b5e:	2b00      	cmp	r3, #0
20001b60:	d01c      	beq.n	20001b9c <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20001b62:	687b      	ldr	r3, [r7, #4]
20001b64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001b66:	687b      	ldr	r3, [r7, #4]
20001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20001b6a:	429a      	cmp	r2, r3
20001b6c:	d216      	bcs.n	20001b9c <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
20001b6e:	687b      	ldr	r3, [r7, #4]
20001b70:	695b      	ldr	r3, [r3, #20]
20001b72:	7a1b      	ldrb	r3, [r3, #8]
20001b74:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20001b76:	687b      	ldr	r3, [r7, #4]
20001b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20001b7a:	687b      	ldr	r3, [r7, #4]
20001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20001b7e:	441a      	add	r2, r3
20001b80:	7b39      	ldrb	r1, [r7, #12]
20001b82:	7011      	strb	r1, [r2, #0]
20001b84:	f103 0201 	add.w	r2, r3, #1
20001b88:	687b      	ldr	r3, [r7, #4]
20001b8a:	659a      	str	r2, [r3, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20001b8c:	687b      	ldr	r3, [r7, #4]
20001b8e:	68db      	ldr	r3, [r3, #12]
20001b90:	ea4f 2203 	mov.w	r2, r3, lsl #8
20001b94:	7b3b      	ldrb	r3, [r7, #12]
20001b96:	441a      	add	r2, r3
20001b98:	687b      	ldr	r3, [r7, #4]
20001b9a:	60da      	str	r2, [r3, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20001b9c:	687b      	ldr	r3, [r7, #4]
20001b9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001ba0:	687b      	ldr	r3, [r7, #4]
20001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20001ba4:	429a      	cmp	r2, r3
20001ba6:	f0c0 8102 	bcc.w	20001dae <mss_i2c_isr+0x8ce>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
20001baa:	687b      	ldr	r3, [r7, #4]
20001bac:	699b      	ldr	r3, [r3, #24]
20001bae:	f04f 0200 	mov.w	r2, #0
20001bb2:	609a      	str	r2, [r3, #8]
            }
            break;
20001bb4:	e0fe      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20001bb6:	687b      	ldr	r3, [r7, #4]
20001bb8:	7a1b      	ldrb	r3, [r3, #8]
20001bba:	2b04      	cmp	r3, #4
20001bbc:	d135      	bne.n	20001c2a <mss_i2c_isr+0x74a>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20001bbe:	687b      	ldr	r3, [r7, #4]
20001bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001bc2:	687b      	ldr	r3, [r7, #4]
20001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20001bc6:	429a      	cmp	r2, r3
20001bc8:	d103      	bne.n	20001bd2 <mss_i2c_isr+0x6f2>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20001bca:	687b      	ldr	r3, [r7, #4]
20001bcc:	68da      	ldr	r2, [r3, #12]
20001bce:	687b      	ldr	r3, [r7, #4]
20001bd0:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
20001bd2:	687b      	ldr	r3, [r7, #4]
20001bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001bd6:	2b00      	cmp	r3, #0
20001bd8:	d021      	beq.n	20001c1e <mss_i2c_isr+0x73e>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20001bda:	687b      	ldr	r3, [r7, #4]
20001bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001bde:	687a      	ldr	r2, [r7, #4]
20001be0:	6d11      	ldr	r1, [r2, #80]	; 0x50
20001be2:	687a      	ldr	r2, [r7, #4]
20001be4:	6d92      	ldr	r2, [r2, #88]	; 0x58
20001be6:	b292      	uxth	r2, r2
20001be8:	6878      	ldr	r0, [r7, #4]
20001bea:	4798      	blx	r3
20001bec:	4603      	mov	r3, r0
20001bee:	73fb      	strb	r3, [r7, #15]
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20001bf0:	7bfb      	ldrb	r3, [r7, #15]
20001bf2:	2b00      	cmp	r3, #0
20001bf4:	d108      	bne.n	20001c08 <mss_i2c_isr+0x728>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
20001bf6:	6878      	ldr	r0, [r7, #4]
20001bf8:	f7ff fc5e 	bl	200014b8 <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001bfc:	687b      	ldr	r3, [r7, #4]
20001bfe:	699b      	ldr	r3, [r3, #24]
20001c00:	f04f 0201 	mov.w	r2, #1
20001c04:	609a      	str	r2, [r3, #8]
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001c06:	e017      	b.n	20001c38 <mss_i2c_isr+0x758>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001c08:	687b      	ldr	r3, [r7, #4]
20001c0a:	699b      	ldr	r3, [r3, #24]
20001c0c:	f04f 0200 	mov.w	r2, #0
20001c10:	609a      	str	r2, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
20001c12:	687b      	ldr	r3, [r7, #4]
20001c14:	f04f 0200 	mov.w	r2, #0
20001c18:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001c1c:	e00c      	b.n	20001c38 <mss_i2c_isr+0x758>
20001c1e:	687b      	ldr	r3, [r7, #4]
20001c20:	699b      	ldr	r3, [r3, #24]
20001c22:	f04f 0201 	mov.w	r2, #1
20001c26:	609a      	str	r2, [r3, #8]
20001c28:	e006      	b.n	20001c38 <mss_i2c_isr+0x758>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20001c2a:	687b      	ldr	r3, [r7, #4]
20001c2c:	f04f 0200 	mov.w	r2, #0
20001c30:	64da      	str	r2, [r3, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20001c32:	6878      	ldr	r0, [r7, #4]
20001c34:	f7ff fc40 	bl	200014b8 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001c38:	687b      	ldr	r3, [r7, #4]
20001c3a:	f04f 0200 	mov.w	r2, #0
20001c3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001c42:	687b      	ldr	r3, [r7, #4]
20001c44:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001c48:	2b00      	cmp	r3, #0
20001c4a:	d004      	beq.n	20001c56 <mss_i2c_isr+0x776>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001c4c:	687b      	ldr	r3, [r7, #4]
20001c4e:	699b      	ldr	r3, [r3, #24]
20001c50:	f04f 0201 	mov.w	r2, #1
20001c54:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001c56:	687b      	ldr	r3, [r7, #4]
20001c58:	f04f 0200 	mov.w	r2, #0
20001c5c:	721a      	strb	r2, [r3, #8]
            break;
20001c5e:	e0a9      	b.n	20001db4 <mss_i2c_isr+0x8d4>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20001c60:	687b      	ldr	r3, [r7, #4]
20001c62:	f04f 0200 	mov.w	r2, #0
20001c66:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001c68:	687b      	ldr	r3, [r7, #4]
20001c6a:	f04f 0200 	mov.w	r2, #0
20001c6e:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001c70:	687b      	ldr	r3, [r7, #4]
20001c72:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001c76:	b2db      	uxtb	r3, r3
20001c78:	2b01      	cmp	r3, #1
20001c7a:	d104      	bne.n	20001c86 <mss_i2c_isr+0x7a6>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001c7c:	687b      	ldr	r3, [r7, #4]
20001c7e:	f04f 0202 	mov.w	r2, #2
20001c82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20001c86:	6878      	ldr	r0, [r7, #4]
20001c88:	f7ff fc16 	bl	200014b8 <enable_slave_if_required>

            break;
20001c8c:	e092      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20001c8e:	7afb      	ldrb	r3, [r7, #11]
20001c90:	b2db      	uxtb	r3, r3
20001c92:	2ba8      	cmp	r3, #168	; 0xa8
20001c94:	d11b      	bne.n	20001cce <mss_i2c_isr+0x7ee>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20001c96:	687b      	ldr	r3, [r7, #4]
20001c98:	f04f 0205 	mov.w	r2, #5
20001c9c:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0u;
20001c9e:	687b      	ldr	r3, [r7, #4]
20001ca0:	f04f 0200 	mov.w	r2, #0
20001ca4:	60da      	str	r2, [r3, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001ca6:	687b      	ldr	r3, [r7, #4]
20001ca8:	f04f 0201 	mov.w	r2, #1
20001cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
20001cb0:	687b      	ldr	r3, [r7, #4]
20001cb2:	699b      	ldr	r3, [r3, #24]
20001cb4:	695b      	ldr	r3, [r3, #20]
20001cb6:	2b00      	cmp	r3, #0
20001cb8:	d009      	beq.n	20001cce <mss_i2c_isr+0x7ee>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001cba:	687b      	ldr	r3, [r7, #4]
20001cbc:	699b      	ldr	r3, [r3, #24]
20001cbe:	f04f 0200 	mov.w	r2, #0
20001cc2:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
20001cc4:	687b      	ldr	r3, [r7, #4]
20001cc6:	f04f 0201 	mov.w	r2, #1
20001cca:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20001cce:	687b      	ldr	r3, [r7, #4]
20001cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20001cd2:	687b      	ldr	r3, [r7, #4]
20001cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001cd6:	429a      	cmp	r2, r3
20001cd8:	d305      	bcc.n	20001ce6 <mss_i2c_isr+0x806>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
20001cda:	687b      	ldr	r3, [r7, #4]
20001cdc:	695b      	ldr	r3, [r3, #20]
20001cde:	f04f 32ff 	mov.w	r2, #4294967295
20001ce2:	721a      	strb	r2, [r3, #8]
20001ce4:	e00c      	b.n	20001d00 <mss_i2c_isr+0x820>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
20001ce6:	687b      	ldr	r3, [r7, #4]
20001ce8:	695a      	ldr	r2, [r3, #20]
20001cea:	687b      	ldr	r3, [r7, #4]
20001cec:	6c59      	ldr	r1, [r3, #68]	; 0x44
20001cee:	687b      	ldr	r3, [r7, #4]
20001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20001cf2:	4419      	add	r1, r3
20001cf4:	7809      	ldrb	r1, [r1, #0]
20001cf6:	7211      	strb	r1, [r2, #8]
20001cf8:	f103 0201 	add.w	r2, r3, #1
20001cfc:	687b      	ldr	r3, [r7, #4]
20001cfe:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20001d00:	687b      	ldr	r3, [r7, #4]
20001d02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20001d04:	687b      	ldr	r3, [r7, #4]
20001d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001d08:	429a      	cmp	r2, r3
20001d0a:	d352      	bcc.n	20001db2 <mss_i2c_isr+0x8d2>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001d0c:	687b      	ldr	r3, [r7, #4]
20001d0e:	699b      	ldr	r3, [r3, #24]
20001d10:	f04f 0200 	mov.w	r2, #0
20001d14:	609a      	str	r2, [r3, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20001d16:	687b      	ldr	r3, [r7, #4]
20001d18:	f04f 0200 	mov.w	r2, #0
20001d1c:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            break;
20001d1e:	e049      	b.n	20001db4 <mss_i2c_isr+0x8d4>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20001d20:	687b      	ldr	r3, [r7, #4]
20001d22:	f04f 0200 	mov.w	r2, #0
20001d26:	64da      	str	r2, [r3, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001d28:	687b      	ldr	r3, [r7, #4]
20001d2a:	699b      	ldr	r3, [r3, #24]
20001d2c:	f04f 0201 	mov.w	r2, #1
20001d30:	609a      	str	r2, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001d32:	687b      	ldr	r3, [r7, #4]
20001d34:	f04f 0200 	mov.w	r2, #0
20001d38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001d3c:	687b      	ldr	r3, [r7, #4]
20001d3e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001d42:	2b00      	cmp	r3, #0
20001d44:	d004      	beq.n	20001d50 <mss_i2c_isr+0x870>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001d46:	687b      	ldr	r3, [r7, #4]
20001d48:	699b      	ldr	r3, [r3, #24]
20001d4a:	f04f 0201 	mov.w	r2, #1
20001d4e:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001d50:	687b      	ldr	r3, [r7, #4]
20001d52:	f04f 0200 	mov.w	r2, #0
20001d56:	721a      	strb	r2, [r3, #8]
            break;
20001d58:	e02c      	b.n	20001db4 <mss_i2c_isr+0x8d4>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
20001d5a:	687b      	ldr	r3, [r7, #4]
20001d5c:	699b      	ldr	r3, [r3, #24]
20001d5e:	f04f 0200 	mov.w	r2, #0
20001d62:	615a      	str	r2, [r3, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001d64:	687b      	ldr	r3, [r7, #4]
20001d66:	f04f 0200 	mov.w	r2, #0
20001d6a:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001d6c:	687b      	ldr	r3, [r7, #4]
20001d6e:	f04f 0200 	mov.w	r2, #0
20001d72:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
20001d74:	687b      	ldr	r3, [r7, #4]
20001d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20001d7a:	b2db      	uxtb	r3, r3
20001d7c:	2b01      	cmp	r3, #1
20001d7e:	d104      	bne.n	20001d8a <mss_i2c_isr+0x8aa>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
20001d80:	687b      	ldr	r3, [r7, #4]
20001d82:	f04f 0202 	mov.w	r2, #2
20001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001d8a:	687b      	ldr	r3, [r7, #4]
20001d8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001d90:	b2db      	uxtb	r3, r3
20001d92:	2b01      	cmp	r3, #1
20001d94:	d10e      	bne.n	20001db4 <mss_i2c_isr+0x8d4>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001d96:	687b      	ldr	r3, [r7, #4]
20001d98:	f04f 0202 	mov.w	r2, #2
20001d9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
20001da0:	e008      	b.n	20001db4 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
20001da2:	bf00      	nop
20001da4:	e006      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            break;
20001da6:	bf00      	nop
20001da8:	e004      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
            }
            break;
20001daa:	bf00      	nop
20001dac:	e002      	b.n	20001db4 <mss_i2c_isr+0x8d4>
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
            }
            break;
20001dae:	bf00      	nop
20001db0:	e000      	b.n	20001db4 <mss_i2c_isr+0x8d4>
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
20001db2:	bf00      	nop


            break;
    }
    
    if ( clear_irq )
20001db4:	7bbb      	ldrb	r3, [r7, #14]
20001db6:	2b00      	cmp	r3, #0
20001db8:	d004      	beq.n	20001dc4 <mss_i2c_isr+0x8e4>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001dba:	687b      	ldr	r3, [r7, #4]
20001dbc:	699b      	ldr	r3, [r3, #24]
20001dbe:	f04f 0200 	mov.w	r2, #0
20001dc2:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
20001dc4:	687b      	ldr	r3, [r7, #4]
20001dc6:	695b      	ldr	r3, [r3, #20]
20001dc8:	791b      	ldrb	r3, [r3, #4]
20001dca:	72fb      	strb	r3, [r7, #11]
}
20001dcc:	f107 0710 	add.w	r7, r7, #16
20001dd0:	46bd      	mov	sp, r7
20001dd2:	bd80      	pop	{r7, pc}

20001dd4 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
20001dd4:	4668      	mov	r0, sp
20001dd6:	f020 0107 	bic.w	r1, r0, #7
20001dda:	468d      	mov	sp, r1
20001ddc:	b589      	push	{r0, r3, r7, lr}
20001dde:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c0 );
20001de0:	f642 000c 	movw	r0, #10252	; 0x280c
20001de4:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001de8:	f7ff fb7a 	bl	200014e0 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
20001dec:	f04f 000e 	mov.w	r0, #14
20001df0:	f7ff fb44 	bl	2000147c <NVIC_ClearPendingIRQ>
}
20001df4:	46bd      	mov	sp, r7
20001df6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001dfa:	4685      	mov	sp, r0
20001dfc:	4770      	bx	lr
20001dfe:	bf00      	nop

20001e00 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
20001e00:	4668      	mov	r0, sp
20001e02:	f020 0107 	bic.w	r1, r0, #7
20001e06:	468d      	mov	sp, r1
20001e08:	b589      	push	{r0, r3, r7, lr}
20001e0a:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c1 );
20001e0c:	f642 0080 	movw	r0, #10368	; 0x2880
20001e10:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001e14:	f7ff fb64 	bl	200014e0 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
20001e18:	f04f 0011 	mov.w	r0, #17
20001e1c:	f7ff fb2e 	bl	2000147c <NVIC_ClearPendingIRQ>
}
20001e20:	46bd      	mov	sp, r7
20001e22:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001e26:	4685      	mov	sp, r0
20001e28:	4770      	bx	lr
20001e2a:	bf00      	nop

20001e2c <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001e2c:	b480      	push	{r7}
20001e2e:	b083      	sub	sp, #12
20001e30:	af00      	add	r7, sp, #0
20001e32:	4603      	mov	r3, r0
20001e34:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001e36:	f24e 1300 	movw	r3, #57600	; 0xe100
20001e3a:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001e3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001e42:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001e46:	88f9      	ldrh	r1, [r7, #6]
20001e48:	f001 011f 	and.w	r1, r1, #31
20001e4c:	f04f 0001 	mov.w	r0, #1
20001e50:	fa00 f101 	lsl.w	r1, r0, r1
20001e54:	f102 0260 	add.w	r2, r2, #96	; 0x60
20001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001e5c:	f107 070c 	add.w	r7, r7, #12
20001e60:	46bd      	mov	sp, r7
20001e62:	bc80      	pop	{r7}
20001e64:	4770      	bx	lr
20001e66:	bf00      	nop

20001e68 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
20001e68:	b580      	push	{r7, lr}
20001e6a:	b082      	sub	sp, #8
20001e6c:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20001e6e:	f242 0300 	movw	r3, #8192	; 0x2000
20001e72:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001e76:	f242 0200 	movw	r2, #8192	; 0x2000
20001e7a:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001e7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20001e84:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001e86:	f04f 0300 	mov.w	r3, #0
20001e8a:	607b      	str	r3, [r7, #4]
20001e8c:	e00e      	b.n	20001eac <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
20001e8e:	687a      	ldr	r2, [r7, #4]
20001e90:	f242 537c 	movw	r3, #9596	; 0x257c
20001e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001e98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
20001e9c:	b21b      	sxth	r3, r3
20001e9e:	4618      	mov	r0, r3
20001ea0:	f7ff ffc4 	bl	20001e2c <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
20001ea4:	687b      	ldr	r3, [r7, #4]
20001ea6:	f103 0301 	add.w	r3, r3, #1
20001eaa:	607b      	str	r3, [r7, #4]
20001eac:	687b      	ldr	r3, [r7, #4]
20001eae:	2b1f      	cmp	r3, #31
20001eb0:	d9ed      	bls.n	20001e8e <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
20001eb2:	f242 0300 	movw	r3, #8192	; 0x2000
20001eb6:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001eba:	f242 0200 	movw	r2, #8192	; 0x2000
20001ebe:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001ec2:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001ec4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20001ec8:	631a      	str	r2, [r3, #48]	; 0x30
}
20001eca:	f107 0708 	add.w	r7, r7, #8
20001ece:	46bd      	mov	sp, r7
20001ed0:	bd80      	pop	{r7, pc}
20001ed2:	bf00      	nop

20001ed4 <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
20001ed4:	b480      	push	{r7}
20001ed6:	b085      	sub	sp, #20
20001ed8:	af00      	add	r7, sp, #0
20001eda:	4603      	mov	r3, r0
20001edc:	6039      	str	r1, [r7, #0]
20001ede:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
20001ee0:	79fb      	ldrb	r3, [r7, #7]
20001ee2:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001ee4:	68fb      	ldr	r3, [r7, #12]
20001ee6:	2b1f      	cmp	r3, #31
20001ee8:	d900      	bls.n	20001eec <MSS_GPIO_config+0x18>
20001eea:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
20001eec:	68fb      	ldr	r3, [r7, #12]
20001eee:	2b1f      	cmp	r3, #31
20001ef0:	d808      	bhi.n	20001f04 <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20001ef2:	68fa      	ldr	r2, [r7, #12]
20001ef4:	f242 43fc 	movw	r3, #9468	; 0x24fc
20001ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001f00:	683a      	ldr	r2, [r7, #0]
20001f02:	601a      	str	r2, [r3, #0]
    }
}
20001f04:	f107 0714 	add.w	r7, r7, #20
20001f08:	46bd      	mov	sp, r7
20001f0a:	bc80      	pop	{r7}
20001f0c:	4770      	bx	lr
20001f0e:	bf00      	nop

20001f10 <MSS_GPIO_clear_irq>:
 */
void MSS_GPIO_clear_irq
(
    mss_gpio_id_t port_id
)
{
20001f10:	b580      	push	{r7, lr}
20001f12:	b084      	sub	sp, #16
20001f14:	af00      	add	r7, sp, #0
20001f16:	4603      	mov	r3, r0
20001f18:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
20001f1a:	79fb      	ldrb	r3, [r7, #7]
20001f1c:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20001f1e:	68fb      	ldr	r3, [r7, #12]
20001f20:	2b1f      	cmp	r3, #31
20001f22:	d900      	bls.n	20001f26 <MSS_GPIO_clear_irq+0x16>
20001f24:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20001f26:	68fb      	ldr	r3, [r7, #12]
20001f28:	2b1f      	cmp	r3, #31
20001f2a:	d815      	bhi.n	20001f58 <MSS_GPIO_clear_irq+0x48>
    {
        GPIO->GPIO_IRQ = ((uint32_t)1) << gpio_idx;
20001f2c:	f243 0300 	movw	r3, #12288	; 0x3000
20001f30:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001f34:	68fa      	ldr	r2, [r7, #12]
20001f36:	f04f 0101 	mov.w	r1, #1
20001f3a:	fa01 f202 	lsl.w	r2, r1, r2
20001f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[gpio_idx] );
20001f42:	68fa      	ldr	r2, [r7, #12]
20001f44:	f242 537c 	movw	r3, #9596	; 0x257c
20001f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001f4c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
20001f50:	b21b      	sxth	r3, r3
20001f52:	4618      	mov	r0, r3
20001f54:	f7ff ff6a 	bl	20001e2c <NVIC_ClearPendingIRQ>
    }
}
20001f58:	f107 0710 	add.w	r7, r7, #16
20001f5c:	46bd      	mov	sp, r7
20001f5e:	bd80      	pop	{r7, pc}

20001f60 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20001f60:	b480      	push	{r7}
20001f62:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20001f64:	46bd      	mov	sp, r7
20001f66:	bc80      	pop	{r7}
20001f68:	4770      	bx	lr
20001f6a:	bf00      	nop

20001f6c <__aeabi_dmul>:
20001f6c:	b570      	push	{r4, r5, r6, lr}
20001f6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
20001f72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20001f76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20001f7a:	bf1d      	ittte	ne
20001f7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20001f80:	ea94 0f0c 	teqne	r4, ip
20001f84:	ea95 0f0c 	teqne	r5, ip
20001f88:	f000 f8de 	bleq	20002148 <__aeabi_dmul+0x1dc>
20001f8c:	442c      	add	r4, r5
20001f8e:	ea81 0603 	eor.w	r6, r1, r3
20001f92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
20001f96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
20001f9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
20001f9e:	bf18      	it	ne
20001fa0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
20001fa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20001fa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20001fac:	d038      	beq.n	20002020 <__aeabi_dmul+0xb4>
20001fae:	fba0 ce02 	umull	ip, lr, r0, r2
20001fb2:	f04f 0500 	mov.w	r5, #0
20001fb6:	fbe1 e502 	umlal	lr, r5, r1, r2
20001fba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
20001fbe:	fbe0 e503 	umlal	lr, r5, r0, r3
20001fc2:	f04f 0600 	mov.w	r6, #0
20001fc6:	fbe1 5603 	umlal	r5, r6, r1, r3
20001fca:	f09c 0f00 	teq	ip, #0
20001fce:	bf18      	it	ne
20001fd0:	f04e 0e01 	orrne.w	lr, lr, #1
20001fd4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
20001fd8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
20001fdc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
20001fe0:	d204      	bcs.n	20001fec <__aeabi_dmul+0x80>
20001fe2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
20001fe6:	416d      	adcs	r5, r5
20001fe8:	eb46 0606 	adc.w	r6, r6, r6
20001fec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
20001ff0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
20001ff4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
20001ff8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
20001ffc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
20002000:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20002004:	bf88      	it	hi
20002006:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
2000200a:	d81e      	bhi.n	2000204a <__aeabi_dmul+0xde>
2000200c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
20002010:	bf08      	it	eq
20002012:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
20002016:	f150 0000 	adcs.w	r0, r0, #0
2000201a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000201e:	bd70      	pop	{r4, r5, r6, pc}
20002020:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
20002024:	ea46 0101 	orr.w	r1, r6, r1
20002028:	ea40 0002 	orr.w	r0, r0, r2
2000202c:	ea81 0103 	eor.w	r1, r1, r3
20002030:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
20002034:	bfc2      	ittt	gt
20002036:	ebd4 050c 	rsbsgt	r5, r4, ip
2000203a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
2000203e:	bd70      	popgt	{r4, r5, r6, pc}
20002040:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002044:	f04f 0e00 	mov.w	lr, #0
20002048:	3c01      	subs	r4, #1
2000204a:	f300 80ab 	bgt.w	200021a4 <__aeabi_dmul+0x238>
2000204e:	f114 0f36 	cmn.w	r4, #54	; 0x36
20002052:	bfde      	ittt	le
20002054:	2000      	movle	r0, #0
20002056:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
2000205a:	bd70      	pople	{r4, r5, r6, pc}
2000205c:	f1c4 0400 	rsb	r4, r4, #0
20002060:	3c20      	subs	r4, #32
20002062:	da35      	bge.n	200020d0 <__aeabi_dmul+0x164>
20002064:	340c      	adds	r4, #12
20002066:	dc1b      	bgt.n	200020a0 <__aeabi_dmul+0x134>
20002068:	f104 0414 	add.w	r4, r4, #20
2000206c:	f1c4 0520 	rsb	r5, r4, #32
20002070:	fa00 f305 	lsl.w	r3, r0, r5
20002074:	fa20 f004 	lsr.w	r0, r0, r4
20002078:	fa01 f205 	lsl.w	r2, r1, r5
2000207c:	ea40 0002 	orr.w	r0, r0, r2
20002080:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
20002084:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20002088:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
2000208c:	fa21 f604 	lsr.w	r6, r1, r4
20002090:	eb42 0106 	adc.w	r1, r2, r6
20002094:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20002098:	bf08      	it	eq
2000209a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
2000209e:	bd70      	pop	{r4, r5, r6, pc}
200020a0:	f1c4 040c 	rsb	r4, r4, #12
200020a4:	f1c4 0520 	rsb	r5, r4, #32
200020a8:	fa00 f304 	lsl.w	r3, r0, r4
200020ac:	fa20 f005 	lsr.w	r0, r0, r5
200020b0:	fa01 f204 	lsl.w	r2, r1, r4
200020b4:	ea40 0002 	orr.w	r0, r0, r2
200020b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200020bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
200020c0:	f141 0100 	adc.w	r1, r1, #0
200020c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200020c8:	bf08      	it	eq
200020ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200020ce:	bd70      	pop	{r4, r5, r6, pc}
200020d0:	f1c4 0520 	rsb	r5, r4, #32
200020d4:	fa00 f205 	lsl.w	r2, r0, r5
200020d8:	ea4e 0e02 	orr.w	lr, lr, r2
200020dc:	fa20 f304 	lsr.w	r3, r0, r4
200020e0:	fa01 f205 	lsl.w	r2, r1, r5
200020e4:	ea43 0302 	orr.w	r3, r3, r2
200020e8:	fa21 f004 	lsr.w	r0, r1, r4
200020ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200020f0:	fa21 f204 	lsr.w	r2, r1, r4
200020f4:	ea20 0002 	bic.w	r0, r0, r2
200020f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
200020fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20002100:	bf08      	it	eq
20002102:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20002106:	bd70      	pop	{r4, r5, r6, pc}
20002108:	f094 0f00 	teq	r4, #0
2000210c:	d10f      	bne.n	2000212e <__aeabi_dmul+0x1c2>
2000210e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
20002112:	0040      	lsls	r0, r0, #1
20002114:	eb41 0101 	adc.w	r1, r1, r1
20002118:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
2000211c:	bf08      	it	eq
2000211e:	3c01      	subeq	r4, #1
20002120:	d0f7      	beq.n	20002112 <__aeabi_dmul+0x1a6>
20002122:	ea41 0106 	orr.w	r1, r1, r6
20002126:	f095 0f00 	teq	r5, #0
2000212a:	bf18      	it	ne
2000212c:	4770      	bxne	lr
2000212e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
20002132:	0052      	lsls	r2, r2, #1
20002134:	eb43 0303 	adc.w	r3, r3, r3
20002138:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
2000213c:	bf08      	it	eq
2000213e:	3d01      	subeq	r5, #1
20002140:	d0f7      	beq.n	20002132 <__aeabi_dmul+0x1c6>
20002142:	ea43 0306 	orr.w	r3, r3, r6
20002146:	4770      	bx	lr
20002148:	ea94 0f0c 	teq	r4, ip
2000214c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20002150:	bf18      	it	ne
20002152:	ea95 0f0c 	teqne	r5, ip
20002156:	d00c      	beq.n	20002172 <__aeabi_dmul+0x206>
20002158:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
2000215c:	bf18      	it	ne
2000215e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20002162:	d1d1      	bne.n	20002108 <__aeabi_dmul+0x19c>
20002164:	ea81 0103 	eor.w	r1, r1, r3
20002168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
2000216c:	f04f 0000 	mov.w	r0, #0
20002170:	bd70      	pop	{r4, r5, r6, pc}
20002172:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002176:	bf06      	itte	eq
20002178:	4610      	moveq	r0, r2
2000217a:	4619      	moveq	r1, r3
2000217c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20002180:	d019      	beq.n	200021b6 <__aeabi_dmul+0x24a>
20002182:	ea94 0f0c 	teq	r4, ip
20002186:	d102      	bne.n	2000218e <__aeabi_dmul+0x222>
20002188:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
2000218c:	d113      	bne.n	200021b6 <__aeabi_dmul+0x24a>
2000218e:	ea95 0f0c 	teq	r5, ip
20002192:	d105      	bne.n	200021a0 <__aeabi_dmul+0x234>
20002194:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
20002198:	bf1c      	itt	ne
2000219a:	4610      	movne	r0, r2
2000219c:	4619      	movne	r1, r3
2000219e:	d10a      	bne.n	200021b6 <__aeabi_dmul+0x24a>
200021a0:	ea81 0103 	eor.w	r1, r1, r3
200021a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200021a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200021ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
200021b0:	f04f 0000 	mov.w	r0, #0
200021b4:	bd70      	pop	{r4, r5, r6, pc}
200021b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200021ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
200021be:	bd70      	pop	{r4, r5, r6, pc}

200021c0 <__aeabi_ddiv>:
200021c0:	b570      	push	{r4, r5, r6, lr}
200021c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
200021c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
200021ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
200021ce:	bf1d      	ittte	ne
200021d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
200021d4:	ea94 0f0c 	teqne	r4, ip
200021d8:	ea95 0f0c 	teqne	r5, ip
200021dc:	f000 f8a7 	bleq	2000232e <__aeabi_ddiv+0x16e>
200021e0:	eba4 0405 	sub.w	r4, r4, r5
200021e4:	ea81 0e03 	eor.w	lr, r1, r3
200021e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
200021ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
200021f0:	f000 8088 	beq.w	20002304 <__aeabi_ddiv+0x144>
200021f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
200021f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
200021fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
20002200:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
20002204:	ea4f 2202 	mov.w	r2, r2, lsl #8
20002208:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
2000220c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
20002210:	ea4f 2600 	mov.w	r6, r0, lsl #8
20002214:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
20002218:	429d      	cmp	r5, r3
2000221a:	bf08      	it	eq
2000221c:	4296      	cmpeq	r6, r2
2000221e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
20002222:	f504 7440 	add.w	r4, r4, #768	; 0x300
20002226:	d202      	bcs.n	2000222e <__aeabi_ddiv+0x6e>
20002228:	085b      	lsrs	r3, r3, #1
2000222a:	ea4f 0232 	mov.w	r2, r2, rrx
2000222e:	1ab6      	subs	r6, r6, r2
20002230:	eb65 0503 	sbc.w	r5, r5, r3
20002234:	085b      	lsrs	r3, r3, #1
20002236:	ea4f 0232 	mov.w	r2, r2, rrx
2000223a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2000223e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
20002242:	ebb6 0e02 	subs.w	lr, r6, r2
20002246:	eb75 0e03 	sbcs.w	lr, r5, r3
2000224a:	bf22      	ittt	cs
2000224c:	1ab6      	subcs	r6, r6, r2
2000224e:	4675      	movcs	r5, lr
20002250:	ea40 000c 	orrcs.w	r0, r0, ip
20002254:	085b      	lsrs	r3, r3, #1
20002256:	ea4f 0232 	mov.w	r2, r2, rrx
2000225a:	ebb6 0e02 	subs.w	lr, r6, r2
2000225e:	eb75 0e03 	sbcs.w	lr, r5, r3
20002262:	bf22      	ittt	cs
20002264:	1ab6      	subcs	r6, r6, r2
20002266:	4675      	movcs	r5, lr
20002268:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
2000226c:	085b      	lsrs	r3, r3, #1
2000226e:	ea4f 0232 	mov.w	r2, r2, rrx
20002272:	ebb6 0e02 	subs.w	lr, r6, r2
20002276:	eb75 0e03 	sbcs.w	lr, r5, r3
2000227a:	bf22      	ittt	cs
2000227c:	1ab6      	subcs	r6, r6, r2
2000227e:	4675      	movcs	r5, lr
20002280:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20002284:	085b      	lsrs	r3, r3, #1
20002286:	ea4f 0232 	mov.w	r2, r2, rrx
2000228a:	ebb6 0e02 	subs.w	lr, r6, r2
2000228e:	eb75 0e03 	sbcs.w	lr, r5, r3
20002292:	bf22      	ittt	cs
20002294:	1ab6      	subcs	r6, r6, r2
20002296:	4675      	movcs	r5, lr
20002298:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
2000229c:	ea55 0e06 	orrs.w	lr, r5, r6
200022a0:	d018      	beq.n	200022d4 <__aeabi_ddiv+0x114>
200022a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
200022a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
200022aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
200022ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200022b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
200022b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
200022ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
200022be:	d1c0      	bne.n	20002242 <__aeabi_ddiv+0x82>
200022c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
200022c4:	d10b      	bne.n	200022de <__aeabi_ddiv+0x11e>
200022c6:	ea41 0100 	orr.w	r1, r1, r0
200022ca:	f04f 0000 	mov.w	r0, #0
200022ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
200022d2:	e7b6      	b.n	20002242 <__aeabi_ddiv+0x82>
200022d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
200022d8:	bf04      	itt	eq
200022da:	4301      	orreq	r1, r0
200022dc:	2000      	moveq	r0, #0
200022de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
200022e2:	bf88      	it	hi
200022e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
200022e8:	f63f aeaf 	bhi.w	2000204a <__aeabi_dmul+0xde>
200022ec:	ebb5 0c03 	subs.w	ip, r5, r3
200022f0:	bf04      	itt	eq
200022f2:	ebb6 0c02 	subseq.w	ip, r6, r2
200022f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
200022fa:	f150 0000 	adcs.w	r0, r0, #0
200022fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20002302:	bd70      	pop	{r4, r5, r6, pc}
20002304:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
20002308:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
2000230c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
20002310:	bfc2      	ittt	gt
20002312:	ebd4 050c 	rsbsgt	r5, r4, ip
20002316:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
2000231a:	bd70      	popgt	{r4, r5, r6, pc}
2000231c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002320:	f04f 0e00 	mov.w	lr, #0
20002324:	3c01      	subs	r4, #1
20002326:	e690      	b.n	2000204a <__aeabi_dmul+0xde>
20002328:	ea45 0e06 	orr.w	lr, r5, r6
2000232c:	e68d      	b.n	2000204a <__aeabi_dmul+0xde>
2000232e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20002332:	ea94 0f0c 	teq	r4, ip
20002336:	bf08      	it	eq
20002338:	ea95 0f0c 	teqeq	r5, ip
2000233c:	f43f af3b 	beq.w	200021b6 <__aeabi_dmul+0x24a>
20002340:	ea94 0f0c 	teq	r4, ip
20002344:	d10a      	bne.n	2000235c <__aeabi_ddiv+0x19c>
20002346:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2000234a:	f47f af34 	bne.w	200021b6 <__aeabi_dmul+0x24a>
2000234e:	ea95 0f0c 	teq	r5, ip
20002352:	f47f af25 	bne.w	200021a0 <__aeabi_dmul+0x234>
20002356:	4610      	mov	r0, r2
20002358:	4619      	mov	r1, r3
2000235a:	e72c      	b.n	200021b6 <__aeabi_dmul+0x24a>
2000235c:	ea95 0f0c 	teq	r5, ip
20002360:	d106      	bne.n	20002370 <__aeabi_ddiv+0x1b0>
20002362:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002366:	f43f aefd 	beq.w	20002164 <__aeabi_dmul+0x1f8>
2000236a:	4610      	mov	r0, r2
2000236c:	4619      	mov	r1, r3
2000236e:	e722      	b.n	200021b6 <__aeabi_dmul+0x24a>
20002370:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002374:	bf18      	it	ne
20002376:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
2000237a:	f47f aec5 	bne.w	20002108 <__aeabi_dmul+0x19c>
2000237e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
20002382:	f47f af0d 	bne.w	200021a0 <__aeabi_dmul+0x234>
20002386:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
2000238a:	f47f aeeb 	bne.w	20002164 <__aeabi_dmul+0x1f8>
2000238e:	e712      	b.n	200021b6 <__aeabi_dmul+0x24a>

20002390 <__aeabi_d2uiz>:
20002390:	004a      	lsls	r2, r1, #1
20002392:	d211      	bcs.n	200023b8 <__aeabi_d2uiz+0x28>
20002394:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
20002398:	d211      	bcs.n	200023be <__aeabi_d2uiz+0x2e>
2000239a:	d50d      	bpl.n	200023b8 <__aeabi_d2uiz+0x28>
2000239c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
200023a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
200023a4:	d40e      	bmi.n	200023c4 <__aeabi_d2uiz+0x34>
200023a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
200023aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
200023ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
200023b2:	fa23 f002 	lsr.w	r0, r3, r2
200023b6:	4770      	bx	lr
200023b8:	f04f 0000 	mov.w	r0, #0
200023bc:	4770      	bx	lr
200023be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
200023c2:	d102      	bne.n	200023ca <__aeabi_d2uiz+0x3a>
200023c4:	f04f 30ff 	mov.w	r0, #4294967295
200023c8:	4770      	bx	lr
200023ca:	f04f 0000 	mov.w	r0, #0
200023ce:	4770      	bx	lr

200023d0 <__libc_init_array>:
200023d0:	b570      	push	{r4, r5, r6, lr}
200023d2:	f242 56d4 	movw	r6, #9684	; 0x25d4
200023d6:	f242 55d4 	movw	r5, #9684	; 0x25d4
200023da:	f2c2 0600 	movt	r6, #8192	; 0x2000
200023de:	f2c2 0500 	movt	r5, #8192	; 0x2000
200023e2:	1b76      	subs	r6, r6, r5
200023e4:	10b6      	asrs	r6, r6, #2
200023e6:	d006      	beq.n	200023f6 <__libc_init_array+0x26>
200023e8:	2400      	movs	r4, #0
200023ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
200023ee:	3401      	adds	r4, #1
200023f0:	4798      	blx	r3
200023f2:	42a6      	cmp	r6, r4
200023f4:	d8f9      	bhi.n	200023ea <__libc_init_array+0x1a>
200023f6:	f242 55d4 	movw	r5, #9684	; 0x25d4
200023fa:	f242 56d8 	movw	r6, #9688	; 0x25d8
200023fe:	f2c2 0500 	movt	r5, #8192	; 0x2000
20002402:	f2c2 0600 	movt	r6, #8192	; 0x2000
20002406:	1b76      	subs	r6, r6, r5
20002408:	f000 f8d8 	bl	200025bc <_init>
2000240c:	10b6      	asrs	r6, r6, #2
2000240e:	d006      	beq.n	2000241e <__libc_init_array+0x4e>
20002410:	2400      	movs	r4, #0
20002412:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20002416:	3401      	adds	r4, #1
20002418:	4798      	blx	r3
2000241a:	42a6      	cmp	r6, r4
2000241c:	d8f9      	bhi.n	20002412 <__libc_init_array+0x42>
2000241e:	bd70      	pop	{r4, r5, r6, pc}

20002420 <memset>:
20002420:	2a03      	cmp	r2, #3
20002422:	b2c9      	uxtb	r1, r1
20002424:	b430      	push	{r4, r5}
20002426:	d807      	bhi.n	20002438 <memset+0x18>
20002428:	b122      	cbz	r2, 20002434 <memset+0x14>
2000242a:	2300      	movs	r3, #0
2000242c:	54c1      	strb	r1, [r0, r3]
2000242e:	3301      	adds	r3, #1
20002430:	4293      	cmp	r3, r2
20002432:	d1fb      	bne.n	2000242c <memset+0xc>
20002434:	bc30      	pop	{r4, r5}
20002436:	4770      	bx	lr
20002438:	eb00 0c02 	add.w	ip, r0, r2
2000243c:	4603      	mov	r3, r0
2000243e:	e001      	b.n	20002444 <memset+0x24>
20002440:	f803 1c01 	strb.w	r1, [r3, #-1]
20002444:	f003 0403 	and.w	r4, r3, #3
20002448:	461a      	mov	r2, r3
2000244a:	3301      	adds	r3, #1
2000244c:	2c00      	cmp	r4, #0
2000244e:	d1f7      	bne.n	20002440 <memset+0x20>
20002450:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20002454:	ebc2 040c 	rsb	r4, r2, ip
20002458:	fb03 f301 	mul.w	r3, r3, r1
2000245c:	e01f      	b.n	2000249e <memset+0x7e>
2000245e:	f842 3c40 	str.w	r3, [r2, #-64]
20002462:	f842 3c3c 	str.w	r3, [r2, #-60]
20002466:	f842 3c38 	str.w	r3, [r2, #-56]
2000246a:	f842 3c34 	str.w	r3, [r2, #-52]
2000246e:	f842 3c30 	str.w	r3, [r2, #-48]
20002472:	f842 3c2c 	str.w	r3, [r2, #-44]
20002476:	f842 3c28 	str.w	r3, [r2, #-40]
2000247a:	f842 3c24 	str.w	r3, [r2, #-36]
2000247e:	f842 3c20 	str.w	r3, [r2, #-32]
20002482:	f842 3c1c 	str.w	r3, [r2, #-28]
20002486:	f842 3c18 	str.w	r3, [r2, #-24]
2000248a:	f842 3c14 	str.w	r3, [r2, #-20]
2000248e:	f842 3c10 	str.w	r3, [r2, #-16]
20002492:	f842 3c0c 	str.w	r3, [r2, #-12]
20002496:	f842 3c08 	str.w	r3, [r2, #-8]
2000249a:	f842 3c04 	str.w	r3, [r2, #-4]
2000249e:	4615      	mov	r5, r2
200024a0:	3240      	adds	r2, #64	; 0x40
200024a2:	2c3f      	cmp	r4, #63	; 0x3f
200024a4:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
200024a8:	dcd9      	bgt.n	2000245e <memset+0x3e>
200024aa:	462a      	mov	r2, r5
200024ac:	ebc5 040c 	rsb	r4, r5, ip
200024b0:	e007      	b.n	200024c2 <memset+0xa2>
200024b2:	f842 3c10 	str.w	r3, [r2, #-16]
200024b6:	f842 3c0c 	str.w	r3, [r2, #-12]
200024ba:	f842 3c08 	str.w	r3, [r2, #-8]
200024be:	f842 3c04 	str.w	r3, [r2, #-4]
200024c2:	4615      	mov	r5, r2
200024c4:	3210      	adds	r2, #16
200024c6:	2c0f      	cmp	r4, #15
200024c8:	f1a4 0410 	sub.w	r4, r4, #16
200024cc:	dcf1      	bgt.n	200024b2 <memset+0x92>
200024ce:	462a      	mov	r2, r5
200024d0:	ebc5 050c 	rsb	r5, r5, ip
200024d4:	e001      	b.n	200024da <memset+0xba>
200024d6:	f842 3c04 	str.w	r3, [r2, #-4]
200024da:	4614      	mov	r4, r2
200024dc:	3204      	adds	r2, #4
200024de:	2d03      	cmp	r5, #3
200024e0:	f1a5 0504 	sub.w	r5, r5, #4
200024e4:	dcf7      	bgt.n	200024d6 <memset+0xb6>
200024e6:	e001      	b.n	200024ec <memset+0xcc>
200024e8:	f804 1b01 	strb.w	r1, [r4], #1
200024ec:	4564      	cmp	r4, ip
200024ee:	d3fb      	bcc.n	200024e8 <memset+0xc8>
200024f0:	e7a0      	b.n	20002434 <memset+0x14>
200024f2:	bf00      	nop

200024f4 <frame_size>:
200024f4:	0010 0000                                   ....

200024f8 <modem_default>:
200024f8:	7472 0000                                   rt..

200024fc <g_config_reg_lut>:
200024fc:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
2000250c:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
2000251c:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
2000252c:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
2000253c:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
2000254c:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
2000255c:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
2000256c:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

2000257c <g_gpio_irqn_lut>:
2000257c:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
2000258c:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
2000259c:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
200025ac:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

200025bc <_init>:
200025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200025be:	bf00      	nop
200025c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
200025c2:	bc08      	pop	{r3}
200025c4:	469e      	mov	lr, r3
200025c6:	4770      	bx	lr

200025c8 <_fini>:
200025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200025ca:	bf00      	nop
200025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
200025ce:	bc08      	pop	{r3}
200025d0:	469e      	mov	lr, r3
200025d2:	4770      	bx	lr

200025d4 <__frame_dummy_init_array_entry>:
200025d4:	0485 2000                                   ... 

200025d8 <__do_global_dtors_aux_fini_array_entry>:
200025d8:	0471 2000                                   q.. 
