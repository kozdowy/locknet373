
lockNET_SF_MSS_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002630  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  20002630  20002630  0000a630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003d0  20002640  20002640  0000a640  2**2
                  ALLOC
  3 .stack        00003000  20002a10  20002a10  0000a640  2**0
                  ALLOC
  4 .comment      00000387  00000000  00000000  0000a640  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000008e0  00000000  00000000  0000a9c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001697  00000000  00000000  0000b2a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ba38  00000000  00000000  0000c93e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c6c  00000000  00000000  00018376  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006f74  00000000  00000000  00019fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002608  00000000  00000000  00020f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003687  00000000  00000000  00023560  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000344b  00000000  00000000  00026be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0009288f  00000000  00000000  0002a032  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  000bc8c1  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000878  00000000  00000000  000bc8e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20001235 	.word	0x20001235
2000006c:	20001265 	.word	0x20001265
20000070:	20001949 	.word	0x20001949
20000074:	20001979 	.word	0x20001979
20000078:	20001f75 	.word	0x20001f75
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	20001fa5 	.word	0x20001fa5
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	20000945 	.word	0x20000945
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000995 	.word	0x20000995
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000971 	.word	0x20000971
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>
20000332:	e7fe      	b.n	20000332 <DMA_IRQHandler+0x6>
20000334:	e7fe      	b.n	20000334 <DMA_IRQHandler+0x8>
20000336:	e7fe      	b.n	20000336 <DMA_IRQHandler+0xa>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>
2000034c:	e7fe      	b.n	2000034c <CommError_IRQHandler+0x2>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>
20000350:	e7fe      	b.n	20000350 <GPIO0_IRQHandler+0x2>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>
20000360:	e7fe      	b.n	20000360 <GPIO8_IRQHandler+0x2>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	200023fd 	.word	0x200023fd
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20002630 	.word	0x20002630
20000450:	20002630 	.word	0x20002630
20000454:	20002630 	.word	0x20002630
20000458:	20002640 	.word	0x20002640
2000045c:	00000000 	.word	0x00000000
20000460:	20002640 	.word	0x20002640
20000464:	20002a10 	.word	0x20002a10
20000468:	20002401 	.word	0x20002401
2000046c:	200009bd 	.word	0x200009bd

20000470 <__do_global_dtors_aux>:
20000470:	f242 6340 	movw	r3, #9792	; 0x2640
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f242 6030 	movw	r0, #9776	; 0x2630
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <MSS_GPIO_get_inputs>:
        gpio_inputs = MSS_GPIO_get_inputs();
    @endcode
 */
static __INLINE uint32_t
MSS_GPIO_get_inputs( void )
{
200004a0:	b480      	push	{r7}
200004a2:	af00      	add	r7, sp, #0
    return GPIO->GPIO_IN;
200004a4:	f243 0300 	movw	r3, #12288	; 0x3000
200004a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
200004ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
}
200004b0:	4618      	mov	r0, r3
200004b2:	46bd      	mov	sp, r7
200004b4:	bc80      	pop	{r7}
200004b6:	4770      	bx	lr

200004b8 <CS_init>:
 *  Created on: Nov 16, 2017
 *      Author: peces
 */
#include "contact_switch.h"

void CS_init(void){
200004b8:	b580      	push	{r7, lr}
200004ba:	af00      	add	r7, sp, #0
	MSS_GPIO_init();
200004bc:	f001 ff04 	bl	200022c8 <MSS_GPIO_init>
	MSS_GPIO_config( MSS_GPIO_4, MSS_GPIO_INPUT_MODE);
200004c0:	f04f 0004 	mov.w	r0, #4
200004c4:	f04f 0102 	mov.w	r1, #2
200004c8:	f001 ff2e 	bl	20002328 <MSS_GPIO_config>
}
200004cc:	bd80      	pop	{r7, pc}
200004ce:	bf00      	nop

200004d0 <CS_get_door_status>:

uint8_t CS_get_door_status(void){
200004d0:	b580      	push	{r7, lr}
200004d2:	b082      	sub	sp, #8
200004d4:	af00      	add	r7, sp, #0
	uint32_t inputs = MSS_GPIO_get_inputs();
200004d6:	f7ff ffe3 	bl	200004a0 <MSS_GPIO_get_inputs>
200004da:	4603      	mov	r3, r0
200004dc:	607b      	str	r3, [r7, #4]
	return (uint8_t) (inputs & MSS_GPIO_4_MASK) >> 4;
200004de:	687b      	ldr	r3, [r7, #4]
200004e0:	b2db      	uxtb	r3, r3
200004e2:	f003 0310 	and.w	r3, r3, #16
200004e6:	ea4f 1323 	mov.w	r3, r3, asr #4
200004ea:	b2db      	uxtb	r3, r3
}
200004ec:	4618      	mov	r0, r3
200004ee:	f107 0708 	add.w	r7, r7, #8
200004f2:	46bd      	mov	sp, r7
200004f4:	bd80      	pop	{r7, pc}
200004f6:	bf00      	nop

200004f8 <LORA_handle_interrupt>:

volatile uint8_t cad;
unsigned int cad_timeout;

void LORA_handle_interrupt(void)
{
200004f8:	b580      	push	{r7, lr}
200004fa:	b082      	sub	sp, #8
200004fc:	af00      	add	r7, sp, #0
    // Read the interrupt register
    uint8_t irq_flags = LORA_read(RH_RF95_REG_12_IRQ_FLAGS);
200004fe:	f04f 0012 	mov.w	r0, #18
20000502:	f000 f929 	bl	20000758 <LORA_read>
20000506:	4603      	mov	r3, r0
20000508:	71bb      	strb	r3, [r7, #6]
    //printf("LORA MODE: %u\r\n", mode);
    if (mode == LORA_MODE_RX && irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
2000050a:	f242 6348 	movw	r3, #9800	; 0x2648
2000050e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000512:	781b      	ldrb	r3, [r3, #0]
20000514:	2b02      	cmp	r3, #2
20000516:	d113      	bne.n	20000540 <LORA_handle_interrupt+0x48>
20000518:	79bb      	ldrb	r3, [r7, #6]
2000051a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
2000051e:	2b00      	cmp	r3, #0
20000520:	d00e      	beq.n	20000540 <LORA_handle_interrupt+0x48>
    {
    	rx_bad++;
20000522:	f242 7350 	movw	r3, #10064	; 0x2750
20000526:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000052a:	881b      	ldrh	r3, [r3, #0]
2000052c:	b29b      	uxth	r3, r3
2000052e:	f103 0301 	add.w	r3, r3, #1
20000532:	b29a      	uxth	r2, r3
20000534:	f242 7350 	movw	r3, #10064	; 0x2750
20000538:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000053c:	801a      	strh	r2, [r3, #0]
void LORA_handle_interrupt(void)
{
    // Read the interrupt register
    uint8_t irq_flags = LORA_read(RH_RF95_REG_12_IRQ_FLAGS);
    //printf("LORA MODE: %u\r\n", mode);
    if (mode == LORA_MODE_RX && irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
2000053e:	e081      	b.n	20000644 <LORA_handle_interrupt+0x14c>
    {
    	rx_bad++;
    }
    else if (mode == LORA_MODE_RX && irq_flags & RH_RF95_RX_DONE)
20000540:	f242 6348 	movw	r3, #9800	; 0x2648
20000544:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000548:	781b      	ldrb	r3, [r3, #0]
2000054a:	2b02      	cmp	r3, #2
2000054c:	d145      	bne.n	200005da <LORA_handle_interrupt+0xe2>
2000054e:	79bb      	ldrb	r3, [r7, #6]
20000550:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000554:	2b00      	cmp	r3, #0
20000556:	d040      	beq.n	200005da <LORA_handle_interrupt+0xe2>
    {
	// Have received a packet
		uint8_t len = LORA_read(RH_RF95_REG_13_RX_NB_BYTES);
20000558:	f04f 0013 	mov.w	r0, #19
2000055c:	f000 f8fc 	bl	20000758 <LORA_read>
20000560:	4603      	mov	r3, r0
20000562:	71fb      	strb	r3, [r7, #7]

		// Reset the fifo read ptr to the beginning of the packet
		LORA_write(RH_RF95_REG_0D_FIFO_ADDR_PTR, LORA_read(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
20000564:	f04f 0010 	mov.w	r0, #16
20000568:	f000 f8f6 	bl	20000758 <LORA_read>
2000056c:	4603      	mov	r3, r0
2000056e:	f04f 000d 	mov.w	r0, #13
20000572:	4619      	mov	r1, r3
20000574:	f000 f914 	bl	200007a0 <LORA_write>
		LORA_burst_read(RH_RF95_REG_00_FIFO, buf, len);
20000578:	79fb      	ldrb	r3, [r7, #7]
2000057a:	f04f 0000 	mov.w	r0, #0
2000057e:	f242 6150 	movw	r1, #9808	; 0x2650
20000582:	f2c2 0100 	movt	r1, #8192	; 0x2000
20000586:	461a      	mov	r2, r3
20000588:	f000 f948 	bl	2000081c <LORA_burst_read>
		buf_len = len;
2000058c:	f242 634d 	movw	r3, #9805	; 0x264d
20000590:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000594:	79fa      	ldrb	r2, [r7, #7]
20000596:	701a      	strb	r2, [r3, #0]
		LORA_write(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
20000598:	f04f 0012 	mov.w	r0, #18
2000059c:	f04f 01ff 	mov.w	r1, #255	; 0xff
200005a0:	f000 f8fe 	bl	200007a0 <LORA_write>

		// Remember the RSSI of this packet
		// this is according to the doc, but is it really correct?
		// weakest receiveable signals are reported RSSI at about -66
		last_rssi = LORA_read(RH_RF95_REG_1A_PKT_RSSI_VALUE) - 137;
200005a4:	f04f 001a 	mov.w	r0, #26
200005a8:	f000 f8d6 	bl	20000758 <LORA_read>
200005ac:	4603      	mov	r3, r0
200005ae:	f1a3 0389 	sub.w	r3, r3, #137	; 0x89
200005b2:	b29b      	uxth	r3, r3
200005b4:	461a      	mov	r2, r3
200005b6:	f242 6344 	movw	r3, #9796	; 0x2644
200005ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005be:	801a      	strh	r2, [r3, #0]

		// We have received a message.
		LORA_validate_rx_buf();
200005c0:	f000 f862 	bl	20000688 <LORA_validate_rx_buf>
		if (rx_buf_valid)
200005c4:	f242 634c 	movw	r3, #9804	; 0x264c
200005c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005cc:	781b      	ldrb	r3, [r3, #0]
200005ce:	b2db      	uxtb	r3, r3
200005d0:	2b00      	cmp	r3, #0
200005d2:	d036      	beq.n	20000642 <LORA_handle_interrupt+0x14a>
			LORA_set_mode_idle(); // Got one
200005d4:	f000 f840 	bl	20000658 <LORA_set_mode_idle>
    //printf("LORA MODE: %u\r\n", mode);
    if (mode == LORA_MODE_RX && irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
    {
    	rx_bad++;
    }
    else if (mode == LORA_MODE_RX && irq_flags & RH_RF95_RX_DONE)
200005d8:	e034      	b.n	20000644 <LORA_handle_interrupt+0x14c>
		// We have received a message.
		LORA_validate_rx_buf();
		if (rx_buf_valid)
			LORA_set_mode_idle(); // Got one
    }
    else if (mode == LORA_MODE_TX && irq_flags & RH_RF95_TX_DONE)
200005da:	f242 6348 	movw	r3, #9800	; 0x2648
200005de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005e2:	781b      	ldrb	r3, [r3, #0]
200005e4:	2b03      	cmp	r3, #3
200005e6:	d115      	bne.n	20000614 <LORA_handle_interrupt+0x11c>
200005e8:	79bb      	ldrb	r3, [r7, #6]
200005ea:	f003 0308 	and.w	r3, r3, #8
200005ee:	2b00      	cmp	r3, #0
200005f0:	d010      	beq.n	20000614 <LORA_handle_interrupt+0x11c>
    {
		tx_good++;
200005f2:	f242 634e 	movw	r3, #9806	; 0x264e
200005f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200005fa:	881b      	ldrh	r3, [r3, #0]
200005fc:	b29b      	uxth	r3, r3
200005fe:	f103 0301 	add.w	r3, r3, #1
20000602:	b29a      	uxth	r2, r3
20000604:	f242 634e 	movw	r3, #9806	; 0x264e
20000608:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000060c:	801a      	strh	r2, [r3, #0]
		LORA_set_mode_idle();
2000060e:	f000 f823 	bl	20000658 <LORA_set_mode_idle>
		// We have received a message.
		LORA_validate_rx_buf();
		if (rx_buf_valid)
			LORA_set_mode_idle(); // Got one
    }
    else if (mode == LORA_MODE_TX && irq_flags & RH_RF95_TX_DONE)
20000612:	e017      	b.n	20000644 <LORA_handle_interrupt+0x14c>
    {
		tx_good++;
		LORA_set_mode_idle();
    }
    else if (mode == LORA_MODE_CAD && irq_flags & RH_RF95_CAD_DONE)
20000614:	f242 6348 	movw	r3, #9800	; 0x2648
20000618:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000061c:	781b      	ldrb	r3, [r3, #0]
2000061e:	2b04      	cmp	r3, #4
20000620:	d110      	bne.n	20000644 <LORA_handle_interrupt+0x14c>
20000622:	79bb      	ldrb	r3, [r7, #6]
20000624:	f003 0304 	and.w	r3, r3, #4
20000628:	2b00      	cmp	r3, #0
2000062a:	d00b      	beq.n	20000644 <LORA_handle_interrupt+0x14c>
    {
        cad = irq_flags & RH_RF95_CAD_DETECTED;
2000062c:	79ba      	ldrb	r2, [r7, #6]
2000062e:	f002 0201 	and.w	r2, r2, #1
20000632:	f242 634b 	movw	r3, #9803	; 0x264b
20000636:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000063a:	701a      	strb	r2, [r3, #0]
        LORA_set_mode_idle();
2000063c:	f000 f80c 	bl	20000658 <LORA_set_mode_idle>
20000640:	e000      	b.n	20000644 <LORA_handle_interrupt+0x14c>
    //printf("LORA MODE: %u\r\n", mode);
    if (mode == LORA_MODE_RX && irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
    {
    	rx_bad++;
    }
    else if (mode == LORA_MODE_RX && irq_flags & RH_RF95_RX_DONE)
20000642:	bf00      	nop
    {
        cad = irq_flags & RH_RF95_CAD_DETECTED;
        LORA_set_mode_idle();
    }

    LORA_write(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
20000644:	f04f 0012 	mov.w	r0, #18
20000648:	f04f 01ff 	mov.w	r1, #255	; 0xff
2000064c:	f000 f8a8 	bl	200007a0 <LORA_write>
}
20000650:	f107 0708 	add.w	r7, r7, #8
20000654:	46bd      	mov	sp, r7
20000656:	bd80      	pop	{r7, pc}

20000658 <LORA_set_mode_idle>:
	LORA_set_tx_power(13, 0);

	return 0;
}

void LORA_set_mode_idle(void){
20000658:	b580      	push	{r7, lr}
2000065a:	af00      	add	r7, sp, #0
	if (mode != LORA_MODE_IDLE){
2000065c:	f242 6348 	movw	r3, #9800	; 0x2648
20000660:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000664:	781b      	ldrb	r3, [r3, #0]
20000666:	2b00      	cmp	r3, #0
20000668:	d00c      	beq.n	20000684 <LORA_set_mode_idle+0x2c>
		LORA_write(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
2000066a:	f04f 0001 	mov.w	r0, #1
2000066e:	f04f 0101 	mov.w	r1, #1
20000672:	f000 f895 	bl	200007a0 <LORA_write>
		mode = LORA_MODE_IDLE;
20000676:	f242 6348 	movw	r3, #9800	; 0x2648
2000067a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000067e:	f04f 0200 	mov.w	r2, #0
20000682:	701a      	strb	r2, [r3, #0]
	}
}
20000684:	bd80      	pop	{r7, pc}
20000686:	bf00      	nop

20000688 <LORA_validate_rx_buf>:
		// My measurements show 20dBm is correct
		LORA_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
	}
}

void LORA_validate_rx_buf(void){
20000688:	b480      	push	{r7}
2000068a:	af00      	add	r7, sp, #0
	if (buf_len < 4){
2000068c:	f242 634d 	movw	r3, #9805	; 0x264d
20000690:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000694:	781b      	ldrb	r3, [r3, #0]
20000696:	b2db      	uxtb	r3, r3
20000698:	2b03      	cmp	r3, #3
2000069a:	d959      	bls.n	20000750 <LORA_validate_rx_buf+0xc8>
		return;
	}
	rx_header_to = buf[0];
2000069c:	f242 6350 	movw	r3, #9808	; 0x2650
200006a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006a4:	781a      	ldrb	r2, [r3, #0]
200006a6:	f242 7359 	movw	r3, #10073	; 0x2759
200006aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006ae:	701a      	strb	r2, [r3, #0]
	rx_header_from = buf[1];
200006b0:	f242 6350 	movw	r3, #9808	; 0x2650
200006b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006b8:	785a      	ldrb	r2, [r3, #1]
200006ba:	f242 6349 	movw	r3, #9801	; 0x2649
200006be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006c2:	701a      	strb	r2, [r3, #0]
	rx_header_id = buf[2];
200006c4:	f242 6350 	movw	r3, #9808	; 0x2650
200006c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006cc:	789a      	ldrb	r2, [r3, #2]
200006ce:	f242 7358 	movw	r3, #10072	; 0x2758
200006d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006d6:	701a      	strb	r2, [r3, #0]
	rx_header_flags = buf[3];
200006d8:	f242 6350 	movw	r3, #9808	; 0x2650
200006dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006e0:	78da      	ldrb	r2, [r3, #3]
200006e2:	f242 634a 	movw	r3, #9802	; 0x264a
200006e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006ea:	701a      	strb	r2, [r3, #0]
	if (promiscuous ||
200006ec:	f242 6341 	movw	r3, #9793	; 0x2641
200006f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200006f4:	781b      	ldrb	r3, [r3, #0]
200006f6:	2b00      	cmp	r3, #0
200006f8:	d114      	bne.n	20000724 <LORA_validate_rx_buf+0x9c>
			rx_header_to == this_address ||
200006fa:	f242 7359 	movw	r3, #10073	; 0x2759
200006fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000702:	781b      	ldrb	r3, [r3, #0]
20000704:	b2da      	uxtb	r2, r3
20000706:	f242 6334 	movw	r3, #9780	; 0x2634
2000070a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000070e:	781b      	ldrb	r3, [r3, #0]
	}
	rx_header_to = buf[0];
	rx_header_from = buf[1];
	rx_header_id = buf[2];
	rx_header_flags = buf[3];
	if (promiscuous ||
20000710:	429a      	cmp	r2, r3
20000712:	d007      	beq.n	20000724 <LORA_validate_rx_buf+0x9c>
			rx_header_to == this_address ||
			rx_header_to == RH_BROADCAST_ADDRESS){
20000714:	f242 7359 	movw	r3, #10073	; 0x2759
20000718:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000071c:	781b      	ldrb	r3, [r3, #0]
2000071e:	b2db      	uxtb	r3, r3
	}
	rx_header_to = buf[0];
	rx_header_from = buf[1];
	rx_header_id = buf[2];
	rx_header_flags = buf[3];
	if (promiscuous ||
20000720:	2bff      	cmp	r3, #255	; 0xff
20000722:	d116      	bne.n	20000752 <LORA_validate_rx_buf+0xca>
			rx_header_to == this_address ||
			rx_header_to == RH_BROADCAST_ADDRESS){
		rx_good++;
20000724:	f242 6346 	movw	r3, #9798	; 0x2646
20000728:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000072c:	881b      	ldrh	r3, [r3, #0]
2000072e:	b29b      	uxth	r3, r3
20000730:	f103 0301 	add.w	r3, r3, #1
20000734:	b29a      	uxth	r2, r3
20000736:	f242 6346 	movw	r3, #9798	; 0x2646
2000073a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000073e:	801a      	strh	r2, [r3, #0]
		rx_buf_valid = 1;
20000740:	f242 634c 	movw	r3, #9804	; 0x264c
20000744:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000748:	f04f 0201 	mov.w	r2, #1
2000074c:	701a      	strb	r2, [r3, #0]
2000074e:	e000      	b.n	20000752 <LORA_validate_rx_buf+0xca>
	}
}

void LORA_validate_rx_buf(void){
	if (buf_len < 4){
		return;
20000750:	bf00      	nop
			rx_header_to == this_address ||
			rx_header_to == RH_BROADCAST_ADDRESS){
		rx_good++;
		rx_buf_valid = 1;
	}
}
20000752:	46bd      	mov	sp, r7
20000754:	bc80      	pop	{r7}
20000756:	4770      	bx	lr

20000758 <LORA_read>:
    }
    LORA_clear_rx_buf(); // This message accepted and cleared
    return TRUE;
}

uint8_t LORA_read(uint8_t addr){
20000758:	b580      	push	{r7, lr}
2000075a:	b084      	sub	sp, #16
2000075c:	af00      	add	r7, sp, #0
2000075e:	4603      	mov	r3, r0
20000760:	71fb      	strb	r3, [r7, #7]
	uint8_t response;
	//MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
	MSS_GPIO_set_output(MSS_GPIO_8, 0);
20000762:	f04f 0008 	mov.w	r0, #8
20000766:	f04f 0100 	mov.w	r1, #0
2000076a:	f001 fde9 	bl	20002340 <MSS_GPIO_set_output>
	response = MSS_SPI_transfer_frame(&g_mss_spi1, addr << 8);
2000076e:	79fb      	ldrb	r3, [r7, #7]
20000770:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000774:	f642 001c 	movw	r0, #10268	; 0x281c
20000778:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000077c:	4619      	mov	r1, r3
2000077e:	f000 ff29 	bl	200015d4 <MSS_SPI_transfer_frame>
20000782:	4603      	mov	r3, r0
20000784:	73fb      	strb	r3, [r7, #15]
	MSS_GPIO_set_output(MSS_GPIO_8, 1);
20000786:	f04f 0008 	mov.w	r0, #8
2000078a:	f04f 0101 	mov.w	r1, #1
2000078e:	f001 fdd7 	bl	20002340 <MSS_GPIO_set_output>
	//MSS_SPI_clear_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
	return response;
20000792:	7bfb      	ldrb	r3, [r7, #15]
}
20000794:	4618      	mov	r0, r3
20000796:	f107 0710 	add.w	r7, r7, #16
2000079a:	46bd      	mov	sp, r7
2000079c:	bd80      	pop	{r7, pc}
2000079e:	bf00      	nop

200007a0 <LORA_write>:

void LORA_write(uint8_t addr, uint8_t data){
200007a0:	b580      	push	{r7, lr}
200007a2:	b084      	sub	sp, #16
200007a4:	af00      	add	r7, sp, #0
200007a6:	4602      	mov	r2, r0
200007a8:	460b      	mov	r3, r1
200007aa:	71fa      	strb	r2, [r7, #7]
200007ac:	71bb      	strb	r3, [r7, #6]
	uint16_t cmd = (1 << 15) | (addr << 8) | data;
200007ae:	79fb      	ldrb	r3, [r7, #7]
200007b0:	ea4f 2303 	mov.w	r3, r3, lsl #8
200007b4:	b29b      	uxth	r3, r3
200007b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
200007ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
200007be:	b29a      	uxth	r2, r3
200007c0:	79bb      	ldrb	r3, [r7, #6]
200007c2:	ea42 0303 	orr.w	r3, r2, r3
200007c6:	b29b      	uxth	r3, r3
200007c8:	81fb      	strh	r3, [r7, #14]
	MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
200007ca:	f642 001c 	movw	r0, #10268	; 0x281c
200007ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
200007d2:	f04f 0100 	mov.w	r1, #0
200007d6:	f000 fe4f 	bl	20001478 <MSS_SPI_set_slave_select>
	MSS_GPIO_set_output(MSS_GPIO_8, 0);
200007da:	f04f 0008 	mov.w	r0, #8
200007de:	f04f 0100 	mov.w	r1, #0
200007e2:	f001 fdad 	bl	20002340 <MSS_GPIO_set_output>
	MSS_SPI_transfer_frame( &g_mss_spi1, cmd);
200007e6:	89fb      	ldrh	r3, [r7, #14]
200007e8:	f642 001c 	movw	r0, #10268	; 0x281c
200007ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
200007f0:	4619      	mov	r1, r3
200007f2:	f000 feef 	bl	200015d4 <MSS_SPI_transfer_frame>
	MSS_GPIO_set_output(MSS_GPIO_8, 1);
200007f6:	f04f 0008 	mov.w	r0, #8
200007fa:	f04f 0101 	mov.w	r1, #1
200007fe:	f001 fd9f 	bl	20002340 <MSS_GPIO_set_output>
	MSS_SPI_clear_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000802:	f642 001c 	movw	r0, #10268	; 0x281c
20000806:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000080a:	f04f 0100 	mov.w	r1, #0
2000080e:	f000 fe99 	bl	20001544 <MSS_SPI_clear_slave_select>
}
20000812:	f107 0710 	add.w	r7, r7, #16
20000816:	46bd      	mov	sp, r7
20000818:	bd80      	pop	{r7, pc}
2000081a:	bf00      	nop

2000081c <LORA_burst_read>:

// TODO: make sure these can properly do burst
uint8_t LORA_burst_read(uint8_t addr, uint8_t* res, uint8_t len){
2000081c:	b590      	push	{r4, r7, lr}
2000081e:	b089      	sub	sp, #36	; 0x24
20000820:	af02      	add	r7, sp, #8
20000822:	60b9      	str	r1, [r7, #8]
20000824:	4613      	mov	r3, r2
20000826:	4602      	mov	r2, r0
20000828:	73fa      	strb	r2, [r7, #15]
2000082a:	71fb      	strb	r3, [r7, #7]
	MSS_SPI_configure_master_mode
2000082c:	f242 5325 	movw	r3, #9509	; 0x2525
20000830:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000834:	781b      	ldrb	r3, [r3, #0]
20000836:	9300      	str	r3, [sp, #0]
20000838:	f642 001c 	movw	r0, #10268	; 0x281c
2000083c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000840:	f04f 0100 	mov.w	r1, #0
20000844:	f04f 0200 	mov.w	r2, #0
20000848:	f04f 0307 	mov.w	r3, #7
2000084c:	f000 fd94 	bl	20001378 <MSS_SPI_configure_master_mode>
			MSS_SPI_SLAVE_0,
			MSS_SPI_MODE0,
			MSS_SPI_PCLK_DIV_256,
			burst_frame_size
		);
  uint8_t status = 0;
20000850:	f04f 0300 	mov.w	r3, #0
20000854:	74fb      	strb	r3, [r7, #19]
  MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
20000856:	f642 001c 	movw	r0, #10268	; 0x281c
2000085a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000085e:	f04f 0100 	mov.w	r1, #0
20000862:	f000 fe09 	bl	20001478 <MSS_SPI_set_slave_select>
  MSS_GPIO_set_output(MSS_GPIO_8, 0);
20000866:	f04f 0008 	mov.w	r0, #8
2000086a:	f04f 0100 	mov.w	r1, #0
2000086e:	f001 fd67 	bl	20002340 <MSS_GPIO_set_output>
  status = MSS_SPI_transfer_frame(&g_mss_spi1, addr);
20000872:	7bfb      	ldrb	r3, [r7, #15]
20000874:	f642 001c 	movw	r0, #10268	; 0x281c
20000878:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000087c:	4619      	mov	r1, r3
2000087e:	f000 fea9 	bl	200015d4 <MSS_SPI_transfer_frame>
20000882:	4603      	mov	r3, r0
20000884:	74fb      	strb	r3, [r7, #19]
  int i;
  for (i = 0; i < len; ++i){
20000886:	f04f 0300 	mov.w	r3, #0
2000088a:	617b      	str	r3, [r7, #20]
2000088c:	e012      	b.n	200008b4 <LORA_burst_read+0x98>
    res[i] = MSS_SPI_transfer_frame(&g_mss_spi1, 0);
2000088e:	697a      	ldr	r2, [r7, #20]
20000890:	68bb      	ldr	r3, [r7, #8]
20000892:	eb02 0403 	add.w	r4, r2, r3
20000896:	f642 001c 	movw	r0, #10268	; 0x281c
2000089a:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000089e:	f04f 0100 	mov.w	r1, #0
200008a2:	f000 fe97 	bl	200015d4 <MSS_SPI_transfer_frame>
200008a6:	4603      	mov	r3, r0
200008a8:	b2db      	uxtb	r3, r3
200008aa:	7023      	strb	r3, [r4, #0]
  uint8_t status = 0;
  MSS_SPI_set_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
  MSS_GPIO_set_output(MSS_GPIO_8, 0);
  status = MSS_SPI_transfer_frame(&g_mss_spi1, addr);
  int i;
  for (i = 0; i < len; ++i){
200008ac:	697b      	ldr	r3, [r7, #20]
200008ae:	f103 0301 	add.w	r3, r3, #1
200008b2:	617b      	str	r3, [r7, #20]
200008b4:	79fa      	ldrb	r2, [r7, #7]
200008b6:	697b      	ldr	r3, [r7, #20]
200008b8:	429a      	cmp	r2, r3
200008ba:	dce8      	bgt.n	2000088e <LORA_burst_read+0x72>
    res[i] = MSS_SPI_transfer_frame(&g_mss_spi1, 0);
  }
  MSS_GPIO_set_output(MSS_GPIO_8, 1);
200008bc:	f04f 0008 	mov.w	r0, #8
200008c0:	f04f 0101 	mov.w	r1, #1
200008c4:	f001 fd3c 	bl	20002340 <MSS_GPIO_set_output>
  MSS_SPI_clear_slave_select(&g_mss_spi1, MSS_SPI_SLAVE_0);
200008c8:	f642 001c 	movw	r0, #10268	; 0x281c
200008cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008d0:	f04f 0100 	mov.w	r1, #0
200008d4:	f000 fe36 	bl	20001544 <MSS_SPI_clear_slave_select>
  MSS_SPI_configure_master_mode
200008d8:	f242 5324 	movw	r3, #9508	; 0x2524
200008dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008e0:	781b      	ldrb	r3, [r3, #0]
200008e2:	9300      	str	r3, [sp, #0]
200008e4:	f642 001c 	movw	r0, #10268	; 0x281c
200008e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008ec:	f04f 0100 	mov.w	r1, #0
200008f0:	f04f 0200 	mov.w	r2, #0
200008f4:	f04f 0307 	mov.w	r3, #7
200008f8:	f000 fd3e 	bl	20001378 <MSS_SPI_configure_master_mode>
  		MSS_SPI_SLAVE_0,
  		MSS_SPI_MODE0,
  		MSS_SPI_PCLK_DIV_256,
  		frame_size
  	);
  return status;
200008fc:	7cfb      	ldrb	r3, [r7, #19]
}
200008fe:	4618      	mov	r0, r3
20000900:	f107 071c 	add.w	r7, r7, #28
20000904:	46bd      	mov	sp, r7
20000906:	bd90      	pop	{r4, r7, pc}

20000908 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000908:	b480      	push	{r7}
2000090a:	b083      	sub	sp, #12
2000090c:	af00      	add	r7, sp, #0
2000090e:	4603      	mov	r3, r0
20000910:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000912:	f24e 1300 	movw	r3, #57600	; 0xe100
20000916:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000091a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000091e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000922:	88f9      	ldrh	r1, [r7, #6]
20000924:	f001 011f 	and.w	r1, r1, #31
20000928:	f04f 0001 	mov.w	r0, #1
2000092c:	fa00 f101 	lsl.w	r1, r0, r1
20000930:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000938:	f107 070c 	add.w	r7, r7, #12
2000093c:	46bd      	mov	sp, r7
2000093e:	bc80      	pop	{r7}
20000940:	4770      	bx	lr
20000942:	bf00      	nop

20000944 <Fabric_IRQHandler>:
#include "unit_tests.h"
//#include "lora_server_ex.h"

uint8_t RSA_result_ready = 0;

__attribute__ ((interrupt)) void Fabric_IRQHandler( void ){
20000944:	4668      	mov	r0, sp
20000946:	f020 0107 	bic.w	r1, r0, #7
2000094a:	468d      	mov	sp, r1
2000094c:	b589      	push	{r0, r3, r7, lr}
2000094e:	af00      	add	r7, sp, #0
	RSA_result_ready = 1;
20000950:	f242 6342 	movw	r3, #9794	; 0x2642
20000954:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000958:	f04f 0201 	mov.w	r2, #1
2000095c:	701a      	strb	r2, [r3, #0]
	NVIC_ClearPendingIRQ( Fabric_IRQn );
2000095e:	f04f 001f 	mov.w	r0, #31
20000962:	f7ff ffd1 	bl	20000908 <NVIC_ClearPendingIRQ>
}
20000966:	46bd      	mov	sp, r7
20000968:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000096c:	4685      	mov	sp, r0
2000096e:	4770      	bx	lr

20000970 <GPIO9_IRQHandler>:

__attribute__ ((interrupt)) void GPIO9_IRQHandler( void ){
20000970:	4668      	mov	r0, sp
20000972:	f020 0107 	bic.w	r1, r0, #7
20000976:	468d      	mov	sp, r1
20000978:	b589      	push	{r0, r3, r7, lr}
2000097a:	af00      	add	r7, sp, #0
	MSS_GPIO_clear_irq(MSS_GPIO_9);
2000097c:	f04f 0009 	mov.w	r0, #9
20000980:	f001 fd10 	bl	200023a4 <MSS_GPIO_clear_irq>
	LORA_handle_interrupt();
20000984:	f7ff fdb8 	bl	200004f8 <LORA_handle_interrupt>
}
20000988:	46bd      	mov	sp, r7
2000098a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000098e:	4685      	mov	sp, r0
20000990:	4770      	bx	lr
20000992:	bf00      	nop

20000994 <GPIO1_IRQHandler>:

// Interrupts Handler
__attribute__ ((interrupt)) void GPIO1_IRQHandler( void )
{
20000994:	4668      	mov	r0, sp
20000996:	f020 0107 	bic.w	r1, r0, #7
2000099a:	468d      	mov	sp, r1
2000099c:	b589      	push	{r0, r3, r7, lr}
2000099e:	af00      	add	r7, sp, #0
	MSS_GPIO_clear_irq(MSS_GPIO_1);
200009a0:	f04f 0001 	mov.w	r0, #1
200009a4:	f001 fcfe 	bl	200023a4 <MSS_GPIO_clear_irq>
	nfc_set_interrupt_handled(0);
200009a8:	f04f 0000 	mov.w	r0, #0
200009ac:	f000 fb90 	bl	200010d0 <nfc_set_interrupt_handled>
}
200009b0:	46bd      	mov	sp, r7
200009b2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200009b6:	4685      	mov	sp, r0
200009b8:	4770      	bx	lr
200009ba:	bf00      	nop

200009bc <main>:
void state_machine_door(void);
void TEST_state_machine(void);

// Main program
int main()
{
200009bc:	b580      	push	{r7, lr}
200009be:	b082      	sub	sp, #8
200009c0:	af00      	add	r7, sp, #0
	init_modules();
200009c2:	f000 f819 	bl	200009f8 <init_modules>
	int i;
	for(i = 0; i < 1000000; ++i);
200009c6:	f04f 0300 	mov.w	r3, #0
200009ca:	607b      	str	r3, [r7, #4]
200009cc:	e003      	b.n	200009d6 <main+0x1a>
200009ce:	687b      	ldr	r3, [r7, #4]
200009d0:	f103 0301 	add.w	r3, r3, #1
200009d4:	607b      	str	r3, [r7, #4]
200009d6:	687a      	ldr	r2, [r7, #4]
200009d8:	f244 233f 	movw	r3, #16959	; 0x423f
200009dc:	f2c0 030f 	movt	r3, #15
200009e0:	429a      	cmp	r2, r3
200009e2:	ddf4      	ble.n	200009ce <main+0x12>
	//nfc_InListPassiveTarget();
	//while(nfc_is_interrupt_handled());
	//nfc_read_response();
	//while(nfc_is_interrupt_handled());
	//nfc_read_response();
	TEST_state_machine();
200009e4:	f000 f818 	bl	20000a18 <TEST_state_machine>
	return(0);
200009e8:	f04f 0300 	mov.w	r3, #0
}
200009ec:	4618      	mov	r0, r3
200009ee:	f107 0708 	add.w	r7, r7, #8
200009f2:	46bd      	mov	sp, r7
200009f4:	bd80      	pop	{r7, pc}
200009f6:	bf00      	nop

200009f8 <init_modules>:

void init_modules(void){
200009f8:	b580      	push	{r7, lr}
200009fa:	af00      	add	r7, sp, #0
	MSS_GPIO_init();
200009fc:	f001 fc64 	bl	200022c8 <MSS_GPIO_init>
	RSA_init();
20000a00:	f000 fbb6 	bl	20001170 <RSA_init>
	NP_init();
20000a04:	f000 f8aa 	bl	20000b5c <NP_init>
	CS_init();
20000a08:	f7ff fd56 	bl	200004b8 <CS_init>
	SERVO_init();
20000a0c:	f000 fbbc 	bl	20001188 <SERVO_init>
	nfc_init();
20000a10:	f000 f8ca 	bl	20000ba8 <nfc_init>
}
20000a14:	bd80      	pop	{r7, pc}
20000a16:	bf00      	nop

20000a18 <TEST_state_machine>:

void TEST_state_machine(void){
20000a18:	b580      	push	{r7, lr}
20000a1a:	b084      	sub	sp, #16
20000a1c:	af00      	add	r7, sp, #0
	uint8_t NFC_BLUE_ID[4] = {0x9B, 0x46, 0x0E, 0x89};
20000a1e:	f242 5328 	movw	r3, #9512	; 0x2528
20000a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a26:	681b      	ldr	r3, [r3, #0]
20000a28:	607b      	str	r3, [r7, #4]
	uint8_t NFC_CARD_ID[4] = {0xA8, 0x56, 0x10, 0x00};
20000a2a:	f242 532c 	movw	r3, #9516	; 0x252c
20000a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a32:	681b      	ldr	r3, [r3, #0]
20000a34:	603b      	str	r3, [r7, #0]
	nfc_InListPassiveTarget();
20000a36:	f000 fafd 	bl	20001034 <nfc_InListPassiveTarget>
20000a3a:	e000      	b.n	20000a3e <TEST_state_machine+0x26>
				SERVO_lock();
				NP_set_pixel(NP_COLOUR_BLUE);
				NP_apply();
			}
		}
	}
20000a3c:	bf00      	nop
	uint8_t NFC_BLUE_ID[4] = {0x9B, 0x46, 0x0E, 0x89};
	uint8_t NFC_CARD_ID[4] = {0xA8, 0x56, 0x10, 0x00};
	nfc_InListPassiveTarget();

	while(1){
		if (CS_get_door_status() == CS_DOOR_OPEN){
20000a3e:	f7ff fd47 	bl	200004d0 <CS_get_door_status>
20000a42:	4603      	mov	r3, r0
20000a44:	2b01      	cmp	r3, #1
20000a46:	d108      	bne.n	20000a5a <TEST_state_machine+0x42>
			NP_set_pixel(NP_COLOUR_YELLOW);
20000a48:	f24a 4000 	movw	r0, #41984	; 0xa400
20000a4c:	f2c0 0083 	movt	r0, #131	; 0x83
20000a50:	f000 f88a 	bl	20000b68 <NP_set_pixel>
			NP_apply();
20000a54:	f000 f89a 	bl	20000b8c <NP_apply>
				SERVO_lock();
				NP_set_pixel(NP_COLOUR_BLUE);
				NP_apply();
			}
		}
	}
20000a58:	e7f1      	b.n	20000a3e <TEST_state_machine+0x26>
		if (CS_get_door_status() == CS_DOOR_OPEN){
			NP_set_pixel(NP_COLOUR_YELLOW);
			NP_apply();
			//SERVO_unlock();
		} else{
			if(!nfc_is_interrupt_handled()){
20000a5a:	f000 fb2d 	bl	200010b8 <nfc_is_interrupt_handled>
20000a5e:	4603      	mov	r3, r0
20000a60:	2b00      	cmp	r3, #0
20000a62:	d16a      	bne.n	20000b3a <TEST_state_machine+0x122>
				nfc_read_response();
20000a64:	f000 f99c 	bl	20000da0 <nfc_read_response>
				if(!nfc_last_was_ack()){
20000a68:	f000 fb76 	bl	20001158 <nfc_last_was_ack>
20000a6c:	4603      	mov	r3, r0
20000a6e:	2b00      	cmp	r3, #0
20000a70:	d163      	bne.n	20000b3a <TEST_state_machine+0x122>
					int i = 0;
20000a72:	f04f 0300 	mov.w	r3, #0
20000a76:	60bb      	str	r3, [r7, #8]
					int correct_nfc = 1;
20000a78:	f04f 0301 	mov.w	r3, #1
20000a7c:	60fb      	str	r3, [r7, #12]
					for(i = 17; i > 13 && correct_nfc == 1; --i){
20000a7e:	f04f 0311 	mov.w	r3, #17
20000a82:	60bb      	str	r3, [r7, #8]
20000a84:	e016      	b.n	20000ab4 <TEST_state_machine+0x9c>
						if(nfc_get_response_buffer()[i] != NFC_BLUE_ID[i - 14]){
20000a86:	f000 fa01 	bl	20000e8c <nfc_get_response_buffer>
20000a8a:	4602      	mov	r2, r0
20000a8c:	68bb      	ldr	r3, [r7, #8]
20000a8e:	4413      	add	r3, r2
20000a90:	781a      	ldrb	r2, [r3, #0]
20000a92:	68bb      	ldr	r3, [r7, #8]
20000a94:	f1a3 030e 	sub.w	r3, r3, #14
20000a98:	f107 0110 	add.w	r1, r7, #16
20000a9c:	440b      	add	r3, r1
20000a9e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
20000aa2:	429a      	cmp	r2, r3
20000aa4:	d002      	beq.n	20000aac <TEST_state_machine+0x94>
							correct_nfc = 0;
20000aa6:	f04f 0300 	mov.w	r3, #0
20000aaa:	60fb      	str	r3, [r7, #12]
			if(!nfc_is_interrupt_handled()){
				nfc_read_response();
				if(!nfc_last_was_ack()){
					int i = 0;
					int correct_nfc = 1;
					for(i = 17; i > 13 && correct_nfc == 1; --i){
20000aac:	68bb      	ldr	r3, [r7, #8]
20000aae:	f103 33ff 	add.w	r3, r3, #4294967295
20000ab2:	60bb      	str	r3, [r7, #8]
20000ab4:	68bb      	ldr	r3, [r7, #8]
20000ab6:	2b0d      	cmp	r3, #13
20000ab8:	dd02      	ble.n	20000ac0 <TEST_state_machine+0xa8>
20000aba:	68fb      	ldr	r3, [r7, #12]
20000abc:	2b01      	cmp	r3, #1
20000abe:	d0e2      	beq.n	20000a86 <TEST_state_machine+0x6e>
						if(nfc_get_response_buffer()[i] != NFC_BLUE_ID[i - 14]){
							correct_nfc = 0;
						}
					}
					if(correct_nfc == 1){
20000ac0:	68fb      	ldr	r3, [r7, #12]
20000ac2:	2b01      	cmp	r3, #1
20000ac4:	d119      	bne.n	20000afa <TEST_state_machine+0xe2>
						SERVO_unlock();
20000ac6:	f000 fb71 	bl	200011ac <SERVO_unlock>
						NP_set_pixel(NP_COLOUR_GREEN);
20000aca:	f241 0030 	movw	r0, #4144	; 0x1030
20000ace:	f2c0 0090 	movt	r0, #144	; 0x90
20000ad2:	f000 f849 	bl	20000b68 <NP_set_pixel>
						NP_apply();
20000ad6:	f000 f859 	bl	20000b8c <NP_apply>
						for(i = 0; i < 10000000; ++i);
20000ada:	f04f 0300 	mov.w	r3, #0
20000ade:	60bb      	str	r3, [r7, #8]
20000ae0:	e003      	b.n	20000aea <TEST_state_machine+0xd2>
20000ae2:	68bb      	ldr	r3, [r7, #8]
20000ae4:	f103 0301 	add.w	r3, r3, #1
20000ae8:	60bb      	str	r3, [r7, #8]
20000aea:	68ba      	ldr	r2, [r7, #8]
20000aec:	f249 637f 	movw	r3, #38527	; 0x967f
20000af0:	f2c0 0398 	movt	r3, #152	; 0x98
20000af4:	429a      	cmp	r2, r3
20000af6:	ddf4      	ble.n	20000ae2 <TEST_state_machine+0xca>
20000af8:	e01d      	b.n	20000b36 <TEST_state_machine+0x11e>
					}else{
						if(CS_get_door_status() == CS_DOOR_CLOSED){
20000afa:	f7ff fce9 	bl	200004d0 <CS_get_door_status>
20000afe:	4603      	mov	r3, r0
20000b00:	2b00      	cmp	r3, #0
20000b02:	d101      	bne.n	20000b08 <TEST_state_machine+0xf0>
							SERVO_lock();
20000b04:	f000 fb46 	bl	20001194 <SERVO_lock>
						}
						NP_set_pixel(NP_COLOUR_RED);
20000b08:	f649 1025 	movw	r0, #39205	; 0x9925
20000b0c:	f2c0 0020 	movt	r0, #32
20000b10:	f000 f82a 	bl	20000b68 <NP_set_pixel>
						NP_apply();
20000b14:	f000 f83a 	bl	20000b8c <NP_apply>
						for(i = 0; i < 10000000; ++i);
20000b18:	f04f 0300 	mov.w	r3, #0
20000b1c:	60bb      	str	r3, [r7, #8]
20000b1e:	e003      	b.n	20000b28 <TEST_state_machine+0x110>
20000b20:	68bb      	ldr	r3, [r7, #8]
20000b22:	f103 0301 	add.w	r3, r3, #1
20000b26:	60bb      	str	r3, [r7, #8]
20000b28:	68ba      	ldr	r2, [r7, #8]
20000b2a:	f249 637f 	movw	r3, #38527	; 0x967f
20000b2e:	f2c0 0398 	movt	r3, #152	; 0x98
20000b32:	429a      	cmp	r2, r3
20000b34:	ddf4      	ble.n	20000b20 <TEST_state_machine+0x108>
					}
					nfc_InListPassiveTarget();
20000b36:	f000 fa7d 	bl	20001034 <nfc_InListPassiveTarget>
				}
			}
			if(CS_get_door_status() == CS_DOOR_CLOSED){
20000b3a:	f7ff fcc9 	bl	200004d0 <CS_get_door_status>
20000b3e:	4603      	mov	r3, r0
20000b40:	2b00      	cmp	r3, #0
20000b42:	f47f af7b 	bne.w	20000a3c <TEST_state_machine+0x24>
				SERVO_lock();
20000b46:	f000 fb25 	bl	20001194 <SERVO_lock>
				NP_set_pixel(NP_COLOUR_BLUE);
20000b4a:	f240 0088 	movw	r0, #136	; 0x88
20000b4e:	f2c0 0020 	movt	r0, #32
20000b52:	f000 f809 	bl	20000b68 <NP_set_pixel>
				NP_apply();
20000b56:	f000 f819 	bl	20000b8c <NP_apply>
			}
		}
	}
20000b5a:	e770      	b.n	20000a3e <TEST_state_machine+0x26>

20000b5c <NP_init>:

#include "neopixel.h"

volatile uint32_t *NP_ADDRESS = (uint32_t*) 0x40050000;

void NP_init(void){
20000b5c:	b480      	push	{r7}
20000b5e:	af00      	add	r7, sp, #0
	// intentionally empty
}
20000b60:	46bd      	mov	sp, r7
20000b62:	bc80      	pop	{r7}
20000b64:	4770      	bx	lr
20000b66:	bf00      	nop

20000b68 <NP_set_pixel>:

void NP_set_pixel(uint32_t colour){
20000b68:	b480      	push	{r7}
20000b6a:	b083      	sub	sp, #12
20000b6c:	af00      	add	r7, sp, #0
20000b6e:	6078      	str	r0, [r7, #4]
	*(NP_ADDRESS) = NP_CONTROL_SET | colour;
20000b70:	f242 6338 	movw	r3, #9784	; 0x2638
20000b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b78:	681b      	ldr	r3, [r3, #0]
20000b7a:	687a      	ldr	r2, [r7, #4]
20000b7c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
20000b80:	601a      	str	r2, [r3, #0]
}
20000b82:	f107 070c 	add.w	r7, r7, #12
20000b86:	46bd      	mov	sp, r7
20000b88:	bc80      	pop	{r7}
20000b8a:	4770      	bx	lr

20000b8c <NP_apply>:
	set_colour |= (uint32_t) blue;
	set_colour |= NP_CONTROL_SET;
	*(NP_ADDRESS) = set_colour;
}

void NP_apply(void){
20000b8c:	b480      	push	{r7}
20000b8e:	af00      	add	r7, sp, #0
	*(NP_ADDRESS) = NP_CONTROL_APPLY;
20000b90:	f242 6338 	movw	r3, #9784	; 0x2638
20000b94:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b98:	681b      	ldr	r3, [r3, #0]
20000b9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
20000b9e:	601a      	str	r2, [r3, #0]
}
20000ba0:	46bd      	mov	sp, r7
20000ba2:	bc80      	pop	{r7}
20000ba4:	4770      	bx	lr
20000ba6:	bf00      	nop

20000ba8 <nfc_init>:
/* Function for setting up the NFC module
 * Description:
 * Receives: 	Nothing
 * Returns:		Nothing
 */
void nfc_init(void){
20000ba8:	b580      	push	{r7, lr}
20000baa:	b082      	sub	sp, #8
20000bac:	af00      	add	r7, sp, #0
	MSS_I2C_init(&g_mss_i2c1 , PN532_I2C_ADDRESS, MSS_I2C_PCLK_DIV_960 );
20000bae:	f642 1098 	movw	r0, #10648	; 0x2998
20000bb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000bb6:	f04f 0124 	mov.w	r1, #36	; 0x24
20000bba:	f04f 0204 	mov.w	r2, #4
20000bbe:	f001 faf5 	bl	200021ac <MSS_I2C_init>
	MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_OUTPUT_MODE);
20000bc2:	f04f 0000 	mov.w	r0, #0
20000bc6:	f04f 0105 	mov.w	r1, #5
20000bca:	f001 fbad 	bl	20002328 <MSS_GPIO_config>
	MSS_GPIO_config( MSS_GPIO_1, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_NEGATIVE );
20000bce:	f04f 0001 	mov.w	r0, #1
20000bd2:	f04f 0162 	mov.w	r1, #98	; 0x62
20000bd6:	f001 fba7 	bl	20002328 <MSS_GPIO_config>
	MSS_GPIO_enable_irq(MSS_GPIO_1);
20000bda:	f04f 0001 	mov.w	r0, #1
20000bde:	f001 fbbd 	bl	2000235c <MSS_GPIO_enable_irq>
	int i;

	// Delays required for set up
	MSS_GPIO_set_output(MSS_GPIO_0 ,(uint8_t) 1);
20000be2:	f04f 0000 	mov.w	r0, #0
20000be6:	f04f 0101 	mov.w	r1, #1
20000bea:	f001 fba9 	bl	20002340 <MSS_GPIO_set_output>
	for(i=0;i<100000;i++);
20000bee:	f04f 0300 	mov.w	r3, #0
20000bf2:	607b      	str	r3, [r7, #4]
20000bf4:	e003      	b.n	20000bfe <nfc_init+0x56>
20000bf6:	687b      	ldr	r3, [r7, #4]
20000bf8:	f103 0301 	add.w	r3, r3, #1
20000bfc:	607b      	str	r3, [r7, #4]
20000bfe:	687a      	ldr	r2, [r7, #4]
20000c00:	f248 639f 	movw	r3, #34463	; 0x869f
20000c04:	f2c0 0301 	movt	r3, #1
20000c08:	429a      	cmp	r2, r3
20000c0a:	ddf4      	ble.n	20000bf6 <nfc_init+0x4e>
	MSS_GPIO_set_output(MSS_GPIO_0 ,(uint8_t) 0);
20000c0c:	f04f 0000 	mov.w	r0, #0
20000c10:	f04f 0100 	mov.w	r1, #0
20000c14:	f001 fb94 	bl	20002340 <MSS_GPIO_set_output>
	for(i=0;i<3000000;i++); // We need 400 milisecs (we get 418 msec => OK)
20000c18:	f04f 0300 	mov.w	r3, #0
20000c1c:	607b      	str	r3, [r7, #4]
20000c1e:	e003      	b.n	20000c28 <nfc_init+0x80>
20000c20:	687b      	ldr	r3, [r7, #4]
20000c22:	f103 0301 	add.w	r3, r3, #1
20000c26:	607b      	str	r3, [r7, #4]
20000c28:	687a      	ldr	r2, [r7, #4]
20000c2a:	f24c 63bf 	movw	r3, #50879	; 0xc6bf
20000c2e:	f2c0 032d 	movt	r3, #45	; 0x2d
20000c32:	429a      	cmp	r2, r3
20000c34:	ddf4      	ble.n	20000c20 <nfc_init+0x78>
	MSS_GPIO_set_output(MSS_GPIO_0 ,(uint8_t)  1);
20000c36:	f04f 0000 	mov.w	r0, #0
20000c3a:	f04f 0101 	mov.w	r1, #1
20000c3e:	f001 fb7f 	bl	20002340 <MSS_GPIO_set_output>
	for(i=0;i<100000;i++); //We need 10 msecs (we get 18 msec => OK)
20000c42:	f04f 0300 	mov.w	r3, #0
20000c46:	607b      	str	r3, [r7, #4]
20000c48:	e003      	b.n	20000c52 <nfc_init+0xaa>
20000c4a:	687b      	ldr	r3, [r7, #4]
20000c4c:	f103 0301 	add.w	r3, r3, #1
20000c50:	607b      	str	r3, [r7, #4]
20000c52:	687a      	ldr	r2, [r7, #4]
20000c54:	f248 639f 	movw	r3, #34463	; 0x869f
20000c58:	f2c0 0301 	movt	r3, #1
20000c5c:	429a      	cmp	r2, r3
20000c5e:	ddf4      	ble.n	20000c4a <nfc_init+0xa2>
	/* times tested with oscilloscope */
	for(i = 0; i < NFC_RESPONSE_BUFFER_LENGTH; ++i){
20000c60:	f04f 0300 	mov.w	r3, #0
20000c64:	607b      	str	r3, [r7, #4]
20000c66:	e00b      	b.n	20000c80 <nfc_init+0xd8>
		NFC_RESPONSE_BUFFER[i] = 0;
20000c68:	687a      	ldr	r2, [r7, #4]
20000c6a:	f242 7364 	movw	r3, #10084	; 0x2764
20000c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c72:	f04f 0100 	mov.w	r1, #0
20000c76:	5499      	strb	r1, [r3, r2]
	MSS_GPIO_set_output(MSS_GPIO_0 ,(uint8_t) 0);
	for(i=0;i<3000000;i++); // We need 400 milisecs (we get 418 msec => OK)
	MSS_GPIO_set_output(MSS_GPIO_0 ,(uint8_t)  1);
	for(i=0;i<100000;i++); //We need 10 msecs (we get 18 msec => OK)
	/* times tested with oscilloscope */
	for(i = 0; i < NFC_RESPONSE_BUFFER_LENGTH; ++i){
20000c78:	687b      	ldr	r3, [r7, #4]
20000c7a:	f103 0301 	add.w	r3, r3, #1
20000c7e:	607b      	str	r3, [r7, #4]
20000c80:	f242 5349 	movw	r3, #9545	; 0x2549
20000c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c88:	781b      	ldrb	r3, [r3, #0]
20000c8a:	461a      	mov	r2, r3
20000c8c:	687b      	ldr	r3, [r7, #4]
20000c8e:	429a      	cmp	r2, r3
20000c90:	dcea      	bgt.n	20000c68 <nfc_init+0xc0>
		NFC_RESPONSE_BUFFER[i] = 0;
	}
	nfc_SAMConfig();
20000c92:	f000 f9e7 	bl	20001064 <nfc_SAMConfig>
	while(interrupt_handled);
20000c96:	f242 633c 	movw	r3, #9788	; 0x263c
20000c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000c9e:	781b      	ldrb	r3, [r3, #0]
20000ca0:	b2db      	uxtb	r3, r3
20000ca2:	2b00      	cmp	r3, #0
20000ca4:	d1f7      	bne.n	20000c96 <nfc_init+0xee>
	nfc_read_response();
20000ca6:	f000 f87b 	bl	20000da0 <nfc_read_response>
	while(interrupt_handled);
20000caa:	f242 633c 	movw	r3, #9788	; 0x263c
20000cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cb2:	781b      	ldrb	r3, [r3, #0]
20000cb4:	b2db      	uxtb	r3, r3
20000cb6:	2b00      	cmp	r3, #0
20000cb8:	d1f7      	bne.n	20000caa <nfc_init+0x102>
	nfc_read_response();
20000cba:	f000 f871 	bl	20000da0 <nfc_read_response>
	return;
}
20000cbe:	f107 0708 	add.w	r7, r7, #8
20000cc2:	46bd      	mov	sp, r7
20000cc4:	bd80      	pop	{r7, pc}
20000cc6:	bf00      	nop

20000cc8 <nfc_read_ack>:
 * 			 n	  -> Number of bytes to read
 * 			 read_ack -> if (read_ack == 1) the ack frame will be read in before the information frame.
 * Returns:	 0 if read is successful, 1 if read is not successful
 */

uint8_t nfc_read_ack(){
20000cc8:	b580      	push	{r7, lr}
20000cca:	b086      	sub	sp, #24
20000ccc:	af02      	add	r7, sp, #8
	MSS_I2C_read
20000cce:	f242 5348 	movw	r3, #9544	; 0x2548
20000cd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cd6:	781b      	ldrb	r3, [r3, #0]
20000cd8:	f04f 0200 	mov.w	r2, #0
20000cdc:	9200      	str	r2, [sp, #0]
20000cde:	f642 1098 	movw	r0, #10648	; 0x2998
20000ce2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000ce6:	f04f 0124 	mov.w	r1, #36	; 0x24
20000cea:	f242 725c 	movw	r2, #10076	; 0x275c
20000cee:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000cf2:	f001 f97d 	bl	20001ff0 <MSS_I2C_read>
				PN532_I2C_ADDRESS,
				NFC_ACK_BUF,
				NFC_ACK_LENGTH,
				MSS_I2C_RELEASE_BUS
		);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
20000cf6:	f642 1098 	movw	r0, #10648	; 0x2998
20000cfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000cfe:	f04f 0100 	mov.w	r1, #0
20000d02:	f000 fe51 	bl	200019a8 <MSS_I2C_wait_complete>
	int i = 0;
20000d06:	f04f 0300 	mov.w	r3, #0
20000d0a:	607b      	str	r3, [r7, #4]
	int isAck = 1;
20000d0c:	f04f 0301 	mov.w	r3, #1
20000d10:	60bb      	str	r3, [r7, #8]
	int isNack = 1;
20000d12:	f04f 0301 	mov.w	r3, #1
20000d16:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < NFC_ACK_LENGTH; ++i){
20000d18:	f04f 0300 	mov.w	r3, #0
20000d1c:	607b      	str	r3, [r7, #4]
20000d1e:	e025      	b.n	20000d6c <nfc_read_ack+0xa4>
		if (NFC_ACK_BUF[i] != PN532_ACK_FRAME[i])
20000d20:	687a      	ldr	r2, [r7, #4]
20000d22:	f242 735c 	movw	r3, #10076	; 0x275c
20000d26:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d2a:	5c9a      	ldrb	r2, [r3, r2]
20000d2c:	6879      	ldr	r1, [r7, #4]
20000d2e:	f242 5330 	movw	r3, #9520	; 0x2530
20000d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d36:	5c5b      	ldrb	r3, [r3, r1]
20000d38:	429a      	cmp	r2, r3
20000d3a:	d002      	beq.n	20000d42 <nfc_read_ack+0x7a>
			isAck = 0;
20000d3c:	f04f 0300 	mov.w	r3, #0
20000d40:	60bb      	str	r3, [r7, #8]
		if (NFC_ACK_BUF[i] != PN532_NACK_FRAME[i])
20000d42:	687a      	ldr	r2, [r7, #4]
20000d44:	f242 735c 	movw	r3, #10076	; 0x275c
20000d48:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d4c:	5c9a      	ldrb	r2, [r3, r2]
20000d4e:	6879      	ldr	r1, [r7, #4]
20000d50:	f242 5338 	movw	r3, #9528	; 0x2538
20000d54:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d58:	5c5b      	ldrb	r3, [r3, r1]
20000d5a:	429a      	cmp	r2, r3
20000d5c:	d002      	beq.n	20000d64 <nfc_read_ack+0x9c>
			isNack = 0;
20000d5e:	f04f 0300 	mov.w	r3, #0
20000d62:	60fb      	str	r3, [r7, #12]
		);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
	int i = 0;
	int isAck = 1;
	int isNack = 1;
	for(i = 0; i < NFC_ACK_LENGTH; ++i){
20000d64:	687b      	ldr	r3, [r7, #4]
20000d66:	f103 0301 	add.w	r3, r3, #1
20000d6a:	607b      	str	r3, [r7, #4]
20000d6c:	f242 5348 	movw	r3, #9544	; 0x2548
20000d70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d74:	781b      	ldrb	r3, [r3, #0]
20000d76:	461a      	mov	r2, r3
20000d78:	687b      	ldr	r3, [r7, #4]
20000d7a:	429a      	cmp	r2, r3
20000d7c:	dcd0      	bgt.n	20000d20 <nfc_read_ack+0x58>
		if (NFC_ACK_BUF[i] != PN532_ACK_FRAME[i])
			isAck = 0;
		if (NFC_ACK_BUF[i] != PN532_NACK_FRAME[i])
			isNack = 0;
	}
	if(!isAck || isNack)
20000d7e:	68bb      	ldr	r3, [r7, #8]
20000d80:	2b00      	cmp	r3, #0
20000d82:	d002      	beq.n	20000d8a <nfc_read_ack+0xc2>
20000d84:	68fb      	ldr	r3, [r7, #12]
20000d86:	2b00      	cmp	r3, #0
20000d88:	d002      	beq.n	20000d90 <nfc_read_ack+0xc8>
		return 0;
20000d8a:	f04f 0300 	mov.w	r3, #0
20000d8e:	e001      	b.n	20000d94 <nfc_read_ack+0xcc>
	return 1;
20000d90:	f04f 0301 	mov.w	r3, #1
}
20000d94:	4618      	mov	r0, r3
20000d96:	f107 0710 	add.w	r7, r7, #16
20000d9a:	46bd      	mov	sp, r7
20000d9c:	bd80      	pop	{r7, pc}
20000d9e:	bf00      	nop

20000da0 <nfc_read_response>:

uint8_t nfc_read_response(){
20000da0:	b580      	push	{r7, lr}
20000da2:	b084      	sub	sp, #16
20000da4:	af02      	add	r7, sp, #8
	nfc_set_interrupt_handled(1);
20000da6:	f04f 0001 	mov.w	r0, #1
20000daa:	f000 f991 	bl	200010d0 <nfc_set_interrupt_handled>
	if(last_was_ack){
20000dae:	f242 6343 	movw	r3, #9795	; 0x2643
20000db2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000db6:	781b      	ldrb	r3, [r3, #0]
20000db8:	2b00      	cmp	r3, #0
20000dba:	d051      	beq.n	20000e60 <nfc_read_response+0xc0>
		int i = 0;
20000dbc:	f04f 0300 	mov.w	r3, #0
20000dc0:	603b      	str	r3, [r7, #0]
		for(i = 0; i < NFC_RESPONSE_BUFFER_LENGTH; ++i){
20000dc2:	f04f 0300 	mov.w	r3, #0
20000dc6:	603b      	str	r3, [r7, #0]
20000dc8:	e00b      	b.n	20000de2 <nfc_read_response+0x42>
			NFC_RESPONSE_BUFFER[i] = 0;
20000dca:	683a      	ldr	r2, [r7, #0]
20000dcc:	f242 7364 	movw	r3, #10084	; 0x2764
20000dd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dd4:	f04f 0100 	mov.w	r1, #0
20000dd8:	5499      	strb	r1, [r3, r2]

uint8_t nfc_read_response(){
	nfc_set_interrupt_handled(1);
	if(last_was_ack){
		int i = 0;
		for(i = 0; i < NFC_RESPONSE_BUFFER_LENGTH; ++i){
20000dda:	683b      	ldr	r3, [r7, #0]
20000ddc:	f103 0301 	add.w	r3, r3, #1
20000de0:	603b      	str	r3, [r7, #0]
20000de2:	f242 5349 	movw	r3, #9545	; 0x2549
20000de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dea:	781b      	ldrb	r3, [r3, #0]
20000dec:	461a      	mov	r2, r3
20000dee:	683b      	ldr	r3, [r7, #0]
20000df0:	429a      	cmp	r2, r3
20000df2:	dcea      	bgt.n	20000dca <nfc_read_response+0x2a>
			NFC_RESPONSE_BUFFER[i] = 0;
		}
		int count = 0;
20000df4:	f04f 0300 	mov.w	r3, #0
20000df8:	607b      	str	r3, [r7, #4]
		while(NFC_RESPONSE_BUFFER[0] != 0x01 && count < 10){
20000dfa:	e01d      	b.n	20000e38 <nfc_read_response+0x98>
			MSS_I2C_read
				(
						&g_mss_i2c1,
						PN532_I2C_ADDRESS,
						NFC_RESPONSE_BUFFER,
						nfc_get_response_size(),
20000dfc:	f000 f978 	bl	200010f0 <nfc_get_response_size>
20000e00:	4603      	mov	r3, r0
		for(i = 0; i < NFC_RESPONSE_BUFFER_LENGTH; ++i){
			NFC_RESPONSE_BUFFER[i] = 0;
		}
		int count = 0;
		while(NFC_RESPONSE_BUFFER[0] != 0x01 && count < 10){
			MSS_I2C_read
20000e02:	f04f 0200 	mov.w	r2, #0
20000e06:	9200      	str	r2, [sp, #0]
20000e08:	f642 1098 	movw	r0, #10648	; 0x2998
20000e0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e10:	f04f 0124 	mov.w	r1, #36	; 0x24
20000e14:	f242 7264 	movw	r2, #10084	; 0x2764
20000e18:	f2c2 0200 	movt	r2, #8192	; 0x2000
20000e1c:	f001 f8e8 	bl	20001ff0 <MSS_I2C_read>
						PN532_I2C_ADDRESS,
						NFC_RESPONSE_BUFFER,
						nfc_get_response_size(),
						MSS_I2C_RELEASE_BUS
				);
			MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
20000e20:	f642 1098 	movw	r0, #10648	; 0x2998
20000e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e28:	f04f 0100 	mov.w	r1, #0
20000e2c:	f000 fdbc 	bl	200019a8 <MSS_I2C_wait_complete>
			++count;
20000e30:	687b      	ldr	r3, [r7, #4]
20000e32:	f103 0301 	add.w	r3, r3, #1
20000e36:	607b      	str	r3, [r7, #4]
		int i = 0;
		for(i = 0; i < NFC_RESPONSE_BUFFER_LENGTH; ++i){
			NFC_RESPONSE_BUFFER[i] = 0;
		}
		int count = 0;
		while(NFC_RESPONSE_BUFFER[0] != 0x01 && count < 10){
20000e38:	f242 7364 	movw	r3, #10084	; 0x2764
20000e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e40:	781b      	ldrb	r3, [r3, #0]
20000e42:	2b01      	cmp	r3, #1
20000e44:	d002      	beq.n	20000e4c <nfc_read_response+0xac>
20000e46:	687b      	ldr	r3, [r7, #4]
20000e48:	2b09      	cmp	r3, #9
20000e4a:	ddd7      	ble.n	20000dfc <nfc_read_response+0x5c>
						MSS_I2C_RELEASE_BUS
				);
			MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
			++count;
		}
		last_was_ack = 0;
20000e4c:	f242 6343 	movw	r3, #9795	; 0x2643
20000e50:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e54:	f04f 0200 	mov.w	r2, #0
20000e58:	701a      	strb	r2, [r3, #0]
		return 0;
20000e5a:	f04f 0300 	mov.w	r3, #0
20000e5e:	e010      	b.n	20000e82 <nfc_read_response+0xe2>
	} else {
		if(nfc_read_ack()){
20000e60:	f7ff ff32 	bl	20000cc8 <nfc_read_ack>
20000e64:	4603      	mov	r3, r0
20000e66:	2b00      	cmp	r3, #0
20000e68:	d009      	beq.n	20000e7e <nfc_read_response+0xde>
			last_was_ack = 1;
20000e6a:	f242 6343 	movw	r3, #9795	; 0x2643
20000e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e72:	f04f 0201 	mov.w	r2, #1
20000e76:	701a      	strb	r2, [r3, #0]
			return 1;
20000e78:	f04f 0301 	mov.w	r3, #1
20000e7c:	e001      	b.n	20000e82 <nfc_read_response+0xe2>
		}else{
			return 0;
20000e7e:	f04f 0300 	mov.w	r3, #0
		}
	}
}
20000e82:	4618      	mov	r0, r3
20000e84:	f107 0708 	add.w	r7, r7, #8
20000e88:	46bd      	mov	sp, r7
20000e8a:	bd80      	pop	{r7, pc}

20000e8c <nfc_get_response_buffer>:

uint8_t *nfc_get_response_buffer(){
20000e8c:	b480      	push	{r7}
20000e8e:	af00      	add	r7, sp, #0
	return NFC_RESPONSE_BUFFER;
20000e90:	f242 7364 	movw	r3, #10084	; 0x2764
20000e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
20000e98:	4618      	mov	r0, r3
20000e9a:	46bd      	mov	sp, r7
20000e9c:	bc80      	pop	{r7}
20000e9e:	4770      	bx	lr

20000ea0 <nfc_send_command>:
/*
 * Description:
 * Receives:
 * Returns:	 Nothing
 */
void nfc_send_command(const uint8_t command, const uint8_t info_buf[], const uint8_t len){
20000ea0:	b580      	push	{r7, lr}
20000ea2:	b08e      	sub	sp, #56	; 0x38
20000ea4:	af02      	add	r7, sp, #8
20000ea6:	60b9      	str	r1, [r7, #8]
20000ea8:	4613      	mov	r3, r2
20000eaa:	4602      	mov	r2, r0
20000eac:	73fa      	strb	r2, [r7, #15]
20000eae:	71fb      	strb	r3, [r7, #7]
	uint16_t length = 0;
20000eb0:	f04f 0300 	mov.w	r3, #0
20000eb4:	853b      	strh	r3, [r7, #40]	; 0x28
	uint8_t buffer[20];
	buffer[length++] = (uint8_t) PN532_PREAMBLE; // Preamble
20000eb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000eb8:	f107 0030 	add.w	r0, r7, #48	; 0x30
20000ebc:	4403      	add	r3, r0
20000ebe:	f04f 0200 	mov.w	r2, #0
20000ec2:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000ec6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000ec8:	f103 0301 	add.w	r3, r3, #1
20000ecc:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = 0x00; // Start bits
20000ece:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000ed0:	f107 0130 	add.w	r1, r7, #48	; 0x30
20000ed4:	440b      	add	r3, r1
20000ed6:	f04f 0200 	mov.w	r2, #0
20000eda:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000ede:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000ee0:	f103 0301 	add.w	r3, r3, #1
20000ee4:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = 0xFF; // Start bits
20000ee6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000ee8:	f107 0230 	add.w	r2, r7, #48	; 0x30
20000eec:	4413      	add	r3, r2
20000eee:	f04f 32ff 	mov.w	r2, #4294967295
20000ef2:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000ef6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000ef8:	f103 0301 	add.w	r3, r3, #1
20000efc:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = (len + 2); // Length of (n_data_bytes + TFI byte + command)
20000efe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000f00:	79fa      	ldrb	r2, [r7, #7]
20000f02:	f102 0202 	add.w	r2, r2, #2
20000f06:	b2d2      	uxtb	r2, r2
20000f08:	f107 0030 	add.w	r0, r7, #48	; 0x30
20000f0c:	4403      	add	r3, r0
20000f0e:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000f12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000f14:	f103 0301 	add.w	r3, r3, #1
20000f18:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = (uint8_t)(0x100 - (len + 2)); // LCS
20000f1a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
20000f1c:	79fb      	ldrb	r3, [r7, #7]
20000f1e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
20000f22:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
20000f26:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
20000f2a:	f103 03fe 	add.w	r3, r3, #254	; 0xfe
20000f2e:	b2da      	uxtb	r2, r3
20000f30:	f107 0030 	add.w	r0, r7, #48	; 0x30
20000f34:	eb00 0301 	add.w	r3, r0, r1
20000f38:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000f3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000f3e:	f103 0301 	add.w	r3, r3, #1
20000f42:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = (uint8_t) PN532_HOST_TO_NFC; // Write
20000f44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000f46:	f107 0130 	add.w	r1, r7, #48	; 0x30
20000f4a:	440b      	add	r3, r1
20000f4c:	f06f 022b 	mvn.w	r2, #43	; 0x2b
20000f50:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000f54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000f56:	f103 0301 	add.w	r3, r3, #1
20000f5a:	853b      	strh	r3, [r7, #40]	; 0x28
	uint8_t dcs = (uint8_t)PN532_HOST_TO_NFC + command;
20000f5c:	7bfb      	ldrb	r3, [r7, #15]
20000f5e:	f1a3 032c 	sub.w	r3, r3, #44	; 0x2c
20000f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[length++] = command;
20000f66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000f68:	f107 0230 	add.w	r2, r7, #48	; 0x30
20000f6c:	4413      	add	r3, r2
20000f6e:	7bfa      	ldrb	r2, [r7, #15]
20000f70:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000f74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000f76:	f103 0301 	add.w	r3, r3, #1
20000f7a:	853b      	strh	r3, [r7, #40]	; 0x28
	int i = 0;
20000f7c:	f04f 0300 	mov.w	r3, #0
20000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(i = 0; i < len; ++i){
20000f82:	f04f 0300 	mov.w	r3, #0
20000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
20000f88:	e01a      	b.n	20000fc0 <nfc_send_command+0x120>
		dcs += info_buf[i];
20000f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20000f8c:	68bb      	ldr	r3, [r7, #8]
20000f8e:	4413      	add	r3, r2
20000f90:	781a      	ldrb	r2, [r3, #0]
20000f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
20000f96:	4413      	add	r3, r2
20000f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		buffer[length++] = info_buf[i];
20000f9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
20000fa0:	68ba      	ldr	r2, [r7, #8]
20000fa2:	440a      	add	r2, r1
20000fa4:	7812      	ldrb	r2, [r2, #0]
20000fa6:	f107 0030 	add.w	r0, r7, #48	; 0x30
20000faa:	4403      	add	r3, r0
20000fac:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000fb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000fb2:	f103 0301 	add.w	r3, r3, #1
20000fb6:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = (uint8_t)(0x100 - (len + 2)); // LCS
	buffer[length++] = (uint8_t) PN532_HOST_TO_NFC; // Write
	uint8_t dcs = (uint8_t)PN532_HOST_TO_NFC + command;
	buffer[length++] = command;
	int i = 0;
	for(i = 0; i < len; ++i){
20000fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000fba:	f103 0301 	add.w	r3, r3, #1
20000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
20000fc0:	79fa      	ldrb	r2, [r7, #7]
20000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000fc4:	429a      	cmp	r2, r3
20000fc6:	dce0      	bgt.n	20000f8a <nfc_send_command+0xea>
		dcs += info_buf[i];
		buffer[length++] = info_buf[i];
	}
	buffer[length++] = (uint8_t)(0x100 - dcs); // DCS
20000fc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000fca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
20000fce:	f1c2 0200 	rsb	r2, r2, #0
20000fd2:	b2d2      	uxtb	r2, r2
20000fd4:	f107 0130 	add.w	r1, r7, #48	; 0x30
20000fd8:	440b      	add	r3, r1
20000fda:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000fde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000fe0:	f103 0301 	add.w	r3, r3, #1
20000fe4:	853b      	strh	r3, [r7, #40]	; 0x28
	buffer[length++] = PN532_POSTAMBLE; // Postamble
20000fe6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000fe8:	f107 0230 	add.w	r2, r7, #48	; 0x30
20000fec:	4413      	add	r3, r2
20000fee:	f04f 0200 	mov.w	r2, #0
20000ff2:	f803 2c1c 	strb.w	r2, [r3, #-28]
20000ff6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20000ff8:	f103 0301 	add.w	r3, r3, #1
20000ffc:	853b      	strh	r3, [r7, #40]	; 0x28

	MSS_I2C_write
20000ffe:	f107 0214 	add.w	r2, r7, #20
20001002:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
20001004:	f04f 0100 	mov.w	r1, #0
20001008:	9100      	str	r1, [sp, #0]
2000100a:	f642 1098 	movw	r0, #10648	; 0x2998
2000100e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001012:	f04f 0124 	mov.w	r1, #36	; 0x24
20001016:	f001 f85b 	bl	200020d0 <MSS_I2C_write>
				PN532_I2C_ADDRESS,
				buffer,
				length,
				MSS_I2C_RELEASE_BUS
		);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
2000101a:	f642 1098 	movw	r0, #10648	; 0x2998
2000101e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001022:	f04f 0100 	mov.w	r1, #0
20001026:	f000 fcbf 	bl	200019a8 <MSS_I2C_wait_complete>
	return;
}
2000102a:	f107 0730 	add.w	r7, r7, #48	; 0x30
2000102e:	46bd      	mov	sp, r7
20001030:	bd80      	pop	{r7, pc}
20001032:	bf00      	nop

20001034 <nfc_InListPassiveTarget>:
	nfc_send_command(PN532_COMMAND_GETSTATUS, command, 0);
	last_command_sent = PN532_COMMAND_GETSTATUS;
	return 1;
}

uint8_t nfc_InListPassiveTarget(){
20001034:	b580      	push	{r7, lr}
20001036:	af00      	add	r7, sp, #0

	//send D4 4A 01 00
	//receive D5 4B <num targets> <tg (1) sens_res (2) sel_res (1) nfcidlength (1) nfcid (4?) atslength (1) ats (y)>

	nfc_send_command(PN532_COMMAND_INLISTPASSIVETARGET,
20001038:	f04f 004a 	mov.w	r0, #74	; 0x4a
2000103c:	f242 5140 	movw	r1, #9536	; 0x2540
20001040:	f2c2 0100 	movt	r1, #8192	; 0x2000
20001044:	f04f 0202 	mov.w	r2, #2
20001048:	f7ff ff2a 	bl	20000ea0 <nfc_send_command>
					PN532_INLISTPASSIVETARGET_INFO,
					2);
	last_command_sent = PN532_COMMAND_INLISTPASSIVETARGET;
2000104c:	f242 73c8 	movw	r3, #10184	; 0x27c8
20001050:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001054:	f04f 024a 	mov.w	r2, #74	; 0x4a
20001058:	701a      	strb	r2, [r3, #0]
	return 1; //response_buf[6];
2000105a:	f04f 0301 	mov.w	r3, #1
}
2000105e:	4618      	mov	r0, r3
20001060:	bd80      	pop	{r7, pc}
20001062:	bf00      	nop

20001064 <nfc_SAMConfig>:

uint8_t nfc_SAMConfig(){
20001064:	b580      	push	{r7, lr}
20001066:	b082      	sub	sp, #8
20001068:	af00      	add	r7, sp, #0
  uint8_t command[] = {0x01, 0x14, 0x01};
2000106a:	f242 524c 	movw	r2, #9548	; 0x254c
2000106e:	f2c2 0200 	movt	r2, #8192	; 0x2000
20001072:	f107 0304 	add.w	r3, r7, #4
20001076:	6812      	ldr	r2, [r2, #0]
20001078:	4611      	mov	r1, r2
2000107a:	8019      	strh	r1, [r3, #0]
2000107c:	f103 0302 	add.w	r3, r3, #2
20001080:	ea4f 4212 	mov.w	r2, r2, lsr #16
20001084:	701a      	strb	r2, [r3, #0]
  nfc_send_command(PN532_COMMAND_SAMCONFIG, PN532_SAMCONFIG_INFO, 3);
20001086:	f04f 0014 	mov.w	r0, #20
2000108a:	f242 5144 	movw	r1, #9540	; 0x2544
2000108e:	f2c2 0100 	movt	r1, #8192	; 0x2000
20001092:	f04f 0203 	mov.w	r2, #3
20001096:	f7ff ff03 	bl	20000ea0 <nfc_send_command>
  last_command_sent = PN532_COMMAND_SAMCONFIG;
2000109a:	f242 73c8 	movw	r3, #10184	; 0x27c8
2000109e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010a2:	f04f 0214 	mov.w	r2, #20
200010a6:	701a      	strb	r2, [r3, #0]
  return 1;// response_buf[6];
200010a8:	f04f 0301 	mov.w	r3, #1
}
200010ac:	4618      	mov	r0, r3
200010ae:	f107 0708 	add.w	r7, r7, #8
200010b2:	46bd      	mov	sp, r7
200010b4:	bd80      	pop	{r7, pc}
200010b6:	bf00      	nop

200010b8 <nfc_is_interrupt_handled>:
	nfc_send_command(PN532_COMMAND_GETFIRMWARE, command, 0);
	last_command_sent = PN532_COMMAND_GETFIRMWARE;
	return 1;
}

uint8_t nfc_is_interrupt_handled(void){
200010b8:	b480      	push	{r7}
200010ba:	af00      	add	r7, sp, #0
	return interrupt_handled;
200010bc:	f242 633c 	movw	r3, #9788	; 0x263c
200010c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010c4:	781b      	ldrb	r3, [r3, #0]
200010c6:	b2db      	uxtb	r3, r3
}
200010c8:	4618      	mov	r0, r3
200010ca:	46bd      	mov	sp, r7
200010cc:	bc80      	pop	{r7}
200010ce:	4770      	bx	lr

200010d0 <nfc_set_interrupt_handled>:

void nfc_set_interrupt_handled(uint8_t val){
200010d0:	b480      	push	{r7}
200010d2:	b083      	sub	sp, #12
200010d4:	af00      	add	r7, sp, #0
200010d6:	4603      	mov	r3, r0
200010d8:	71fb      	strb	r3, [r7, #7]
	interrupt_handled = val;
200010da:	f242 633c 	movw	r3, #9788	; 0x263c
200010de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010e2:	79fa      	ldrb	r2, [r7, #7]
200010e4:	701a      	strb	r2, [r3, #0]
}
200010e6:	f107 070c 	add.w	r7, r7, #12
200010ea:	46bd      	mov	sp, r7
200010ec:	bc80      	pop	{r7}
200010ee:	4770      	bx	lr

200010f0 <nfc_get_response_size>:

uint8_t nfc_get_response_size(){
200010f0:	b480      	push	{r7}
200010f2:	af00      	add	r7, sp, #0
	switch(last_command_sent){
200010f4:	f242 73c8 	movw	r3, #10184	; 0x27c8
200010f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010fc:	781b      	ldrb	r3, [r3, #0]
200010fe:	2b16      	cmp	r3, #22
20001100:	d012      	beq.n	20001128 <nfc_get_response_size+0x38>
20001102:	2b16      	cmp	r3, #22
20001104:	dc06      	bgt.n	20001114 <nfc_get_response_size+0x24>
20001106:	2b04      	cmp	r3, #4
20001108:	d011      	beq.n	2000112e <nfc_get_response_size+0x3e>
2000110a:	2b14      	cmp	r3, #20
2000110c:	d01b      	beq.n	20001146 <nfc_get_response_size+0x56>
2000110e:	2b02      	cmp	r3, #2
20001110:	d007      	beq.n	20001122 <nfc_get_response_size+0x32>
20001112:	e01b      	b.n	2000114c <nfc_get_response_size+0x5c>
20001114:	2b4a      	cmp	r3, #74	; 0x4a
20001116:	d013      	beq.n	20001140 <nfc_get_response_size+0x50>
20001118:	2b60      	cmp	r3, #96	; 0x60
2000111a:	d00b      	beq.n	20001134 <nfc_get_response_size+0x44>
2000111c:	2b32      	cmp	r3, #50	; 0x32
2000111e:	d00c      	beq.n	2000113a <nfc_get_response_size+0x4a>
20001120:	e014      	b.n	2000114c <nfc_get_response_size+0x5c>
	case PN532_COMMAND_GETFIRMWARE: return 14;
20001122:	f04f 030e 	mov.w	r3, #14
20001126:	e013      	b.n	20001150 <nfc_get_response_size+0x60>
	case PN532_COMMAND_POWERDOWN: return 5;
20001128:	f04f 0305 	mov.w	r3, #5
2000112c:	e010      	b.n	20001150 <nfc_get_response_size+0x60>
	case PN532_COMMAND_GETSTATUS: return 20;
2000112e:	f04f 0314 	mov.w	r3, #20
20001132:	e00d      	b.n	20001150 <nfc_get_response_size+0x60>
	case PN532_COMMAND_INAUTOPOLL: return 5;
20001134:	f04f 0305 	mov.w	r3, #5
20001138:	e00a      	b.n	20001150 <nfc_get_response_size+0x60>
	case PN532_COMMAND_RF_CONFIG: return 5;
2000113a:	f04f 0305 	mov.w	r3, #5
2000113e:	e007      	b.n	20001150 <nfc_get_response_size+0x60>
	case PN532_COMMAND_INLISTPASSIVETARGET: return 20;
20001140:	f04f 0314 	mov.w	r3, #20
20001144:	e004      	b.n	20001150 <nfc_get_response_size+0x60>
	case PN532_COMMAND_SAMCONFIG: return 10;
20001146:	f04f 030a 	mov.w	r3, #10
2000114a:	e001      	b.n	20001150 <nfc_get_response_size+0x60>
	default: return NULL;
2000114c:	f04f 0300 	mov.w	r3, #0
	}
}
20001150:	4618      	mov	r0, r3
20001152:	46bd      	mov	sp, r7
20001154:	bc80      	pop	{r7}
20001156:	4770      	bx	lr

20001158 <nfc_last_was_ack>:

uint8_t nfc_last_was_ack(){
20001158:	b480      	push	{r7}
2000115a:	af00      	add	r7, sp, #0
	return last_was_ack;
2000115c:	f242 6343 	movw	r3, #9795	; 0x2643
20001160:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001164:	781b      	ldrb	r3, [r3, #0]
}
20001166:	4618      	mov	r0, r3
20001168:	46bd      	mov	sp, r7
2000116a:	bc80      	pop	{r7}
2000116c:	4770      	bx	lr
2000116e:	bf00      	nop

20001170 <RSA_init>:
 *  Created on: Dec 7, 2017
 *      Author: eliubakk
 */
#include "rsa.h"

void RSA_init(void){
20001170:	b480      	push	{r7}
20001172:	af00      	add	r7, sp, #0
	*RSA_BEGIN_ENCRYPT = 0x0;
20001174:	f240 031c 	movw	r3, #28
20001178:	f2c4 0305 	movt	r3, #16389	; 0x4005
2000117c:	f04f 0200 	mov.w	r2, #0
20001180:	601a      	str	r2, [r3, #0]
}
20001182:	46bd      	mov	sp, r7
20001184:	bc80      	pop	{r7}
20001186:	4770      	bx	lr

20001188 <SERVO_init>:
 *  Created on: Nov 14, 2017
 *      Author: kozdowy
 */
#include "servo.h"

void SERVO_init(void){
20001188:	b480      	push	{r7}
2000118a:	af00      	add	r7, sp, #0
	// intentionally blank
}
2000118c:	46bd      	mov	sp, r7
2000118e:	bc80      	pop	{r7}
20001190:	4770      	bx	lr
20001192:	bf00      	nop

20001194 <SERVO_lock>:

void SERVO_lock(void){
20001194:	b480      	push	{r7}
20001196:	af00      	add	r7, sp, #0
	(*SERVO) = (uint32_t) SERVO_LOCKED;
20001198:	f240 0304 	movw	r3, #4
2000119c:	f2c4 0305 	movt	r3, #16389	; 0x4005
200011a0:	f24b 12bc 	movw	r2, #45500	; 0xb1bc
200011a4:	601a      	str	r2, [r3, #0]
}
200011a6:	46bd      	mov	sp, r7
200011a8:	bc80      	pop	{r7}
200011aa:	4770      	bx	lr

200011ac <SERVO_unlock>:

void SERVO_unlock(void){
200011ac:	b480      	push	{r7}
200011ae:	af00      	add	r7, sp, #0
	(*SERVO) = (uint32_t) SERVO_UNLOCKED;
200011b0:	f240 0304 	movw	r3, #4
200011b4:	f2c4 0305 	movt	r3, #16389	; 0x4005
200011b8:	f645 12d8 	movw	r2, #23000	; 0x59d8
200011bc:	601a      	str	r2, [r3, #0]
}
200011be:	46bd      	mov	sp, r7
200011c0:	bc80      	pop	{r7}
200011c2:	4770      	bx	lr

200011c4 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
200011c4:	b508      	push	{r3, lr}
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
200011c6:	f242 73f4 	movw	r3, #10228	; 0x27f4
200011ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011ce:	4298      	cmp	r0, r3
200011d0:	d007      	beq.n	200011e2 <MSS_UART_isr+0x1e>
200011d2:	f242 73cc 	movw	r3, #10188	; 0x27cc
200011d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011da:	4298      	cmp	r0, r3
200011dc:	d001      	beq.n	200011e2 <MSS_UART_isr+0x1e>
200011de:	be00      	bkpt	0x0000
200011e0:	bd08      	pop	{r3, pc}

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
200011e2:	6803      	ldr	r3, [r0, #0]
200011e4:	7a1b      	ldrb	r3, [r3, #8]

        switch ( iirf )
200011e6:	f003 030f 	and.w	r3, r3, #15
200011ea:	2b0c      	cmp	r3, #12
200011ec:	d820      	bhi.n	20001230 <MSS_UART_isr+0x6c>
200011ee:	e8df f003 	tbb	[pc, r3]
200011f2:	1f07      	.short	0x1f07
200011f4:	1f131f0d 	.word	0x1f131f0d
200011f8:	1f1f1f19 	.word	0x1f1f1f19
200011fc:	1f1f      	.short	0x1f1f
200011fe:	13          	.byte	0x13
200011ff:	00          	.byte	0x00
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
20001200:	6a43      	ldr	r3, [r0, #36]	; 0x24
20001202:	b90b      	cbnz	r3, 20001208 <MSS_UART_isr+0x44>
20001204:	be00      	bkpt	0x0000
20001206:	bd08      	pop	{r3, pc}
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
20001208:	4798      	blx	r3
2000120a:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
2000120c:	6a03      	ldr	r3, [r0, #32]
2000120e:	b90b      	cbnz	r3, 20001214 <MSS_UART_isr+0x50>
20001210:	be00      	bkpt	0x0000
20001212:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
20001214:	4798      	blx	r3
20001216:	bd08      	pop	{r3, pc}
            break;

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
20001218:	69c3      	ldr	r3, [r0, #28]
2000121a:	b90b      	cbnz	r3, 20001220 <MSS_UART_isr+0x5c>
2000121c:	be00      	bkpt	0x0000
2000121e:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
20001220:	4798      	blx	r3
20001222:	bd08      	pop	{r3, pc}
            }
            break;

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
20001224:	6983      	ldr	r3, [r0, #24]
20001226:	b90b      	cbnz	r3, 2000122c <MSS_UART_isr+0x68>
20001228:	be00      	bkpt	0x0000
2000122a:	bd08      	pop	{r3, pc}
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
2000122c:	4798      	blx	r3
2000122e:	bd08      	pop	{r3, pc}
            }
            break;

            default:
            {
                ASSERT( INVALID_INTERRUPT );
20001230:	be00      	bkpt	0x0000
20001232:	bd08      	pop	{r3, pc}

20001234 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20001234:	4668      	mov	r0, sp
20001236:	f020 0107 	bic.w	r1, r0, #7
2000123a:	468d      	mov	sp, r1
2000123c:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart0 );
2000123e:	f242 70f4 	movw	r0, #10228	; 0x27f4
20001242:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001246:	f7ff ffbd 	bl	200011c4 <MSS_UART_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000124a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000124e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001252:	f44f 6280 	mov.w	r2, #1024	; 0x400
20001256:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART0_IRQn );
}
2000125a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
2000125e:	4685      	mov	sp, r0
20001260:	4770      	bx	lr
20001262:	bf00      	nop

20001264 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20001264:	4668      	mov	r0, sp
20001266:	f020 0107 	bic.w	r1, r0, #7
2000126a:	468d      	mov	sp, r1
2000126c:	b501      	push	{r0, lr}
    MSS_UART_isr( &g_mss_uart1 );
2000126e:	f242 70cc 	movw	r0, #10188	; 0x27cc
20001272:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001276:	f7ff ffa5 	bl	200011c4 <MSS_UART_isr>
2000127a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000127e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001282:	f44f 6200 	mov.w	r2, #2048	; 0x800
20001286:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( UART1_IRQn );
}
2000128a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
2000128e:	4685      	mov	sp, r0
20001290:	4770      	bx	lr
20001292:	bf00      	nop

20001294 <recover_from_rx_overflow>:
 */
static void recover_from_rx_overflow
(
    mss_spi_instance_t * this_spi
)
{
20001294:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    uint32_t slave_select;
    
    /*
     * Read current SPI hardware block configuration.
     */
    control_reg = this_spi->hw_reg->CONTROL;
20001298:	6803      	ldr	r3, [r0, #0]
2000129a:	f8d3 8000 	ldr.w	r8, [r3]
    clk_gen = this_spi->hw_reg->CLK_GEN;
2000129e:	f8d3 c018 	ldr.w	ip, [r3, #24]
    frame_size = this_spi->hw_reg->TXRXDF_SIZE;
200012a2:	685f      	ldr	r7, [r3, #4]
    control2 = this_spi->hw_reg->CONTROL2;
200012a4:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    packet_size = this_spi->hw_reg->PKTSIZE;
200012a6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    cmd_size = this_spi->hw_reg->CMDSIZE;
200012a8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    slave_select = this_spi->hw_reg->SLAVE_SELECT;
200012aa:	f8d3 a01c 	ldr.w	sl, [r3, #28]
     
    /*
     * Reset the SPI hardware block.
     */
    if(this_spi == &g_mss_spi0)
200012ae:	f642 03a0 	movw	r3, #10400	; 0x28a0
200012b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012b6:	4298      	cmp	r0, r3
200012b8:	d124      	bne.n	20001304 <recover_from_rx_overflow+0x70>
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI0_BASE);
200012ba:	f642 03a0 	movw	r3, #10400	; 0x28a0
200012be:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012c2:	f241 0200 	movw	r2, #4096	; 0x1000
200012c6:	f2c4 0200 	movt	r2, #16384	; 0x4000
200012ca:	601a      	str	r2, [r3, #0]
        this_spi->irqn = SPI0_IRQn;
200012cc:	f04f 010c 	mov.w	r1, #12
200012d0:	8099      	strh	r1, [r3, #4]

        /* reset SPI0 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI0_SOFTRESET_MASK;
200012d2:	f242 0300 	movw	r3, #8192	; 0x2000
200012d6:	f2ce 0304 	movt	r3, #57348	; 0xe004
200012da:	6b19      	ldr	r1, [r3, #48]	; 0x30
200012dc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
200012e0:	6319      	str	r1, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200012e2:	f24e 1100 	movw	r1, #57600	; 0xe100
200012e6:	f2ce 0100 	movt	r1, #57344	; 0xe000
200012ea:	f44f 5980 	mov.w	r9, #4096	; 0x1000
200012ee:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
        /* Clear any previously pended SPI0 interrupt */
        NVIC_ClearPendingIRQ(SPI0_IRQn);
        /* Take SPI0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI0_SOFTRESET_MASK;
200012f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
200012f4:	f421 7100 	bic.w	r1, r1, #512	; 0x200
200012f8:	6319      	str	r1, [r3, #48]	; 0x30

        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
200012fa:	6813      	ldr	r3, [r2, #0]
200012fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
20001300:	6013      	str	r3, [r2, #0]
20001302:	e01f      	b.n	20001344 <recover_from_rx_overflow+0xb0>
    }
    else
    {
        this_spi->hw_reg = ((SPI_REVB_TypeDef *) SPI1_BASE);
20001304:	f241 0200 	movw	r2, #4096	; 0x1000
20001308:	f2c4 0201 	movt	r2, #16385	; 0x4001
2000130c:	6002      	str	r2, [r0, #0]
        this_spi->irqn = SPI1_IRQn;
2000130e:	f04f 030d 	mov.w	r3, #13
20001312:	8083      	strh	r3, [r0, #4]
        
        /* reset SPI1 */
        SYSREG->SOFT_RST_CR |= SYSREG_SPI1_SOFTRESET_MASK;
20001314:	f242 0300 	movw	r3, #8192	; 0x2000
20001318:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000131c:	6b19      	ldr	r1, [r3, #48]	; 0x30
2000131e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
20001322:	6319      	str	r1, [r3, #48]	; 0x30
20001324:	f24e 1100 	movw	r1, #57600	; 0xe100
20001328:	f2ce 0100 	movt	r1, #57344	; 0xe000
2000132c:	f44f 5900 	mov.w	r9, #8192	; 0x2000
20001330:	f8c1 9180 	str.w	r9, [r1, #384]	; 0x180
        /* Clear any previously pended SPI1 interrupt */
        NVIC_ClearPendingIRQ(SPI1_IRQn);
        /* Take SPI1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_SPI1_SOFTRESET_MASK;
20001334:	6b19      	ldr	r1, [r3, #48]	; 0x30
20001336:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
2000133a:	6319      	str	r1, [r3, #48]	; 0x30
        
        this_spi->hw_reg->CONTROL &= ~CTRL_REG_RESET_MASK;
2000133c:	6813      	ldr	r3, [r2, #0]
2000133e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
20001342:	6013      	str	r3, [r2, #0]
    }
    
    /*
     * Restore SPI hardware block configuration.
     */
    control_reg &= ~(uint32_t)CTRL_ENABLE_MASK;
20001344:	f028 0201 	bic.w	r2, r8, #1
    this_spi->hw_reg->CONTROL = control_reg;
20001348:	6803      	ldr	r3, [r0, #0]
2000134a:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CLK_GEN = clk_gen;
2000134c:	6803      	ldr	r3, [r0, #0]
2000134e:	f8c3 c018 	str.w	ip, [r3, #24]
    this_spi->hw_reg->TXRXDF_SIZE = frame_size;
20001352:	6803      	ldr	r3, [r0, #0]
20001354:	605f      	str	r7, [r3, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001356:	6803      	ldr	r3, [r0, #0]
20001358:	681a      	ldr	r2, [r3, #0]
2000135a:	f042 0201 	orr.w	r2, r2, #1
2000135e:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL2 = control2;
20001360:	6803      	ldr	r3, [r0, #0]
20001362:	629e      	str	r6, [r3, #40]	; 0x28
    this_spi->hw_reg->PKTSIZE = packet_size;
20001364:	6803      	ldr	r3, [r0, #0]
20001366:	631d      	str	r5, [r3, #48]	; 0x30
    this_spi->hw_reg->CMDSIZE = cmd_size;
20001368:	6803      	ldr	r3, [r0, #0]
2000136a:	635c      	str	r4, [r3, #52]	; 0x34
    this_spi->hw_reg->SLAVE_SELECT = slave_select;
2000136c:	6803      	ldr	r3, [r0, #0]
2000136e:	f8c3 a01c 	str.w	sl, [r3, #28]
}
20001372:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
20001376:	4770      	bx	lr

20001378 <MSS_SPI_configure_master_mode>:
    mss_spi_slave_t         slave,
    mss_spi_protocol_mode_t protocol_mode,
    mss_spi_pclk_div_t      clk_rate,
    uint8_t                 frame_bit_length
)
{
20001378:	b4f0      	push	{r4, r5, r6, r7}
2000137a:	f89d 5010 	ldrb.w	r5, [sp, #16]
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
2000137e:	f642 0ca0 	movw	ip, #10400	; 0x28a0
20001382:	f2c2 0c00 	movt	ip, #8192	; 0x2000
20001386:	4560      	cmp	r0, ip
20001388:	d006      	beq.n	20001398 <MSS_SPI_configure_master_mode+0x20>
2000138a:	f642 0c1c 	movw	ip, #10268	; 0x281c
2000138e:	f2c2 0c00 	movt	ip, #8192	; 0x2000
20001392:	4560      	cmp	r0, ip
20001394:	d000      	beq.n	20001398 <MSS_SPI_configure_master_mode+0x20>
20001396:	be00      	bkpt	0x0000
    ASSERT(slave < MSS_SPI_MAX_NB_OF_SLAVES);
20001398:	2907      	cmp	r1, #7
2000139a:	d900      	bls.n	2000139e <MSS_SPI_configure_master_mode+0x26>
2000139c:	be00      	bkpt	0x0000
    ASSERT(frame_bit_length <= MAX_FRAME_LENGTH);
2000139e:	2d20      	cmp	r5, #32
200013a0:	d900      	bls.n	200013a4 <MSS_SPI_configure_master_mode+0x2c>
200013a2:	be00      	bkpt	0x0000
    
    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
200013a4:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200013a8:	fa0f f68c 	sxth.w	r6, ip
200013ac:	ea4f 1656 	mov.w	r6, r6, lsr #5
200013b0:	f00c 0c1f 	and.w	ip, ip, #31
200013b4:	f04f 0701 	mov.w	r7, #1
200013b8:	fa07 f70c 	lsl.w	r7, r7, ip
200013bc:	f24e 1400 	movw	r4, #57600	; 0xe100
200013c0:	f2ce 0400 	movt	r4, #57344	; 0xe000
200013c4:	f106 0620 	add.w	r6, r6, #32
200013c8:	f844 7026 	str.w	r7, [r4, r6, lsl #2]

    /* Reset slave transfer mode to unknown to wipe slate clean */
    this_spi->slave_xfer_mode = MSS_SPI_SLAVE_XFER_NONE;
200013cc:	f04f 0c00 	mov.w	ip, #0
200013d0:	f880 c080 	strb.w	ip, [r0, #128]	; 0x80

    /* Set the mode. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
200013d4:	6804      	ldr	r4, [r0, #0]
200013d6:	6826      	ldr	r6, [r4, #0]
200013d8:	f026 0601 	bic.w	r6, r6, #1
200013dc:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_MASTER_MASK;
200013de:	6804      	ldr	r4, [r0, #0]
200013e0:	6826      	ldr	r6, [r4, #0]
200013e2:	f046 0602 	orr.w	r6, r6, #2
200013e6:	6026      	str	r6, [r4, #0]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
200013e8:	6804      	ldr	r4, [r0, #0]
200013ea:	6826      	ldr	r6, [r4, #0]
200013ec:	f046 0601 	orr.w	r6, r6, #1
200013f0:	6026      	str	r6, [r4, #0]
    /*
     * Keep track of the required register configuration for this slave. These
     * values will be used by the MSS_SPI_set_slave_select() function to configure
     * the master to match the slave being selected.
     */
    if(slave < MSS_SPI_MAX_NB_OF_SLAVES)     
200013f2:	2907      	cmp	r1, #7
200013f4:	d82d      	bhi.n	20001452 <MSS_SPI_configure_master_mode+0xda>
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
200013f6:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
200013fa:	bf14      	ite	ne
200013fc:	2400      	movne	r4, #0
200013fe:	2401      	moveq	r4, #1
20001400:	4562      	cmp	r2, ip
20001402:	bf08      	it	eq
20001404:	f044 0401 	orreq.w	r4, r4, #1
20001408:	b954      	cbnz	r4, 20001420 <MSS_SPI_configure_master_mode+0xa8>
2000140a:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
2000140e:	bf14      	ite	ne
20001410:	2400      	movne	r4, #0
20001412:	2401      	moveq	r4, #1
20001414:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
20001418:	bf08      	it	eq
2000141a:	f044 0401 	orreq.w	r4, r4, #1
2000141e:	b14c      	cbz	r4, 20001434 <MSS_SPI_configure_master_mode+0xbc>
           (MSS_SPI_MODE2 == protocol_mode) || (MSS_SPI_MODE3 == protocol_mode))
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK | SPS_MASK |
20001420:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
20001424:	f240 1c02 	movw	ip, #258	; 0x102
20001428:	f2c2 4c00 	movt	ip, #9216	; 0x2400
2000142c:	ea42 020c 	orr.w	r2, r2, ip
20001430:	6362      	str	r2, [r4, #52]	; 0x34
         *
         * We only do it for Motorola modes and if you need the slave selected
         * deselected between frames in modes 0 or 2 then remove SPS_MASK from
         * below.
         */
        if((MSS_SPI_MODE0 == protocol_mode) || (MSS_SPI_MODE1 == protocol_mode) ||
20001432:	e008      	b.n	20001446 <MSS_SPI_configure_master_mode+0xce>
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        else
        {
            this_spi->slaves_cfg[slave].ctrl_reg = MASTER_MODE_MASK |
20001434:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
20001438:	f240 1c02 	movw	ip, #258	; 0x102
2000143c:	f2c2 0c00 	movt	ip, #8192	; 0x2000
20001440:	ea42 020c 	orr.w	r2, r2, ip
20001444:	6362      	str	r2, [r4, #52]	; 0x34
                                                   BIGFIFO_MASK |
                                                   (uint32_t)protocol_mode | 
                                                   ((uint32_t)1 << TXRXDFCOUNT_SHIFT);
        }
        
        this_spi->slaves_cfg[slave].txrxdf_size_reg = frame_bit_length;
20001446:	f101 0106 	add.w	r1, r1, #6
2000144a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
2000144e:	720d      	strb	r5, [r1, #8]
        this_spi->slaves_cfg[slave].clk_gen = (uint8_t)clk_rate;
20001450:	724b      	strb	r3, [r1, #9]
    }
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001452:	8883      	ldrh	r3, [r0, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20001454:	b21a      	sxth	r2, r3
20001456:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000145a:	f003 031f 	and.w	r3, r3, #31
2000145e:	f04f 0101 	mov.w	r1, #1
20001462:	fa01 f103 	lsl.w	r1, r1, r3
20001466:	f24e 1300 	movw	r3, #57600	; 0xe100
2000146a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000146e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001472:	bcf0      	pop	{r4, r5, r6, r7}
20001474:	4770      	bx	lr
20001476:	bf00      	nop

20001478 <MSS_SPI_set_slave_select>:
void MSS_SPI_set_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20001478:	b538      	push	{r3, r4, r5, lr}
2000147a:	4604      	mov	r4, r0
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
2000147c:	f642 03a0 	movw	r3, #10400	; 0x28a0
20001480:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001484:	4298      	cmp	r0, r3
20001486:	d006      	beq.n	20001496 <MSS_SPI_set_slave_select+0x1e>
20001488:	f642 031c 	movw	r3, #10268	; 0x281c
2000148c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001490:	4298      	cmp	r0, r3
20001492:	d000      	beq.n	20001496 <MSS_SPI_set_slave_select+0x1e>
20001494:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001496:	6822      	ldr	r2, [r4, #0]
20001498:	6813      	ldr	r3, [r2, #0]
2000149a:	f013 0f02 	tst.w	r3, #2
2000149e:	d100      	bne.n	200014a2 <MSS_SPI_set_slave_select+0x2a>
200014a0:	be00      	bkpt	0x0000
    
    ASSERT(this_spi->slaves_cfg[slave].ctrl_reg != NOT_CONFIGURED);
200014a2:	460d      	mov	r5, r1
200014a4:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
200014a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200014aa:	f1b3 3fff 	cmp.w	r3, #4294967295
200014ae:	d100      	bne.n	200014b2 <MSS_SPI_set_slave_select+0x3a>
200014b0:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
200014b2:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200014b4:	b219      	sxth	r1, r3
200014b6:	ea4f 1151 	mov.w	r1, r1, lsr #5
200014ba:	f003 031f 	and.w	r3, r3, #31
200014be:	f04f 0001 	mov.w	r0, #1
200014c2:	fa00 f003 	lsl.w	r0, r0, r3
200014c6:	f24e 1300 	movw	r3, #57600	; 0xe100
200014ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
200014ce:	f101 0120 	add.w	r1, r1, #32
200014d2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
200014d6:	6893      	ldr	r3, [r2, #8]
    if(rx_overflow)
200014d8:	f013 0f04 	tst.w	r3, #4
200014dc:	d002      	beq.n	200014e4 <MSS_SPI_set_slave_select+0x6c>
    {
         recover_from_rx_overflow(this_spi);
200014de:	4620      	mov	r0, r4
200014e0:	f7ff fed8 	bl	20001294 <recover_from_rx_overflow>
    }
    
    /* Set the clock rate. */
    this_spi->hw_reg->CONTROL &= ~(uint32_t)CTRL_ENABLE_MASK;
200014e4:	6823      	ldr	r3, [r4, #0]
200014e6:	681a      	ldr	r2, [r3, #0]
200014e8:	f022 0201 	bic.w	r2, r2, #1
200014ec:	601a      	str	r2, [r3, #0]
    this_spi->hw_reg->CONTROL = this_spi->slaves_cfg[slave].ctrl_reg;
200014ee:	6822      	ldr	r2, [r4, #0]
200014f0:	f105 0306 	add.w	r3, r5, #6
200014f4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
200014f8:	6859      	ldr	r1, [r3, #4]
200014fa:	6011      	str	r1, [r2, #0]
    this_spi->hw_reg->CLK_GEN = this_spi->slaves_cfg[slave].clk_gen;
200014fc:	6822      	ldr	r2, [r4, #0]
200014fe:	7a59      	ldrb	r1, [r3, #9]
20001500:	6191      	str	r1, [r2, #24]
    this_spi->hw_reg->TXRXDF_SIZE = this_spi->slaves_cfg[slave].txrxdf_size_reg;
20001502:	6822      	ldr	r2, [r4, #0]
20001504:	7a1b      	ldrb	r3, [r3, #8]
20001506:	6053      	str	r3, [r2, #4]
    this_spi->hw_reg->CONTROL |= CTRL_ENABLE_MASK;
20001508:	6823      	ldr	r3, [r4, #0]
2000150a:	681a      	ldr	r2, [r3, #0]
2000150c:	f042 0201 	orr.w	r2, r2, #1
20001510:	601a      	str	r2, [r3, #0]
    
    /* Set slave select */
    this_spi->hw_reg->SLAVE_SELECT |= ((uint32_t)1 << (uint32_t)slave);
20001512:	6822      	ldr	r2, [r4, #0]
20001514:	69d1      	ldr	r1, [r2, #28]
20001516:	f04f 0301 	mov.w	r3, #1
2000151a:	fa03 f505 	lsl.w	r5, r3, r5
2000151e:	ea45 0501 	orr.w	r5, r5, r1
20001522:	61d5      	str	r5, [r2, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
20001524:	88a2      	ldrh	r2, [r4, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20001526:	b211      	sxth	r1, r2
20001528:	ea4f 1151 	mov.w	r1, r1, lsr #5
2000152c:	f002 021f 	and.w	r2, r2, #31
20001530:	fa03 f202 	lsl.w	r2, r3, r2
20001534:	f24e 1300 	movw	r3, #57600	; 0xe100
20001538:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000153c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
20001540:	bd38      	pop	{r3, r4, r5, pc}
20001542:	bf00      	nop

20001544 <MSS_SPI_clear_slave_select>:
void MSS_SPI_clear_slave_select
(
    mss_spi_instance_t * this_spi,
    mss_spi_slave_t slave
)
{
20001544:	b538      	push	{r3, r4, r5, lr}
20001546:	4604      	mov	r4, r0
20001548:	460d      	mov	r5, r1
    uint32_t rx_overflow;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
2000154a:	f642 03a0 	movw	r3, #10400	; 0x28a0
2000154e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001552:	4298      	cmp	r0, r3
20001554:	d006      	beq.n	20001564 <MSS_SPI_clear_slave_select+0x20>
20001556:	f642 031c 	movw	r3, #10268	; 0x281c
2000155a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000155e:	4298      	cmp	r0, r3
20001560:	d000      	beq.n	20001564 <MSS_SPI_clear_slave_select+0x20>
20001562:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
20001564:	6822      	ldr	r2, [r4, #0]
20001566:	6813      	ldr	r3, [r2, #0]
20001568:	f013 0f02 	tst.w	r3, #2
2000156c:	d100      	bne.n	20001570 <MSS_SPI_clear_slave_select+0x2c>
2000156e:	be00      	bkpt	0x0000

    /* Shut down interrupts from the MSS SPI while we do this */
    NVIC_DisableIRQ( this_spi->irqn );
20001570:	88a3      	ldrh	r3, [r4, #4]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20001572:	b219      	sxth	r1, r3
20001574:	ea4f 1151 	mov.w	r1, r1, lsr #5
20001578:	f003 031f 	and.w	r3, r3, #31
2000157c:	f04f 0001 	mov.w	r0, #1
20001580:	fa00 f003 	lsl.w	r0, r0, r3
20001584:	f24e 1300 	movw	r3, #57600	; 0xe100
20001588:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000158c:	f101 0120 	add.w	r1, r1, #32
20001590:	f843 0021 	str.w	r0, [r3, r1, lsl #2]

    /* Recover from receive overflow. */
    rx_overflow = this_spi->hw_reg->STATUS & RX_OVERFLOW_MASK;
20001594:	6893      	ldr	r3, [r2, #8]
    if(rx_overflow)
20001596:	f013 0f04 	tst.w	r3, #4
2000159a:	d002      	beq.n	200015a2 <MSS_SPI_clear_slave_select+0x5e>
    {
         recover_from_rx_overflow(this_spi);
2000159c:	4620      	mov	r0, r4
2000159e:	f7ff fe79 	bl	20001294 <recover_from_rx_overflow>
    }
    
    this_spi->hw_reg->SLAVE_SELECT &= ~((uint32_t)1 << (uint32_t)slave);
200015a2:	6822      	ldr	r2, [r4, #0]
200015a4:	69d1      	ldr	r1, [r2, #28]
200015a6:	f04f 0301 	mov.w	r3, #1
200015aa:	fa03 f505 	lsl.w	r5, r3, r5
200015ae:	ea21 0505 	bic.w	r5, r1, r5
200015b2:	61d5      	str	r5, [r2, #28]
    /* Reenable interrupts */
    NVIC_EnableIRQ( this_spi->irqn );
200015b4:	88a2      	ldrh	r2, [r4, #4]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200015b6:	b211      	sxth	r1, r2
200015b8:	ea4f 1151 	mov.w	r1, r1, lsr #5
200015bc:	f002 021f 	and.w	r2, r2, #31
200015c0:	fa03 f202 	lsl.w	r2, r3, r2
200015c4:	f24e 1300 	movw	r3, #57600	; 0xe100
200015c8:	f2ce 0300 	movt	r3, #57344	; 0xe000
200015cc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
200015d0:	bd38      	pop	{r3, r4, r5, pc}
200015d2:	bf00      	nop

200015d4 <MSS_SPI_transfer_frame>:
uint32_t MSS_SPI_transfer_frame
(
    mss_spi_instance_t * this_spi,
    uint32_t tx_bits
)
{
200015d4:	b410      	push	{r4}
200015d6:	b083      	sub	sp, #12
    volatile uint32_t dummy;
    uint32_t rx_fifo_empty;
    uint32_t rx_ready;
    uint32_t tx_done;
    
    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
200015d8:	f642 03a0 	movw	r3, #10400	; 0x28a0
200015dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200015e0:	4298      	cmp	r0, r3
200015e2:	d006      	beq.n	200015f2 <MSS_SPI_transfer_frame+0x1e>
200015e4:	f642 031c 	movw	r3, #10268	; 0x281c
200015e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200015ec:	4298      	cmp	r0, r3
200015ee:	d000      	beq.n	200015f2 <MSS_SPI_transfer_frame+0x1e>
200015f0:	be00      	bkpt	0x0000
    
    /* This function is only intended to be used with an SPI master. */
    ASSERT((this_spi->hw_reg->CONTROL & CTRL_MASTER_MASK) == CTRL_MASTER_MASK);
200015f2:	6803      	ldr	r3, [r0, #0]
200015f4:	681a      	ldr	r2, [r3, #0]
200015f6:	f012 0f02 	tst.w	r2, #2
200015fa:	d100      	bne.n	200015fe <MSS_SPI_transfer_frame+0x2a>
200015fc:	be00      	bkpt	0x0000
    
    /* Ensure single frame transfer selected so interrupts work correctly */
    this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
200015fe:	681c      	ldr	r4, [r3, #0]
20001600:	f240 02ff 	movw	r2, #255	; 0xff
20001604:	f6cf 7200 	movt	r2, #65280	; 0xff00
20001608:	ea04 0202 	and.w	r2, r4, r2
2000160c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
20001610:	601a      	str	r2, [r3, #0]
                                | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);

    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20001612:	6803      	ldr	r3, [r0, #0]
20001614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001616:	f042 020c 	orr.w	r2, r2, #12
2000161a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
2000161c:	6803      	ldr	r3, [r0, #0]
2000161e:	689a      	ldr	r2, [r3, #8]
    while(0u == rx_fifo_empty)
20001620:	f012 0f40 	tst.w	r2, #64	; 0x40
20001624:	d107      	bne.n	20001636 <MSS_SPI_transfer_frame+0x62>
    {
        dummy = this_spi->hw_reg->RX_DATA;
20001626:	691a      	ldr	r2, [r3, #16]
20001628:	9201      	str	r2, [sp, #4]
        dummy = dummy;  /* Prevent Lint warning. */
2000162a:	9a01      	ldr	r2, [sp, #4]
2000162c:	9201      	str	r2, [sp, #4]
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
2000162e:	689a      	ldr	r2, [r3, #8]
    /* Flush the Tx and Rx FIFOs. Please note this does not have any effect on A2F200. */
    this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
    
    /* Flush Rx FIFO in case we are executing on A2F200. */
    rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    while(0u == rx_fifo_empty)
20001630:	f012 0f40 	tst.w	r2, #64	; 0x40
20001634:	d0f7      	beq.n	20001626 <MSS_SPI_transfer_frame+0x52>
        dummy = dummy;  /* Prevent Lint warning. */
        rx_fifo_empty = this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK;
    }
    
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
20001636:	6159      	str	r1, [r3, #20]
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20001638:	6803      	ldr	r3, [r0, #0]
2000163a:	689a      	ldr	r2, [r3, #8]
    while(0u == tx_done)
2000163c:	f012 0f01 	tst.w	r2, #1
20001640:	d103      	bne.n	2000164a <MSS_SPI_transfer_frame+0x76>
    {
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
20001642:	689a      	ldr	r2, [r3, #8]
    /* Send frame. */
    this_spi->hw_reg->TX_DATA = tx_bits;
    
    /* Wait for frame Tx to complete. */
    tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    while(0u == tx_done)
20001644:	f012 0f01 	tst.w	r2, #1
20001648:	d0fb      	beq.n	20001642 <MSS_SPI_transfer_frame+0x6e>
        tx_done = this_spi->hw_reg->STATUS & TX_DONE_MASK;
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
2000164a:	689a      	ldr	r2, [r3, #8]
    while(0u == rx_ready)
2000164c:	f012 0f02 	tst.w	r2, #2
20001650:	d103      	bne.n	2000165a <MSS_SPI_transfer_frame+0x86>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
20001652:	689a      	ldr	r2, [r3, #8]
    }
    
    /* Read received frame. */
    /* Wait for Rx complete. */
    rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    while(0u == rx_ready)
20001654:	f012 0f02 	tst.w	r2, #2
20001658:	d0fb      	beq.n	20001652 <MSS_SPI_transfer_frame+0x7e>
    {
        rx_ready = this_spi->hw_reg->STATUS & RX_DATA_READY_MASK;
    }
    /* Return Rx data. */
    return( this_spi->hw_reg->RX_DATA );
2000165a:	6918      	ldr	r0, [r3, #16]
}
2000165c:	b003      	add	sp, #12
2000165e:	bc10      	pop	{r4}
20001660:	4770      	bx	lr
20001662:	bf00      	nop

20001664 <fill_slave_tx_fifo>:
 */
static void fill_slave_tx_fifo
(
    mss_spi_instance_t * this_spi
)
{
20001664:	b410      	push	{r4}
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001666:	6802      	ldr	r2, [r0, #0]
20001668:	6893      	ldr	r3, [r2, #8]
2000166a:	f413 7f80 	tst.w	r3, #256	; 0x100
2000166e:	d113      	bne.n	20001698 <fill_slave_tx_fifo+0x34>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20001670:	6903      	ldr	r3, [r0, #16]
20001672:	68c1      	ldr	r1, [r0, #12]
20001674:	428b      	cmp	r3, r1
20001676:	d213      	bcs.n	200016a0 <fill_slave_tx_fifo+0x3c>
    {
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
20001678:	6881      	ldr	r1, [r0, #8]
2000167a:	5ccb      	ldrb	r3, [r1, r3]
2000167c:	6153      	str	r3, [r2, #20]
        ++this_spi->slave_tx_idx;
2000167e:	6903      	ldr	r3, [r0, #16]
20001680:	f103 0301 	add.w	r3, r3, #1
20001684:	6103      	str	r3, [r0, #16]
    mss_spi_instance_t * this_spi
)
{
    uint32_t guard = 0u;

    while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001686:	6802      	ldr	r2, [r0, #0]
20001688:	6891      	ldr	r1, [r2, #8]
2000168a:	f411 7f80 	tst.w	r1, #256	; 0x100
2000168e:	d103      	bne.n	20001698 <fill_slave_tx_fifo+0x34>
          (this_spi->slave_tx_idx < this_spi->slave_tx_size))
20001690:	68c1      	ldr	r1, [r0, #12]
20001692:	4299      	cmp	r1, r3
20001694:	d8f0      	bhi.n	20001678 <fill_slave_tx_fifo+0x14>
20001696:	e003      	b.n	200016a0 <fill_slave_tx_fifo+0x3c>
        /* Sending from primary slave transmit buffer */
        this_spi->hw_reg->TX_DATA = this_spi->slave_tx_buffer[this_spi->slave_tx_idx];
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
20001698:	6902      	ldr	r2, [r0, #16]
2000169a:	68c3      	ldr	r3, [r0, #12]
2000169c:	429a      	cmp	r2, r3
2000169e:	d317      	bcc.n	200016d0 <fill_slave_tx_fifo+0x6c>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200016a0:	6802      	ldr	r2, [r0, #0]
200016a2:	6893      	ldr	r3, [r2, #8]
200016a4:	f413 7f80 	tst.w	r3, #256	; 0x100
200016a8:	d112      	bne.n	200016d0 <fill_slave_tx_fifo+0x6c>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
200016aa:	69c3      	ldr	r3, [r0, #28]
200016ac:	6981      	ldr	r1, [r0, #24]
200016ae:	428b      	cmp	r3, r1
200016b0:	d20e      	bcs.n	200016d0 <fill_slave_tx_fifo+0x6c>
        {
            /* Sending from command response buffer */
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
200016b2:	6941      	ldr	r1, [r0, #20]
200016b4:	5ccb      	ldrb	r3, [r1, r3]
200016b6:	6153      	str	r3, [r2, #20]
            ++this_spi->resp_buff_tx_idx;
200016b8:	69c3      	ldr	r3, [r0, #28]
200016ba:	f103 0301 	add.w	r3, r3, #1
200016be:	61c3      	str	r3, [r0, #28]
        ++this_spi->slave_tx_idx;
    }

    if(this_spi->slave_tx_idx >= this_spi->slave_tx_size)
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200016c0:	6802      	ldr	r2, [r0, #0]
200016c2:	6891      	ldr	r1, [r2, #8]
200016c4:	f411 7f80 	tst.w	r1, #256	; 0x100
200016c8:	d102      	bne.n	200016d0 <fill_slave_tx_fifo+0x6c>
              (this_spi->resp_buff_tx_idx < this_spi->resp_buff_size))
200016ca:	6981      	ldr	r1, [r0, #24]
200016cc:	4299      	cmp	r1, r3
200016ce:	d8f0      	bhi.n	200016b2 <fill_slave_tx_fifo+0x4e>
            this_spi->hw_reg->TX_DATA = this_spi->resp_tx_buffer[this_spi->resp_buff_tx_idx];
            ++this_spi->resp_buff_tx_idx;
        }
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
200016d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
200016d2:	b1cb      	cbz	r3, 20001708 <fill_slave_tx_fifo+0xa4>
200016d4:	6902      	ldr	r2, [r0, #16]
200016d6:	68c3      	ldr	r3, [r0, #12]
200016d8:	429a      	cmp	r2, r3
200016da:	d315      	bcc.n	20001708 <fill_slave_tx_fifo+0xa4>
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
200016dc:	69c2      	ldr	r2, [r0, #28]
200016de:	6983      	ldr	r3, [r0, #24]
200016e0:	429a      	cmp	r2, r3
200016e2:	d311      	bcc.n	20001708 <fill_slave_tx_fifo+0xa4>
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200016e4:	6803      	ldr	r3, [r0, #0]
200016e6:	689a      	ldr	r2, [r3, #8]
200016e8:	f412 7f80 	tst.w	r2, #256	; 0x100
200016ec:	d10c      	bne.n	20001708 <fill_slave_tx_fifo+0xa4>
200016ee:	f04f 0200 	mov.w	r2, #0
              (guard < BIG_FIFO_SIZE))
        {
            /* Nothing left so pad with 0s for consistency */
            this_spi->hw_reg->TX_DATA = 0x00u;
200016f2:	4614      	mov	r4, r2
200016f4:	615c      	str	r4, [r3, #20]
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
200016f6:	6803      	ldr	r3, [r0, #0]
200016f8:	6899      	ldr	r1, [r3, #8]
200016fa:	f411 7f80 	tst.w	r1, #256	; 0x100
200016fe:	d103      	bne.n	20001708 <fill_slave_tx_fifo+0xa4>
             * We use the guard count to cover the unlikely event that we are
             * never seeing the TX FIFO full because the data is being pulled
             * out as fast as we can stuff it in. In this event we never spend
             * more than a full FIFOs worth of time spinning here.
             */
            guard++;
20001700:	f102 0201 	add.w	r2, r2, #1
    }

    if((0u != this_spi->cmd_done) && (this_spi->slave_tx_idx >= this_spi->slave_tx_size) &&
       (this_spi->resp_buff_tx_idx >= this_spi->resp_buff_size))
    {
        while((0u == (this_spi->hw_reg->STATUS & TX_FIFO_FULL_MASK)) &&
20001704:	2a20      	cmp	r2, #32
20001706:	d1f5      	bne.n	200016f4 <fill_slave_tx_fifo+0x90>
             */
            guard++;
        }
    }

}
20001708:	bc10      	pop	{r4}
2000170a:	4770      	bx	lr

2000170c <read_slave_rx_fifo>:
 */
static void read_slave_rx_fifo
(
    mss_spi_instance_t * this_spi
)
{
2000170c:	b510      	push	{r4, lr}
2000170e:	b082      	sub	sp, #8
20001710:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
20001712:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
20001716:	2b02      	cmp	r3, #2
20001718:	d10c      	bne.n	20001734 <read_slave_rx_fifo+0x28>
2000171a:	e005      	b.n	20001728 <read_slave_rx_fifo+0x1c>
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            /* Single frame handling mode. */
            rx_frame = this_spi->hw_reg->RX_DATA;
2000171c:	6913      	ldr	r3, [r2, #16]
2000171e:	9301      	str	r3, [sp, #4]
            if(0u != this_spi->frame_rx_handler)
20001720:	6f63      	ldr	r3, [r4, #116]	; 0x74
20001722:	b113      	cbz	r3, 2000172a <read_slave_rx_fifo+0x1e>
            {
                this_spi->frame_rx_handler( rx_frame );
20001724:	9801      	ldr	r0, [sp, #4]
20001726:	4798      	blx	r3
{
    volatile uint32_t rx_frame;
    
    if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
    {
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001728:	6822      	ldr	r2, [r4, #0]
2000172a:	6893      	ldr	r3, [r2, #8]
2000172c:	f013 0f40 	tst.w	r3, #64	; 0x40
20001730:	d0f4      	beq.n	2000171c <read_slave_rx_fifo+0x10>
20001732:	e023      	b.n	2000177c <read_slave_rx_fifo+0x70>
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
20001734:	2b01      	cmp	r3, #1
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001736:	6803      	ldr	r3, [r0, #0]
20001738:	689a      	ldr	r2, [r3, #8]
            {
                this_spi->frame_rx_handler( rx_frame );
            }
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
2000173a:	d003      	beq.n	20001744 <read_slave_rx_fifo+0x38>
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000173c:	f012 0f40 	tst.w	r2, #64	; 0x40
20001740:	d016      	beq.n	20001770 <read_slave_rx_fifo+0x64>
20001742:	e01b      	b.n	2000177c <read_slave_rx_fifo+0x70>
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001744:	f012 0f40 	tst.w	r2, #64	; 0x40
20001748:	d118      	bne.n	2000177c <read_slave_rx_fifo+0x70>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
2000174a:	691b      	ldr	r3, [r3, #16]
2000174c:	9301      	str	r3, [sp, #4]
            if(this_spi->slave_rx_idx < this_spi->slave_rx_size)
2000174e:	6b23      	ldr	r3, [r4, #48]	; 0x30
20001750:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20001752:	4293      	cmp	r3, r2
            {
                this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
20001754:	bf3e      	ittt	cc
20001756:	9901      	ldrcc	r1, [sp, #4]
20001758:	6aa2      	ldrcc	r2, [r4, #40]	; 0x28
2000175a:	54d1      	strbcc	r1, [r2, r3]
            }

            ++this_spi->slave_rx_idx;
2000175c:	6b23      	ldr	r3, [r4, #48]	; 0x30
2000175e:	f103 0301 	add.w	r3, r3, #1
20001762:	6323      	str	r3, [r4, #48]	; 0x30
        }
    }
    else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
    {
        /* Block handling mode. */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
20001764:	6823      	ldr	r3, [r4, #0]
20001766:	689a      	ldr	r2, [r3, #8]
20001768:	f012 0f40 	tst.w	r2, #64	; 0x40
2000176c:	d0ed      	beq.n	2000174a <read_slave_rx_fifo+0x3e>
2000176e:	e005      	b.n	2000177c <read_slave_rx_fifo+0x70>
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
20001770:	691a      	ldr	r2, [r3, #16]
20001772:	9201      	str	r2, [sp, #4]
        }
    }
    else
    {
        /* Should not happen... Just purge FIFO */
        while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
20001774:	689a      	ldr	r2, [r3, #8]
20001776:	f012 0f40 	tst.w	r2, #64	; 0x40
2000177a:	d0f9      	beq.n	20001770 <read_slave_rx_fifo+0x64>
        {
            rx_frame = this_spi->hw_reg->RX_DATA;
        }
    }
}
2000177c:	b002      	add	sp, #8
2000177e:	bd10      	pop	{r4, pc}

20001780 <mss_spi_isr>:
 */
static void mss_spi_isr
(
    mss_spi_instance_t * this_spi
)
{    
20001780:	b570      	push	{r4, r5, r6, lr}
20001782:	b082      	sub	sp, #8
20001784:	4604      	mov	r4, r0
    volatile uint32_t rx_frame;
    __I  uint32_t *this_mis = &this_spi->hw_reg->MIS;
20001786:	6805      	ldr	r5, [r0, #0]

    ASSERT((this_spi == &g_mss_spi0) || (this_spi == &g_mss_spi1));
20001788:	f642 03a0 	movw	r3, #10400	; 0x28a0
2000178c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001790:	4298      	cmp	r0, r3
20001792:	d006      	beq.n	200017a2 <mss_spi_isr+0x22>
20001794:	f642 031c 	movw	r3, #10268	; 0x281c
20001798:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000179c:	4298      	cmp	r0, r3
2000179e:	d000      	beq.n	200017a2 <mss_spi_isr+0x22>
200017a0:	be00      	bkpt	0x0000
  
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
200017a2:	6a2b      	ldr	r3, [r5, #32]
200017a4:	f013 0f02 	tst.w	r3, #2
200017a8:	d038      	beq.n	2000181c <mss_spi_isr+0x9c>
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
200017aa:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
200017ae:	2b02      	cmp	r3, #2
200017b0:	d10c      	bne.n	200017cc <mss_spi_isr+0x4c>
200017b2:	e005      	b.n	200017c0 <mss_spi_isr+0x40>
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
200017b4:	6913      	ldr	r3, [r2, #16]
200017b6:	9301      	str	r3, [sp, #4]
                if(0u != this_spi->frame_rx_handler)
200017b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
200017ba:	b113      	cbz	r3, 200017c2 <mss_spi_isr+0x42>
                {
                    this_spi->frame_rx_handler( rx_frame );
200017bc:	9801      	ldr	r0, [sp, #4]
200017be:	4798      	blx	r3
    if(0u != (*this_mis & RXDONE_IRQ_MASK))
    {
        if(MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode)
        {
            /* Single frame handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200017c0:	6822      	ldr	r2, [r4, #0]
200017c2:	6893      	ldr	r3, [r2, #8]
200017c4:	f013 0f40 	tst.w	r3, #64	; 0x40
200017c8:	d0f4      	beq.n	200017b4 <mss_spi_isr+0x34>
200017ca:	e023      	b.n	20001814 <mss_spi_isr+0x94>
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
200017cc:	2b01      	cmp	r3, #1
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200017ce:	68ab      	ldr	r3, [r5, #8]
                {
                    this_spi->frame_rx_handler( rx_frame );
                }
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
200017d0:	d003      	beq.n	200017da <mss_spi_isr+0x5a>
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
200017d2:	f013 0f40 	tst.w	r3, #64	; 0x40
200017d6:	d017      	beq.n	20001808 <mss_spi_isr+0x88>
200017d8:	e01c      	b.n	20001814 <mss_spi_isr+0x94>
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200017da:	f013 0f40 	tst.w	r3, #64	; 0x40
200017de:	d119      	bne.n	20001814 <mss_spi_isr+0x94>
200017e0:	462b      	mov	r3, r5
            {
                rx_frame = this_spi->hw_reg->RX_DATA;                /* Read from FIFO irrespective */
200017e2:	691b      	ldr	r3, [r3, #16]
200017e4:	9301      	str	r3, [sp, #4]
                if(this_spi->slave_rx_idx < this_spi->slave_rx_size) /* Write to array if required */
200017e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
200017e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
200017ea:	4293      	cmp	r3, r2
                {
                    this_spi->slave_rx_buffer[this_spi->slave_rx_idx] = (uint8_t)rx_frame;
200017ec:	bf3e      	ittt	cc
200017ee:	9901      	ldrcc	r1, [sp, #4]
200017f0:	6aa2      	ldrcc	r2, [r4, #40]	; 0x28
200017f2:	54d1      	strbcc	r1, [r2, r3]
                }

                ++this_spi->slave_rx_idx;            
200017f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
200017f6:	f103 0301 	add.w	r3, r3, #1
200017fa:	6323      	str	r3, [r4, #48]	; 0x30
            }
        }
        else if(MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode)
        {
            /* Block handling mode. */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK)) /* Something needs to be read from FIFO */
200017fc:	6823      	ldr	r3, [r4, #0]
200017fe:	689a      	ldr	r2, [r3, #8]
20001800:	f012 0f40 	tst.w	r2, #64	; 0x40
20001804:	d0ed      	beq.n	200017e2 <mss_spi_isr+0x62>
20001806:	e005      	b.n	20001814 <mss_spi_isr+0x94>
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
20001808:	692b      	ldr	r3, [r5, #16]
2000180a:	9301      	str	r3, [sp, #4]
            }
        }
        else
        {
            /* No slave handling in place so just purge FIFO */
            while(0u == (this_spi->hw_reg->STATUS & RX_FIFO_EMPTY_MASK))
2000180c:	68ab      	ldr	r3, [r5, #8]
2000180e:	f013 0f40 	tst.w	r3, #64	; 0x40
20001812:	d0f9      	beq.n	20001808 <mss_spi_isr+0x88>
            {
                rx_frame = this_spi->hw_reg->RX_DATA;
            }
        }

        this_spi->hw_reg->INT_CLEAR = RXDONE_IRQ_MASK;
20001814:	6823      	ldr	r3, [r4, #0]
20001816:	f04f 0202 	mov.w	r2, #2
2000181a:	60da      	str	r2, [r3, #12]
    }

   /* Handle transmit. */
    if(0u != (*this_mis & TXDONE_IRQ_MASK))
2000181c:	6a2b      	ldr	r3, [r5, #32]
2000181e:	f013 0f01 	tst.w	r3, #1
20001822:	d00e      	beq.n	20001842 <mss_spi_isr+0xc2>
    {
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
20001824:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
20001828:	2b02      	cmp	r3, #2
2000182a:	d103      	bne.n	20001834 <mss_spi_isr+0xb4>
        {
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
2000182c:	6823      	ldr	r3, [r4, #0]
2000182e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
20001830:	615a      	str	r2, [r3, #20]
20001832:	e002      	b.n	2000183a <mss_spi_isr+0xba>
        }
        else /* Must be block mode so load FIFO to the max */
        {
            fill_slave_tx_fifo(this_spi);
20001834:	4620      	mov	r0, r4
20001836:	f7ff ff15 	bl	20001664 <fill_slave_tx_fifo>
        }

        this_spi->hw_reg->INT_CLEAR = TXDONE_IRQ_MASK;
2000183a:	6823      	ldr	r3, [r4, #0]
2000183c:	f04f 0201 	mov.w	r2, #1
20001840:	60da      	str	r2, [r3, #12]
    }
    
    /* Handle command interrupt. */
    if(0u != (*this_mis & CMD_IRQ_MASK))
20001842:	6a2b      	ldr	r3, [r5, #32]
20001844:	f013 0f10 	tst.w	r3, #16
20001848:	d016      	beq.n	20001878 <mss_spi_isr+0xf8>
    {
        read_slave_rx_fifo(this_spi);
2000184a:	4620      	mov	r0, r4
2000184c:	f7ff ff5e 	bl	2000170c <read_slave_rx_fifo>
        
        /*
         * Call the command handler if one exists.
         */
        if(0u != this_spi->cmd_handler)
20001850:	6a23      	ldr	r3, [r4, #32]
20001852:	b12b      	cbz	r3, 20001860 <mss_spi_isr+0xe0>
        {
            (*this_spi->cmd_handler)(this_spi->slave_rx_buffer, this_spi->slave_rx_idx);
20001854:	6aa0      	ldr	r0, [r4, #40]	; 0x28
20001856:	6b21      	ldr	r1, [r4, #48]	; 0x30
20001858:	4798      	blx	r3
            fill_slave_tx_fifo(this_spi);
2000185a:	4620      	mov	r0, r4
2000185c:	f7ff ff02 	bl	20001664 <fill_slave_tx_fifo>
        }
        /* Set cmd_done to indicate it is now safe to 0 fill TX FIFO */
        this_spi->cmd_done = 1u;
20001860:	f04f 0301 	mov.w	r3, #1
20001864:	6263      	str	r3, [r4, #36]	; 0x24
        /* Disable command interrupt until slave select becomes de-asserted to avoid retriggering. */
        this_spi->hw_reg->CONTROL2 &= ~(uint32_t)C2_ENABLE_CMD_IRQ_MASK;
20001866:	6823      	ldr	r3, [r4, #0]
20001868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2000186a:	f022 0210 	bic.w	r2, r2, #16
2000186e:	629a      	str	r2, [r3, #40]	; 0x28
        this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20001870:	6823      	ldr	r3, [r4, #0]
20001872:	f04f 0210 	mov.w	r2, #16
20001876:	60da      	str	r2, [r3, #12]
    }

    if(0u != (*this_mis & RXOVFLOW_IRQ_MASK))
20001878:	6a2b      	ldr	r3, [r5, #32]
2000187a:	f013 0f04 	tst.w	r3, #4
2000187e:	d00b      	beq.n	20001898 <mss_spi_isr+0x118>
    {
        /*
         * Receive overflow, not a lot we can do for this. Reset the receive
         *  FIFO, clear the interrupt and hope it doesn't happen again...
         */
        this_spi->hw_reg->COMMAND |= RX_FIFO_RESET_MASK;
20001880:	6823      	ldr	r3, [r4, #0]
20001882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001884:	f042 0204 	orr.w	r2, r2, #4
20001888:	62da      	str	r2, [r3, #44]	; 0x2c
        recover_from_rx_overflow(this_spi);
2000188a:	4620      	mov	r0, r4
2000188c:	f7ff fd02 	bl	20001294 <recover_from_rx_overflow>
        this_spi->hw_reg->INT_CLEAR = RXOVFLOW_IRQ_MASK;
20001890:	6823      	ldr	r3, [r4, #0]
20001892:	f04f 0204 	mov.w	r2, #4
20001896:	60da      	str	r2, [r3, #12]
     * slave TX FIFO data setup (if there is one).
     * In block mode this will probably not be very successful as we will
     * be out of synch with the master but the reset on SSEND will hopefully
     * take care of that for the next transfer.
     */
    if(0u != (*this_mis & TXURUN_IRQ_MASK))
20001898:	6a2b      	ldr	r3, [r5, #32]
2000189a:	f013 0f08 	tst.w	r3, #8
2000189e:	d023      	beq.n	200018e8 <mss_spi_isr+0x168>
    {
        this_spi->hw_reg->COMMAND |= TX_FIFO_RESET_MASK;
200018a0:	6823      	ldr	r3, [r4, #0]
200018a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200018a4:	f042 0208 	orr.w	r2, r2, #8
200018a8:	62da      	str	r2, [r3, #44]	; 0x2c
        if( MSS_SPI_SLAVE_XFER_FRAME == this_spi->slave_xfer_mode )
200018aa:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
200018ae:	2b02      	cmp	r3, #2
200018b0:	d10e      	bne.n	200018d0 <mss_spi_isr+0x150>
        {
            this_spi->hw_reg->CONTROL = (this_spi->hw_reg->CONTROL & ~TXRXDFCOUNT_MASK)
200018b2:	6822      	ldr	r2, [r4, #0]
200018b4:	6811      	ldr	r1, [r2, #0]
200018b6:	f240 03ff 	movw	r3, #255	; 0xff
200018ba:	f6cf 7300 	movt	r3, #65280	; 0xff00
200018be:	ea01 0303 	and.w	r3, r1, r3
200018c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200018c6:	6013      	str	r3, [r2, #0]
                                        | ((uint32_t)1u << TXRXDFCOUNT_SHIFT);
           /* Reload slave tx frame into Tx data register. */
            this_spi->hw_reg->TX_DATA = this_spi->slave_tx_frame;
200018c8:	6823      	ldr	r3, [r4, #0]
200018ca:	6fa2      	ldr	r2, [r4, #120]	; 0x78
200018cc:	615a      	str	r2, [r3, #20]
200018ce:	e007      	b.n	200018e0 <mss_spi_isr+0x160>
        }
        else if( MSS_SPI_SLAVE_XFER_BLOCK == this_spi->slave_xfer_mode )
200018d0:	2b01      	cmp	r3, #1
200018d2:	d105      	bne.n	200018e0 <mss_spi_isr+0x160>
        {
            /* Block mode so reload FIFO to the max */
            this_spi->slave_tx_idx = 0u;
200018d4:	f04f 0300 	mov.w	r3, #0
200018d8:	6123      	str	r3, [r4, #16]
            fill_slave_tx_fifo(this_spi);
200018da:	4620      	mov	r0, r4
200018dc:	f7ff fec2 	bl	20001664 <fill_slave_tx_fifo>
        else
        {
            /* Not frame or block mode? Can't do anything here... */
        }

        this_spi->hw_reg->INT_CLEAR = TXURUN_IRQ_MASK;
200018e0:	6823      	ldr	r3, [r4, #0]
200018e2:	f04f 0208 	mov.w	r2, #8
200018e6:	60da      	str	r2, [r3, #12]
    /*
     * Handle slave select becoming de-asserted. Only enables if
     * we are operating in block mode, in frame mode we do everything
     * in the receive and transmit interrupt handlers.
     */
    if(0u != (*this_mis & SSEND_IRQ_MASK))
200018e8:	6a2b      	ldr	r3, [r5, #32]
200018ea:	f013 0f20 	tst.w	r3, #32
200018ee:	d029      	beq.n	20001944 <mss_spi_isr+0x1c4>
    {
        uint32_t rx_size;
        
        read_slave_rx_fifo(this_spi);
200018f0:	4620      	mov	r0, r4
200018f2:	f7ff ff0b 	bl	2000170c <read_slave_rx_fifo>
        rx_size = this_spi->slave_rx_idx;
200018f6:	6b26      	ldr	r6, [r4, #48]	; 0x30
        /*
         * Re-enable command interrupt if required and clear all the response
         * buffer state in readiness for next response. This must be done
         * before reloading the TX FIFO.
         */
        if(0u != this_spi->cmd_handler)
200018f8:	6a23      	ldr	r3, [r4, #32]
200018fa:	b173      	cbz	r3, 2000191a <mss_spi_isr+0x19a>
        {
            this_spi->cmd_done = 0u;
200018fc:	f04f 0300 	mov.w	r3, #0
20001900:	6263      	str	r3, [r4, #36]	; 0x24
            this_spi->resp_tx_buffer = 0u;
20001902:	6163      	str	r3, [r4, #20]
            this_spi->resp_buff_size = 0u;
20001904:	61a3      	str	r3, [r4, #24]
            this_spi->resp_buff_tx_idx = 0u;
20001906:	61e3      	str	r3, [r4, #28]
            this_spi->hw_reg->INT_CLEAR = CMD_IRQ_MASK;
20001908:	6823      	ldr	r3, [r4, #0]
2000190a:	f04f 0210 	mov.w	r2, #16
2000190e:	60da      	str	r2, [r3, #12]
            this_spi->hw_reg->CONTROL2 |= C2_ENABLE_CMD_IRQ_MASK;
20001910:	6823      	ldr	r3, [r4, #0]
20001912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001914:	f042 0210 	orr.w	r2, r2, #16
20001918:	629a      	str	r2, [r3, #40]	; 0x28
        /* 
         * Reset the transmit index to 0 to restart transmit at the start of the
         * transmit buffer in the next transaction. This also requires flushing
         * the Tx FIFO and refilling it with the start of Tx data buffer.
         */
        this_spi->slave_tx_idx = 0u;
2000191a:	f04f 0500 	mov.w	r5, #0
2000191e:	6125      	str	r5, [r4, #16]
        this_spi->hw_reg->COMMAND |= (TX_FIFO_RESET_MASK | RX_FIFO_RESET_MASK);
20001920:	6823      	ldr	r3, [r4, #0]
20001922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001924:	f042 020c 	orr.w	r2, r2, #12
20001928:	62da      	str	r2, [r3, #44]	; 0x2c
        fill_slave_tx_fifo(this_spi);
2000192a:	4620      	mov	r0, r4
2000192c:	f7ff fe9a 	bl	20001664 <fill_slave_tx_fifo>
        
        /* Prepare to receive next packet. */
        this_spi->slave_rx_idx = 0u;
20001930:	6325      	str	r5, [r4, #48]	; 0x30
        /*
         * Call the receive handler if one exists.
         */
        if(0u != this_spi->block_rx_handler)
20001932:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
20001934:	b113      	cbz	r3, 2000193c <mss_spi_isr+0x1bc>
        {
            (*this_spi->block_rx_handler)(this_spi->slave_rx_buffer, rx_size);
20001936:	6aa0      	ldr	r0, [r4, #40]	; 0x28
20001938:	4631      	mov	r1, r6
2000193a:	4798      	blx	r3
        }
        
        this_spi->hw_reg->INT_CLEAR = SSEND_IRQ_MASK;
2000193c:	6823      	ldr	r3, [r4, #0]
2000193e:	f04f 0220 	mov.w	r2, #32
20001942:	60da      	str	r2, [r3, #12]
    }
}
20001944:	b002      	add	sp, #8
20001946:	bd70      	pop	{r4, r5, r6, pc}

20001948 <SPI0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI0_IRQHandler(void)
#else
void SPI0_IRQHandler( void )
#endif
{
20001948:	4668      	mov	r0, sp
2000194a:	f020 0107 	bic.w	r1, r0, #7
2000194e:	468d      	mov	sp, r1
20001950:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi0);
20001952:	f642 00a0 	movw	r0, #10400	; 0x28a0
20001956:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000195a:	f7ff ff11 	bl	20001780 <mss_spi_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000195e:	f24e 1300 	movw	r3, #57600	; 0xe100
20001962:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001966:	f44f 5280 	mov.w	r2, #4096	; 0x1000
2000196a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI0_IRQn);
}
2000196e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20001972:	4685      	mov	sp, r0
20001974:	4770      	bx	lr
20001976:	bf00      	nop

20001978 <SPI1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void SPI1_IRQHandler(void)
#else
void SPI1_IRQHandler(void)
#endif
{
20001978:	4668      	mov	r0, sp
2000197a:	f020 0107 	bic.w	r1, r0, #7
2000197e:	468d      	mov	sp, r1
20001980:	b501      	push	{r0, lr}
    mss_spi_isr(&g_mss_spi1);
20001982:	f642 001c 	movw	r0, #10268	; 0x281c
20001986:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000198a:	f7ff fef9 	bl	20001780 <mss_spi_isr>
2000198e:	f24e 1300 	movw	r3, #57600	; 0xe100
20001992:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2000199a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ(SPI1_IRQn);
}
2000199e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
200019a2:	4685      	mov	sp, r0
200019a4:	4770      	bx	lr
200019a6:	bf00      	nop

200019a8 <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
200019a8:	4603      	mov	r3, r0
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200019aa:	f642 1224 	movw	r2, #10532	; 0x2924
200019ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
200019b2:	4290      	cmp	r0, r2
200019b4:	d006      	beq.n	200019c4 <MSS_I2C_wait_complete+0x1c>
200019b6:	f642 1298 	movw	r2, #10648	; 0x2998
200019ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
200019be:	4290      	cmp	r0, r2
200019c0:	d000      	beq.n	200019c4 <MSS_I2C_wait_complete+0x1c>
200019c2:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
200019c4:	6419      	str	r1, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
200019c6:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
200019ca:	2801      	cmp	r0, #1
200019cc:	d0fb      	beq.n	200019c6 <MSS_I2C_wait_complete+0x1e>

    return i2c_status;
}
200019ce:	4770      	bx	lr

200019d0 <enable_slave_if_required>:
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
    if( this_i2c->is_slave_enabled )
200019d0:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
200019d4:	b11b      	cbz	r3, 200019de <enable_slave_if_required+0xe>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
200019d6:	6983      	ldr	r3, [r0, #24]
200019d8:	f04f 0201 	mov.w	r2, #1
200019dc:	609a      	str	r2, [r3, #8]
200019de:	4770      	bx	lr

200019e0 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
200019e0:	b530      	push	{r4, r5, lr}
200019e2:	b083      	sub	sp, #12
200019e4:	4604      	mov	r4, r0
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200019e6:	f642 1324 	movw	r3, #10532	; 0x2924
200019ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
200019ee:	4298      	cmp	r0, r3
200019f0:	d006      	beq.n	20001a00 <mss_i2c_isr+0x20>
200019f2:	f642 1398 	movw	r3, #10648	; 0x2998
200019f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200019fa:	4298      	cmp	r0, r3
200019fc:	d000      	beq.n	20001a00 <mss_i2c_isr+0x20>
200019fe:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
20001a00:	6962      	ldr	r2, [r4, #20]
20001a02:	7913      	ldrb	r3, [r2, #4]
20001a04:	f88d 3007 	strb.w	r3, [sp, #7]

    switch( status )
20001a08:	f89d 3007 	ldrb.w	r3, [sp, #7]
20001a0c:	f1a3 0308 	sub.w	r3, r3, #8
20001a10:	2bd0      	cmp	r3, #208	; 0xd0
20001a12:	f200 828e 	bhi.w	20001f32 <mss_i2c_isr+0x552>
20001a16:	e8df f013 	tbh	[pc, r3, lsl #1]
20001a1a:	00d1      	.short	0x00d1
20001a1c:	028c028c 	.word	0x028c028c
20001a20:	028c028c 	.word	0x028c028c
20001a24:	028c028c 	.word	0x028c028c
20001a28:	00d1028c 	.word	0x00d1028c
20001a2c:	028c028c 	.word	0x028c028c
20001a30:	028c028c 	.word	0x028c028c
20001a34:	028c028c 	.word	0x028c028c
20001a38:	0106028c 	.word	0x0106028c
20001a3c:	028c028c 	.word	0x028c028c
20001a40:	028c028c 	.word	0x028c028c
20001a44:	028c028c 	.word	0x028c028c
20001a48:	00f7028c 	.word	0x00f7028c
20001a4c:	028c028c 	.word	0x028c028c
20001a50:	028c028c 	.word	0x028c028c
20001a54:	028c028c 	.word	0x028c028c
20001a58:	0106028c 	.word	0x0106028c
20001a5c:	028c028c 	.word	0x028c028c
20001a60:	028c028c 	.word	0x028c028c
20001a64:	028c028c 	.word	0x028c028c
20001a68:	0144028c 	.word	0x0144028c
20001a6c:	028c028c 	.word	0x028c028c
20001a70:	028c028c 	.word	0x028c028c
20001a74:	028c028c 	.word	0x028c028c
20001a78:	00f2028c 	.word	0x00f2028c
20001a7c:	028c028c 	.word	0x028c028c
20001a80:	028c028c 	.word	0x028c028c
20001a84:	028c028c 	.word	0x028c028c
20001a88:	0153028c 	.word	0x0153028c
20001a8c:	028c028c 	.word	0x028c028c
20001a90:	028c028c 	.word	0x028c028c
20001a94:	028c028c 	.word	0x028c028c
20001a98:	016e028c 	.word	0x016e028c
20001a9c:	028c028c 	.word	0x028c028c
20001aa0:	028c028c 	.word	0x028c028c
20001aa4:	028c028c 	.word	0x028c028c
20001aa8:	017d028c 	.word	0x017d028c
20001aac:	028c028c 	.word	0x028c028c
20001ab0:	028c028c 	.word	0x028c028c
20001ab4:	028c028c 	.word	0x028c028c
20001ab8:	018f028c 	.word	0x018f028c
20001abc:	028c028c 	.word	0x028c028c
20001ac0:	028c028c 	.word	0x028c028c
20001ac4:	028c028c 	.word	0x028c028c
20001ac8:	01d0028c 	.word	0x01d0028c
20001acc:	028c028c 	.word	0x028c028c
20001ad0:	028c028c 	.word	0x028c028c
20001ad4:	028c028c 	.word	0x028c028c
20001ad8:	01cc028c 	.word	0x01cc028c
20001adc:	028c028c 	.word	0x028c028c
20001ae0:	028c028c 	.word	0x028c028c
20001ae4:	028c028c 	.word	0x028c028c
20001ae8:	01d0028c 	.word	0x01d0028c
20001aec:	028c028c 	.word	0x028c028c
20001af0:	028c028c 	.word	0x028c028c
20001af4:	028c028c 	.word	0x028c028c
20001af8:	01cc028c 	.word	0x01cc028c
20001afc:	028c028c 	.word	0x028c028c
20001b00:	028c028c 	.word	0x028c028c
20001b04:	028c028c 	.word	0x028c028c
20001b08:	01e6028c 	.word	0x01e6028c
20001b0c:	028c028c 	.word	0x028c028c
20001b10:	028c028c 	.word	0x028c028c
20001b14:	028c028c 	.word	0x028c028c
20001b18:	01bb028c 	.word	0x01bb028c
20001b1c:	028c028c 	.word	0x028c028c
20001b20:	028c028c 	.word	0x028c028c
20001b24:	028c028c 	.word	0x028c028c
20001b28:	01e6028c 	.word	0x01e6028c
20001b2c:	028c028c 	.word	0x028c028c
20001b30:	028c028c 	.word	0x028c028c
20001b34:	028c028c 	.word	0x028c028c
20001b38:	01bb028c 	.word	0x01bb028c
20001b3c:	028c028c 	.word	0x028c028c
20001b40:	028c028c 	.word	0x028c028c
20001b44:	028c028c 	.word	0x028c028c
20001b48:	01ff028c 	.word	0x01ff028c
20001b4c:	028c028c 	.word	0x028c028c
20001b50:	028c028c 	.word	0x028c028c
20001b54:	028c028c 	.word	0x028c028c
20001b58:	0248028c 	.word	0x0248028c
20001b5c:	028c028c 	.word	0x028c028c
20001b60:	028c028c 	.word	0x028c028c
20001b64:	028c028c 	.word	0x028c028c
20001b68:	0248028c 	.word	0x0248028c
20001b6c:	028c028c 	.word	0x028c028c
20001b70:	028c028c 	.word	0x028c028c
20001b74:	028c028c 	.word	0x028c028c
20001b78:	0248028c 	.word	0x0248028c
20001b7c:	028c028c 	.word	0x028c028c
20001b80:	028c028c 	.word	0x028c028c
20001b84:	028c028c 	.word	0x028c028c
20001b88:	027a028c 	.word	0x027a028c
20001b8c:	028c028c 	.word	0x028c028c
20001b90:	028c028c 	.word	0x028c028c
20001b94:	028c028c 	.word	0x028c028c
20001b98:	027a028c 	.word	0x027a028c
20001b9c:	028c028c 	.word	0x028c028c
20001ba0:	028c028c 	.word	0x028c028c
20001ba4:	028c028c 	.word	0x028c028c
20001ba8:	028c028c 	.word	0x028c028c
20001bac:	028c028c 	.word	0x028c028c
20001bb0:	028c028c 	.word	0x028c028c
20001bb4:	028c028c 	.word	0x028c028c
20001bb8:	0239028c 	.word	0x0239028c
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
20001bbc:	69a3      	ldr	r3, [r4, #24]
20001bbe:	f04f 0200 	mov.w	r2, #0
20001bc2:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
20001bc4:	6963      	ldr	r3, [r4, #20]
20001bc6:	7922      	ldrb	r2, [r4, #4]
20001bc8:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
20001bca:	69a3      	ldr	r3, [r4, #24]
20001bcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
20001bce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
20001bd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
20001bd4:	b90b      	cbnz	r3, 20001bda <mss_i2c_isr+0x1fa>
            {
                this_i2c->master_tx_idx = 0u;
20001bd6:	62a3      	str	r3, [r4, #40]	; 0x28
20001bd8:	e003      	b.n	20001be2 <mss_i2c_isr+0x202>
            }
            else if ( this_i2c->dir == READ_DIR)
20001bda:	2b01      	cmp	r3, #1
            {
                this_i2c->master_rx_idx = 0u;
20001bdc:	bf04      	itt	eq
20001bde:	2300      	moveq	r3, #0
20001be0:	63a3      	streq	r3, [r4, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
20001be2:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
20001be6:	b11b      	cbz	r3, 20001bf0 <mss_i2c_isr+0x210>
            {
                this_i2c->is_transaction_pending = 0u;
20001be8:	f04f 0300 	mov.w	r3, #0
20001bec:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
20001bf0:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
20001bf4:	7a22      	ldrb	r2, [r4, #8]
20001bf6:	429a      	cmp	r2, r3
            {
                this_i2c->transaction = this_i2c->pending_transaction;
20001bf8:	bf18      	it	ne
20001bfa:	7223      	strbne	r3, [r4, #8]
20001bfc:	e1af      	b.n	20001f5e <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001bfe:	69a3      	ldr	r3, [r4, #24]
20001c00:	f04f 0201 	mov.w	r2, #1
20001c04:	615a      	str	r2, [r3, #20]
            break;
20001c06:	e1aa      	b.n	20001f5e <mss_i2c_isr+0x57e>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001c08:	69a3      	ldr	r3, [r4, #24]
20001c0a:	f04f 0201 	mov.w	r2, #1
20001c0e:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001c10:	f04f 0302 	mov.w	r3, #2
20001c14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
20001c18:	f04f 0300 	mov.w	r3, #0
20001c1c:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
20001c1e:	4620      	mov	r0, r4
20001c20:	f7ff fed6 	bl	200019d0 <enable_slave_if_required>
            break;
20001c24:	e19b      	b.n	20001f5e <mss_i2c_isr+0x57e>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20001c26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
20001c28:	6a61      	ldr	r1, [r4, #36]	; 0x24
20001c2a:	428b      	cmp	r3, r1
20001c2c:	d206      	bcs.n	20001c3c <mss_i2c_isr+0x25c>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
20001c2e:	6a21      	ldr	r1, [r4, #32]
20001c30:	5cc9      	ldrb	r1, [r1, r3]
20001c32:	7211      	strb	r1, [r2, #8]
20001c34:	f103 0301 	add.w	r3, r3, #1
20001c38:	62a3      	str	r3, [r4, #40]	; 0x28
20001c3a:	e190      	b.n	20001f5e <mss_i2c_isr+0x57e>
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20001c3c:	7a23      	ldrb	r3, [r4, #8]
20001c3e:	2b03      	cmp	r3, #3
20001c40:	d105      	bne.n	20001c4e <mss_i2c_isr+0x26e>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
20001c42:	f04f 0301 	mov.w	r3, #1
20001c46:	62e3      	str	r3, [r4, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001c48:	69a2      	ldr	r2, [r4, #24]
20001c4a:	6153      	str	r3, [r2, #20]
20001c4c:	e187      	b.n	20001f5e <mss_i2c_isr+0x57e>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
20001c4e:	f04f 0300 	mov.w	r3, #0
20001c52:	7223      	strb	r3, [r4, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
20001c54:	7c23      	ldrb	r3, [r4, #16]
20001c56:	f003 0301 	and.w	r3, r3, #1

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
20001c5a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                if ( hold_bus == 0u )
20001c5e:	b93b      	cbnz	r3, 20001c70 <mss_i2c_isr+0x290>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
20001c60:	69a3      	ldr	r3, [r4, #24]
20001c62:	f04f 0501 	mov.w	r5, #1
20001c66:	611d      	str	r5, [r3, #16]
                    enable_slave_if_required(this_i2c);
20001c68:	4620      	mov	r0, r4
20001c6a:	f7ff feb1 	bl	200019d0 <enable_slave_if_required>
20001c6e:	e013      	b.n	20001c98 <mss_i2c_isr+0x2b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
20001c70:	8a63      	ldrh	r3, [r4, #18]
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20001c72:	b21a      	sxth	r2, r3
20001c74:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001c78:	f003 031f 	and.w	r3, r3, #31
20001c7c:	f04f 0101 	mov.w	r1, #1
20001c80:	fa01 f103 	lsl.w	r1, r1, r3
20001c84:	f24e 1300 	movw	r3, #57600	; 0xe100
20001c88:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001c8c:	f102 0220 	add.w	r2, r2, #32
20001c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
20001c94:	f04f 0500 	mov.w	r5, #0
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001c98:	f04f 0300 	mov.w	r3, #0
20001c9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
20001ca0:	e15c      	b.n	20001f5c <mss_i2c_isr+0x57c>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001ca2:	69a3      	ldr	r3, [r4, #24]
20001ca4:	f04f 0201 	mov.w	r2, #1
20001ca8:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001caa:	f04f 0302 	mov.w	r3, #2
20001cae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001cb2:	f04f 0300 	mov.w	r3, #0
20001cb6:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
20001cb8:	4620      	mov	r0, r4
20001cba:	f7ff fe89 	bl	200019d0 <enable_slave_if_required>

            break;
20001cbe:	e14e      	b.n	20001f5e <mss_i2c_isr+0x57e>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20001cc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
20001cc2:	2b01      	cmp	r3, #1
20001cc4:	d904      	bls.n	20001cd0 <mss_i2c_isr+0x2f0>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001cc6:	69a3      	ldr	r3, [r4, #24]
20001cc8:	f04f 0201 	mov.w	r2, #1
20001ccc:	609a      	str	r2, [r3, #8]
20001cce:	e146      	b.n	20001f5e <mss_i2c_isr+0x57e>
            }
            else if(1u == this_i2c->master_rx_size)
20001cd0:	2b01      	cmp	r3, #1
20001cd2:	d104      	bne.n	20001cde <mss_i2c_isr+0x2fe>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001cd4:	69a3      	ldr	r3, [r4, #24]
20001cd6:	f04f 0200 	mov.w	r2, #0
20001cda:	609a      	str	r2, [r3, #8]
20001cdc:	e13f      	b.n	20001f5e <mss_i2c_isr+0x57e>
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001cde:	69a2      	ldr	r2, [r4, #24]
20001ce0:	f04f 0301 	mov.w	r3, #1
20001ce4:	6093      	str	r3, [r2, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001ce6:	69a2      	ldr	r2, [r4, #24]
20001ce8:	6113      	str	r3, [r2, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001cea:	f04f 0300 	mov.w	r3, #0
20001cee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
20001cf2:	7223      	strb	r3, [r4, #8]
20001cf4:	e133      	b.n	20001f5e <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001cf6:	69a3      	ldr	r3, [r4, #24]
20001cf8:	f04f 0201 	mov.w	r2, #1
20001cfc:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001cfe:	f04f 0302 	mov.w	r3, #2
20001d02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001d06:	f04f 0300 	mov.w	r3, #0
20001d0a:	7223      	strb	r3, [r4, #8]
            enable_slave_if_required(this_i2c);
20001d0c:	4620      	mov	r0, r4
20001d0e:	f7ff fe5f 	bl	200019d0 <enable_slave_if_required>
            break;
20001d12:	e124      	b.n	20001f5e <mss_i2c_isr+0x57e>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
20001d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
20001d16:	7a11      	ldrb	r1, [r2, #8]
20001d18:	6b22      	ldr	r2, [r4, #48]	; 0x30
20001d1a:	54d1      	strb	r1, [r2, r3]
20001d1c:	f103 0301 	add.w	r3, r3, #1
20001d20:	63a3      	str	r3, [r4, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
20001d22:	6b62      	ldr	r2, [r4, #52]	; 0x34
20001d24:	f102 32ff 	add.w	r2, r2, #4294967295
20001d28:	4293      	cmp	r3, r2
20001d2a:	f0c0 8118 	bcc.w	20001f5e <mss_i2c_isr+0x57e>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001d2e:	69a3      	ldr	r3, [r4, #24]
20001d30:	f04f 0200 	mov.w	r2, #0
20001d34:	609a      	str	r2, [r3, #8]
20001d36:	e112      	b.n	20001f5e <mss_i2c_isr+0x57e>
            }
            break;
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
20001d38:	7a11      	ldrb	r1, [r2, #8]
20001d3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
20001d3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
20001d3e:	54d1      	strb	r1, [r2, r3]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
20001d40:	7c23      	ldrb	r3, [r4, #16]
20001d42:	f003 0301 	and.w	r3, r3, #1

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20001d46:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
            if ( hold_bus == 0u )
20001d4a:	b93b      	cbnz	r3, 20001d5c <mss_i2c_isr+0x37c>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
20001d4c:	69a3      	ldr	r3, [r4, #24]
20001d4e:	f04f 0501 	mov.w	r5, #1
20001d52:	611d      	str	r5, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20001d54:	4620      	mov	r0, r4
20001d56:	f7ff fe3b 	bl	200019d0 <enable_slave_if_required>
20001d5a:	e013      	b.n	20001d84 <mss_i2c_isr+0x3a4>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20001d5c:	8a63      	ldrh	r3, [r4, #18]
20001d5e:	b21a      	sxth	r2, r3
20001d60:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001d64:	f003 031f 	and.w	r3, r3, #31
20001d68:	f04f 0101 	mov.w	r1, #1
20001d6c:	fa01 f103 	lsl.w	r1, r1, r3
20001d70:	f24e 1300 	movw	r3, #57600	; 0xe100
20001d74:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001d78:	f102 0220 	add.w	r2, r2, #32
20001d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
20001d80:	f04f 0500 	mov.w	r5, #0

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001d84:	f04f 0300 	mov.w	r3, #0
20001d88:	7223      	strb	r3, [r4, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
20001d8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
            break;
20001d8e:	e0e5      	b.n	20001f5c <mss_i2c_isr+0x57c>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001d90:	69a3      	ldr	r3, [r4, #24]
20001d92:	f04f 0201 	mov.w	r2, #1
20001d96:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
20001d98:	f04f 0300 	mov.w	r3, #0
20001d9c:	7223      	strb	r3, [r4, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001d9e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001da2:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
20001da6:	2b00      	cmp	r3, #0
20001da8:	f000 80d9 	beq.w	20001f5e <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001dac:	69a3      	ldr	r3, [r4, #24]
20001dae:	615a      	str	r2, [r3, #20]
20001db0:	e0d5      	b.n	20001f5e <mss_i2c_isr+0x57e>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20001db2:	f04f 0301 	mov.w	r3, #1
20001db6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20001dba:	f04f 0304 	mov.w	r3, #4
20001dbe:	7223      	strb	r3, [r4, #8]
            this_i2c->slave_rx_idx = 0u;
20001dc0:	f04f 0300 	mov.w	r3, #0
20001dc4:	65a3      	str	r3, [r4, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
20001dc6:	60e3      	str	r3, [r4, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
20001dc8:	69a3      	ldr	r3, [r4, #24]
20001dca:	695a      	ldr	r2, [r3, #20]
20001dcc:	b132      	cbz	r2, 20001ddc <mss_i2c_isr+0x3fc>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001dce:	f04f 0200 	mov.w	r2, #0
20001dd2:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
20001dd4:	f04f 0301 	mov.w	r3, #1
20001dd8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001ddc:	f04f 0301 	mov.w	r3, #1
20001de0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20001de4:	e0bb      	b.n	20001f5e <mss_i2c_isr+0x57e>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20001de6:	6d21      	ldr	r1, [r4, #80]	; 0x50
20001de8:	b161      	cbz	r1, 20001e04 <mss_i2c_isr+0x424>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20001dea:	6da3      	ldr	r3, [r4, #88]	; 0x58
20001dec:	6d60      	ldr	r0, [r4, #84]	; 0x54
20001dee:	4283      	cmp	r3, r0
20001df0:	d20d      	bcs.n	20001e0e <mss_i2c_isr+0x42e>
            {
                data = this_i2c->hw_reg->DATA;
20001df2:	7a12      	ldrb	r2, [r2, #8]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20001df4:	54ca      	strb	r2, [r1, r3]
20001df6:	f103 0301 	add.w	r3, r3, #1
20001dfa:	65a3      	str	r3, [r4, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20001dfc:	68e3      	ldr	r3, [r4, #12]
20001dfe:	eb02 2203 	add.w	r2, r2, r3, lsl #8
20001e02:	60e2      	str	r2, [r4, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20001e04:	6da2      	ldr	r2, [r4, #88]	; 0x58
20001e06:	6d63      	ldr	r3, [r4, #84]	; 0x54
20001e08:	429a      	cmp	r2, r3
20001e0a:	f0c0 80a8 	bcc.w	20001f5e <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
20001e0e:	69a3      	ldr	r3, [r4, #24]
20001e10:	f04f 0200 	mov.w	r2, #0
20001e14:	609a      	str	r2, [r3, #8]
20001e16:	e0a2      	b.n	20001f5e <mss_i2c_isr+0x57e>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20001e18:	7a23      	ldrb	r3, [r4, #8]
20001e1a:	2b04      	cmp	r3, #4
20001e1c:	d121      	bne.n	20001e62 <mss_i2c_isr+0x482>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20001e1e:	6da2      	ldr	r2, [r4, #88]	; 0x58
20001e20:	6e23      	ldr	r3, [r4, #96]	; 0x60
20001e22:	429a      	cmp	r2, r3
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20001e24:	bf04      	itt	eq
20001e26:	68e3      	ldreq	r3, [r4, #12]
20001e28:	64e3      	streq	r3, [r4, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
20001e2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
20001e2c:	b1a3      	cbz	r3, 20001e58 <mss_i2c_isr+0x478>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20001e2e:	4620      	mov	r0, r4
20001e30:	6d21      	ldr	r1, [r4, #80]	; 0x50
20001e32:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
20001e36:	4798      	blx	r3
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20001e38:	b938      	cbnz	r0, 20001e4a <mss_i2c_isr+0x46a>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
20001e3a:	4620      	mov	r0, r4
20001e3c:	f7ff fdc8 	bl	200019d0 <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001e40:	69a3      	ldr	r3, [r4, #24]
20001e42:	f04f 0201 	mov.w	r2, #1
20001e46:	609a      	str	r2, [r3, #8]
20001e48:	e011      	b.n	20001e6e <mss_i2c_isr+0x48e>
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001e4a:	69a2      	ldr	r2, [r4, #24]
20001e4c:	f04f 0300 	mov.w	r3, #0
20001e50:	6093      	str	r3, [r2, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
20001e52:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
20001e56:	e00a      	b.n	20001e6e <mss_i2c_isr+0x48e>
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001e58:	69a3      	ldr	r3, [r4, #24]
20001e5a:	f04f 0201 	mov.w	r2, #1
20001e5e:	609a      	str	r2, [r3, #8]
20001e60:	e005      	b.n	20001e6e <mss_i2c_isr+0x48e>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20001e62:	f04f 0300 	mov.w	r3, #0
20001e66:	64e3      	str	r3, [r4, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20001e68:	4620      	mov	r0, r4
20001e6a:	f7ff fdb1 	bl	200019d0 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001e6e:	f04f 0300 	mov.w	r3, #0
20001e72:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001e76:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
20001e7a:	b11b      	cbz	r3, 20001e84 <mss_i2c_isr+0x4a4>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001e7c:	69a3      	ldr	r3, [r4, #24]
20001e7e:	f04f 0201 	mov.w	r2, #1
20001e82:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001e84:	f04f 0300 	mov.w	r3, #0
20001e88:	7223      	strb	r3, [r4, #8]
            break;
20001e8a:	e068      	b.n	20001f5e <mss_i2c_isr+0x57e>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20001e8c:	f04f 0300 	mov.w	r3, #0
20001e90:	7223      	strb	r3, [r4, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001e92:	64e3      	str	r3, [r4, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001e94:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
20001e98:	2b01      	cmp	r3, #1
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001e9a:	bf04      	itt	eq
20001e9c:	2302      	moveq	r3, #2
20001e9e:	f884 305c 	strbeq.w	r3, [r4, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20001ea2:	4620      	mov	r0, r4
20001ea4:	f7ff fd94 	bl	200019d0 <enable_slave_if_required>

            break;
20001ea8:	e059      	b.n	20001f5e <mss_i2c_isr+0x57e>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20001eaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
20001eae:	2ba8      	cmp	r3, #168	; 0xa8
20001eb0:	d113      	bne.n	20001eda <mss_i2c_isr+0x4fa>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20001eb2:	f04f 0305 	mov.w	r3, #5
20001eb6:	7223      	strb	r3, [r4, #8]
                this_i2c->random_read_addr = 0u;
20001eb8:	f04f 0300 	mov.w	r3, #0
20001ebc:	60e3      	str	r3, [r4, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001ebe:	f04f 0301 	mov.w	r3, #1
20001ec2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
20001ec6:	69a3      	ldr	r3, [r4, #24]
20001ec8:	695a      	ldr	r2, [r3, #20]
20001eca:	b132      	cbz	r2, 20001eda <mss_i2c_isr+0x4fa>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001ecc:	f04f 0200 	mov.w	r2, #0
20001ed0:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
20001ed2:	f04f 0301 	mov.w	r3, #1
20001ed6:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20001eda:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
20001edc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
20001ede:	4293      	cmp	r3, r2
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
20001ee0:	bf23      	ittte	cs
20001ee2:	6963      	ldrcs	r3, [r4, #20]
20001ee4:	f04f 32ff 	movcs.w	r2, #4294967295
20001ee8:	721a      	strbcs	r2, [r3, #8]
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
20001eea:	6962      	ldrcc	r2, [r4, #20]
20001eec:	bf3f      	itttt	cc
20001eee:	6c61      	ldrcc	r1, [r4, #68]	; 0x44
20001ef0:	5cc9      	ldrbcc	r1, [r1, r3]
20001ef2:	7211      	strbcc	r1, [r2, #8]
20001ef4:	3301      	addcc	r3, #1
20001ef6:	bf38      	it	cc
20001ef8:	64e3      	strcc	r3, [r4, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20001efa:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
20001efc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
20001efe:	429a      	cmp	r2, r3
20001f00:	d32d      	bcc.n	20001f5e <mss_i2c_isr+0x57e>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001f02:	69a2      	ldr	r2, [r4, #24]
20001f04:	f04f 0300 	mov.w	r3, #0
20001f08:	6093      	str	r3, [r2, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20001f0a:	64e3      	str	r3, [r4, #76]	; 0x4c
20001f0c:	e027      	b.n	20001f5e <mss_i2c_isr+0x57e>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20001f0e:	f04f 0300 	mov.w	r3, #0
20001f12:	64e3      	str	r3, [r4, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001f14:	69a2      	ldr	r2, [r4, #24]
20001f16:	f04f 0101 	mov.w	r1, #1
20001f1a:	6091      	str	r1, [r2, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001f1c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001f20:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
20001f24:	b10b      	cbz	r3, 20001f2a <mss_i2c_isr+0x54a>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001f26:	69a3      	ldr	r3, [r4, #24]
20001f28:	6159      	str	r1, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001f2a:	f04f 0300 	mov.w	r3, #0
20001f2e:	7223      	strb	r3, [r4, #8]
            break;
20001f30:	e015      	b.n	20001f5e <mss_i2c_isr+0x57e>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
20001f32:	69a2      	ldr	r2, [r4, #24]
20001f34:	f04f 0300 	mov.w	r3, #0
20001f38:	6153      	str	r3, [r2, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001f3a:	7223      	strb	r3, [r4, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001f3c:	64e3      	str	r3, [r4, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
20001f3e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
20001f42:	2b01      	cmp	r3, #1
            {
                this_i2c->master_status = MSS_I2C_FAILED;
20001f44:	bf04      	itt	eq
20001f46:	2302      	moveq	r3, #2
20001f48:	f884 303c 	strbeq.w	r3, [r4, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001f4c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
20001f50:	2b01      	cmp	r3, #1
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001f52:	bf04      	itt	eq
20001f54:	2302      	moveq	r3, #2
20001f56:	f884 305c 	strbeq.w	r3, [r4, #92]	; 0x5c
20001f5a:	e000      	b.n	20001f5e <mss_i2c_isr+0x57e>


            break;
    }
    
    if ( clear_irq )
20001f5c:	b11d      	cbz	r5, 20001f66 <mss_i2c_isr+0x586>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001f5e:	69a3      	ldr	r3, [r4, #24]
20001f60:	f04f 0200 	mov.w	r2, #0
20001f64:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
20001f66:	6963      	ldr	r3, [r4, #20]
20001f68:	791b      	ldrb	r3, [r3, #4]
20001f6a:	f88d 3007 	strb.w	r3, [sp, #7]
}
20001f6e:	b003      	add	sp, #12
20001f70:	bd30      	pop	{r4, r5, pc}
20001f72:	bf00      	nop

20001f74 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
20001f74:	4668      	mov	r0, sp
20001f76:	f020 0107 	bic.w	r1, r0, #7
20001f7a:	468d      	mov	sp, r1
20001f7c:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c0 );
20001f7e:	f642 1024 	movw	r0, #10532	; 0x2924
20001f82:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001f86:	f7ff fd2b 	bl	200019e0 <mss_i2c_isr>
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001f8a:	f24e 1300 	movw	r3, #57600	; 0xe100
20001f8e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
20001f96:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( I2C0_IRQn );
}
20001f9a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20001f9e:	4685      	mov	sp, r0
20001fa0:	4770      	bx	lr
20001fa2:	bf00      	nop

20001fa4 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
20001fa4:	4668      	mov	r0, sp
20001fa6:	f020 0107 	bic.w	r1, r0, #7
20001faa:	468d      	mov	sp, r1
20001fac:	b501      	push	{r0, lr}
    mss_i2c_isr( &g_mss_i2c1 );
20001fae:	f642 1098 	movw	r0, #10648	; 0x2998
20001fb2:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001fb6:	f7ff fd13 	bl	200019e0 <mss_i2c_isr>
20001fba:	f24e 1300 	movw	r3, #57600	; 0xe100
20001fbe:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001fc2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
20001fc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC_ClearPendingIRQ( I2C1_IRQn );
}
20001fca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
20001fce:	4685      	mov	sp, r0
20001fd0:	4770      	bx	lr
20001fd2:	bf00      	nop

20001fd4 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
20001fd4:	b510      	push	{r4, lr}
    uint32_t primask;
    primask = __get_PRIMASK();
20001fd6:	f000 fa09 	bl	200023ec <__get_PRIMASK>
20001fda:	4604      	mov	r4, r0
    __set_PRIMASK(1u);
20001fdc:	f04f 0001 	mov.w	r0, #1
20001fe0:	f000 fa08 	bl	200023f4 <__set_PRIMASK>
    return primask;
}
20001fe4:	4620      	mov	r0, r4
20001fe6:	bd10      	pop	{r4, pc}

20001fe8 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
20001fe8:	b508      	push	{r3, lr}
    __set_PRIMASK( primask );
20001fea:	f000 fa03 	bl	200023f4 <__set_PRIMASK>
}
20001fee:	bd08      	pop	{r3, pc}

20001ff0 <MSS_I2C_read>:
    uint8_t serial_addr,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20001ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20001ff4:	b082      	sub	sp, #8
20001ff6:	4604      	mov	r4, r0
20001ff8:	460d      	mov	r5, r1
20001ffa:	4616      	mov	r6, r2
20001ffc:	461f      	mov	r7, r3
20001ffe:	f89d 8020 	ldrb.w	r8, [sp, #32]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20002002:	f642 1324 	movw	r3, #10532	; 0x2924
20002006:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000200a:	4298      	cmp	r0, r3
2000200c:	d006      	beq.n	2000201c <MSS_I2C_read+0x2c>
2000200e:	f642 1398 	movw	r3, #10648	; 0x2998
20002012:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002016:	4298      	cmp	r0, r3
20002018:	d000      	beq.n	2000201c <MSS_I2C_read+0x2c>
2000201a:	be00      	bkpt	0x0000

    primask = disable_interrupts();
2000201c:	f7ff ffda 	bl	20001fd4 <disable_interrupts>
    
    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20002020:	7a23      	ldrb	r3, [r4, #8]
20002022:	b913      	cbnz	r3, 2000202a <MSS_I2C_read+0x3a>
    {
      this_i2c->transaction = MASTER_READ_TRANSACTION;
20002024:	f04f 0302 	mov.w	r3, #2
20002028:	7223      	strb	r3, [r4, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_READ_TRANSACTION ;
2000202a:	f04f 0302 	mov.w	r3, #2
2000202e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20002032:	ea4f 0545 	mov.w	r5, r5, lsl #1
20002036:	6065      	str	r5, [r4, #4]

    this_i2c->dir = READ_DIR;
20002038:	f04f 0301 	mov.w	r3, #1
2000203c:	62e3      	str	r3, [r4, #44]	; 0x2c

    this_i2c->master_rx_buffer = read_buffer;
2000203e:	6326      	str	r6, [r4, #48]	; 0x30
    this_i2c->master_rx_size = read_size;
20002040:	6367      	str	r7, [r4, #52]	; 0x34
    this_i2c->master_rx_idx = 0u;
20002042:	f04f 0200 	mov.w	r2, #0
20002046:	63a2      	str	r2, [r4, #56]	; 0x38
    
    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20002048:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    this_i2c->options = options;
2000204c:	f884 8010 	strb.w	r8, [r4, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20002050:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
20002054:	2b01      	cmp	r3, #1
    {
        this_i2c->is_transaction_pending = 1u;
20002056:	bf0f      	iteee	eq
20002058:	f884 3071 	strbeq.w	r3, [r4, #113]	; 0x71
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
2000205c:	69a3      	ldrne	r3, [r4, #24]
2000205e:	2201      	movne	r2, #1
20002060:	615a      	strne	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
20002062:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
20002066:	2b01      	cmp	r3, #1
20002068:	d11d      	bne.n	200020a6 <MSS_I2C_read+0xb6>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
2000206a:	69a3      	ldr	r3, [r4, #24]
2000206c:	f04f 0200 	mov.w	r2, #0
20002070:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
20002072:	6963      	ldr	r3, [r4, #20]
20002074:	791b      	ldrb	r3, [r3, #4]
20002076:	f88d 3007 	strb.w	r3, [sp, #7]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
2000207a:	f89d 3007 	ldrb.w	r3, [sp, #7]
2000207e:	f88d 3007 	strb.w	r3, [sp, #7]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
20002082:	8a63      	ldrh	r3, [r4, #18]
20002084:	b21a      	sxth	r2, r3
20002086:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000208a:	f003 031f 	and.w	r3, r3, #31
2000208e:	f04f 0101 	mov.w	r1, #1
20002092:	fa01 f103 	lsl.w	r1, r1, r3
20002096:	f24e 1300 	movw	r3, #57600	; 0xe100
2000209a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000209e:	f102 0260 	add.w	r2, r2, #96	; 0x60
200020a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
    
    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
200020a6:	8a63      	ldrh	r3, [r4, #18]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200020a8:	b21a      	sxth	r2, r3
200020aa:	ea4f 1252 	mov.w	r2, r2, lsr #5
200020ae:	f003 031f 	and.w	r3, r3, #31
200020b2:	f04f 0101 	mov.w	r1, #1
200020b6:	fa01 f103 	lsl.w	r1, r1, r3
200020ba:	f24e 1300 	movw	r3, #57600	; 0xe100
200020be:	f2ce 0300 	movt	r3, #57344	; 0xe000
200020c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    restore_interrupts( primask );
200020c6:	f7ff ff8f 	bl	20001fe8 <restore_interrupts>
}
200020ca:	b002      	add	sp, #8
200020cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

200020d0 <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
200020d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
200020d4:	b082      	sub	sp, #8
200020d6:	4604      	mov	r4, r0
200020d8:	460d      	mov	r5, r1
200020da:	4616      	mov	r6, r2
200020dc:	461f      	mov	r7, r3
200020de:	f89d 8020 	ldrb.w	r8, [sp, #32]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
200020e2:	f642 1324 	movw	r3, #10532	; 0x2924
200020e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020ea:	4298      	cmp	r0, r3
200020ec:	d006      	beq.n	200020fc <MSS_I2C_write+0x2c>
200020ee:	f642 1398 	movw	r3, #10648	; 0x2998
200020f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200020f6:	4298      	cmp	r0, r3
200020f8:	d000      	beq.n	200020fc <MSS_I2C_write+0x2c>
200020fa:	be00      	bkpt	0x0000

    primask = disable_interrupts();
200020fc:	f7ff ff6a 	bl	20001fd4 <disable_interrupts>

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20002100:	7a23      	ldrb	r3, [r4, #8]
20002102:	b913      	cbnz	r3, 2000210a <MSS_I2C_write+0x3a>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
20002104:	f04f 0301 	mov.w	r3, #1
20002108:	7223      	strb	r3, [r4, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
2000210a:	f04f 0301 	mov.w	r3, #1
2000210e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20002112:	fa05 f503 	lsl.w	r5, r5, r3
20002116:	6065      	str	r5, [r4, #4]

    this_i2c->dir = WRITE_DIR;
20002118:	f04f 0200 	mov.w	r2, #0
2000211c:	62e2      	str	r2, [r4, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
2000211e:	6226      	str	r6, [r4, #32]
    this_i2c->master_tx_size = write_size;
20002120:	6267      	str	r7, [r4, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
20002122:	62a2      	str	r2, [r4, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20002124:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    this_i2c->options = options;
20002128:	f884 8010 	strb.w	r8, [r4, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
2000212c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
20002130:	2b01      	cmp	r3, #1
    {
        this_i2c->is_transaction_pending = 1u;
20002132:	bf0f      	iteee	eq
20002134:	f884 3071 	strbeq.w	r3, [r4, #113]	; 0x71
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20002138:	69a3      	ldrne	r3, [r4, #24]
2000213a:	2201      	movne	r2, #1
2000213c:	615a      	strne	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
2000213e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
20002142:	2b01      	cmp	r3, #1
20002144:	d11d      	bne.n	20002182 <MSS_I2C_write+0xb2>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20002146:	69a3      	ldr	r3, [r4, #24]
20002148:	f04f 0200 	mov.w	r2, #0
2000214c:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
2000214e:	6963      	ldr	r3, [r4, #20]
20002150:	791b      	ldrb	r3, [r3, #4]
20002152:	f88d 3007 	strb.w	r3, [sp, #7]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20002156:	f89d 3007 	ldrb.w	r3, [sp, #7]
2000215a:	f88d 3007 	strb.w	r3, [sp, #7]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
2000215e:	8a63      	ldrh	r3, [r4, #18]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002160:	b21a      	sxth	r2, r3
20002162:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002166:	f003 031f 	and.w	r3, r3, #31
2000216a:	f04f 0101 	mov.w	r1, #1
2000216e:	fa01 f103 	lsl.w	r1, r1, r3
20002172:	f24e 1300 	movw	r3, #57600	; 0xe100
20002176:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000217a:	f102 0260 	add.w	r2, r2, #96	; 0x60
2000217e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20002182:	8a63      	ldrh	r3, [r4, #18]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20002184:	b21a      	sxth	r2, r3
20002186:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000218a:	f003 031f 	and.w	r3, r3, #31
2000218e:	f04f 0101 	mov.w	r1, #1
20002192:	fa01 f103 	lsl.w	r1, r1, r3
20002196:	f24e 1300 	movw	r3, #57600	; 0xe100
2000219a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000219e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    restore_interrupts( primask );
200021a2:	f7ff ff21 	bl	20001fe8 <restore_interrupts>
}
200021a6:	b002      	add	sp, #8
200021a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

200021ac <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
200021ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
200021b0:	4604      	mov	r4, r0
200021b2:	460e      	mov	r6, r1
200021b4:	4615      	mov	r5, r2
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200021b6:	f642 1324 	movw	r3, #10532	; 0x2924
200021ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021be:	4298      	cmp	r0, r3
200021c0:	d007      	beq.n	200021d2 <MSS_I2C_init+0x26>
200021c2:	f642 1398 	movw	r3, #10648	; 0x2998
200021c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200021ca:	4298      	cmp	r0, r3
200021cc:	d04f      	beq.n	2000226e <MSS_I2C_init+0xc2>
200021ce:	be00      	bkpt	0x0000
200021d0:	e04d      	b.n	2000226e <MSS_I2C_init+0xc2>
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
200021d2:	f7ff feff 	bl	20001fd4 <disable_interrupts>
200021d6:	4607      	mov	r7, r0
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
200021d8:	f642 1824 	movw	r8, #10532	; 0x2924
200021dc:	f2c2 0800 	movt	r8, #8192	; 0x2000
200021e0:	4640      	mov	r0, r8
200021e2:	f04f 0100 	mov.w	r1, #0
200021e6:	f04f 0274 	mov.w	r2, #116	; 0x74
200021ea:	f000 f931 	bl	20002450 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
    {
        this_i2c->irqn = I2C0_IRQn;
200021ee:	f04f 030e 	mov.w	r3, #14
200021f2:	f8a8 3012 	strh.w	r3, [r8, #18]
        this_i2c->hw_reg = I2C0;
200021f6:	f242 0300 	movw	r3, #8192	; 0x2000
200021fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
200021fe:	f8c8 3014 	str.w	r3, [r8, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
20002202:	f240 0300 	movw	r3, #0
20002206:	f2c4 2304 	movt	r3, #16900	; 0x4204
2000220a:	f8c8 3018 	str.w	r3, [r8, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
2000220e:	f242 0300 	movw	r3, #8192	; 0x2000
20002212:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
2000221c:	631a      	str	r2, [r3, #48]	; 0x30
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000221e:	f24e 1200 	movw	r2, #57600	; 0xe100
20002222:	f2ce 0200 	movt	r2, #57344	; 0xe000
20002226:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2000222a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
2000222e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20002234:	631a      	str	r2, [r3, #48]	; 0x30
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
20002236:	69a3      	ldr	r3, [r4, #24]
20002238:	61e3      	str	r3, [r4, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
2000223a:	ea4f 0646 	mov.w	r6, r6, lsl #1
2000223e:	6026      	str	r6, [r4, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
20002240:	f3c5 0280 	ubfx	r2, r5, #2, #1
20002244:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
20002246:	69a3      	ldr	r3, [r4, #24]
20002248:	f3c5 0240 	ubfx	r2, r5, #1, #1
2000224c:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
2000224e:	69a3      	ldr	r3, [r4, #24]
20002250:	f005 0501 	and.w	r5, r5, #1
20002254:	601d      	str	r5, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
20002256:	6963      	ldr	r3, [r4, #20]
20002258:	7822      	ldrb	r2, [r4, #0]
2000225a:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
2000225c:	69a3      	ldr	r3, [r4, #24]
2000225e:	f04f 0201 	mov.w	r2, #1
20002262:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
20002264:	4638      	mov	r0, r7
20002266:	f7ff febf 	bl	20001fe8 <restore_interrupts>
}
2000226a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
2000226e:	f7ff feb1 	bl	20001fd4 <disable_interrupts>
20002272:	4607      	mov	r7, r0
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
20002274:	4620      	mov	r0, r4
20002276:	f04f 0100 	mov.w	r1, #0
2000227a:	f04f 0274 	mov.w	r2, #116	; 0x74
2000227e:	f000 f8e7 	bl	20002450 <memset>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20002282:	f04f 0311 	mov.w	r3, #17
20002286:	8263      	strh	r3, [r4, #18]
        this_i2c->hw_reg = I2C1;
20002288:	f242 0300 	movw	r3, #8192	; 0x2000
2000228c:	f2c4 0301 	movt	r3, #16385	; 0x4001
20002290:	6163      	str	r3, [r4, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
20002292:	f240 0300 	movw	r3, #0
20002296:	f2c4 2324 	movt	r3, #16932	; 0x4224
2000229a:	61a3      	str	r3, [r4, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
2000229c:	f242 0300 	movw	r3, #8192	; 0x2000
200022a0:	f2ce 0304 	movt	r3, #57348	; 0xe004
200022a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200022a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
200022aa:	631a      	str	r2, [r3, #48]	; 0x30
200022ac:	f24e 1200 	movw	r2, #57600	; 0xe100
200022b0:	f2ce 0200 	movt	r2, #57344	; 0xe000
200022b4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
200022b8:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
200022bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200022be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
200022c2:	631a      	str	r2, [r3, #48]	; 0x30
200022c4:	e7b7      	b.n	20002236 <MSS_I2C_init+0x8a>
200022c6:	bf00      	nop

200022c8 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
200022c8:	b410      	push	{r4}
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
200022ca:	f242 0300 	movw	r3, #8192	; 0x2000
200022ce:	f2ce 0304 	movt	r3, #57348	; 0xe004
200022d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200022d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200022d8:	631a      	str	r2, [r3, #48]	; 0x30
200022da:	f04f 0300 	mov.w	r3, #0
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
200022de:	f242 5050 	movw	r0, #9552	; 0x2550
200022e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200022e6:	f04f 0c01 	mov.w	ip, #1
200022ea:	f24e 1400 	movw	r4, #57600	; 0xe100
200022ee:	f2ce 0400 	movt	r4, #57344	; 0xe000
200022f2:	5ac2      	ldrh	r2, [r0, r3]
200022f4:	b211      	sxth	r1, r2
200022f6:	ea4f 1151 	mov.w	r1, r1, lsr #5
200022fa:	f002 021f 	and.w	r2, r2, #31
200022fe:	fa0c f202 	lsl.w	r2, ip, r2
20002302:	f101 0160 	add.w	r1, r1, #96	; 0x60
20002306:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
2000230a:	f103 0302 	add.w	r3, r3, #2
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
2000230e:	2b40      	cmp	r3, #64	; 0x40
20002310:	d1ef      	bne.n	200022f2 <MSS_GPIO_init+0x2a>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
20002312:	f242 0300 	movw	r3, #8192	; 0x2000
20002316:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000231a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000231c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20002320:	631a      	str	r2, [r3, #48]	; 0x30
}
20002322:	bc10      	pop	{r4}
20002324:	4770      	bx	lr
20002326:	bf00      	nop

20002328 <MSS_GPIO_config>:
    uint32_t config
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20002328:	281f      	cmp	r0, #31
2000232a:	d901      	bls.n	20002330 <MSS_GPIO_config+0x8>
2000232c:	be00      	bkpt	0x0000
2000232e:	4770      	bx	lr

    if ( gpio_idx < NB_OF_GPIO )
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20002330:	f242 5390 	movw	r3, #9616	; 0x2590
20002334:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002338:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
2000233c:	6019      	str	r1, [r3, #0]
2000233e:	4770      	bx	lr

20002340 <MSS_GPIO_set_output>:
    uint8_t             value
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20002340:	281f      	cmp	r0, #31
20002342:	d901      	bls.n	20002348 <MSS_GPIO_set_output+0x8>
20002344:	be00      	bkpt	0x0000
20002346:	4770      	bx	lr
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        GPIO_BITBAND->GPIO_OUT[gpio_idx] = (uint32_t)value;
20002348:	f240 0300 	movw	r3, #0
2000234c:	f2c4 2326 	movt	r3, #16934	; 0x4226
20002350:	f500 6088 	add.w	r0, r0, #1088	; 0x440
20002354:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
20002358:	4770      	bx	lr
2000235a:	bf00      	nop

2000235c <MSS_GPIO_enable_irq>:
)
{
    uint32_t cfg_value;
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
2000235c:	281f      	cmp	r0, #31
2000235e:	d901      	bls.n	20002364 <MSS_GPIO_enable_irq+0x8>
20002360:	be00      	bkpt	0x0000
20002362:	4770      	bx	lr
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        cfg_value = *(g_config_reg_lut[gpio_idx]);
20002364:	f242 5390 	movw	r3, #9616	; 0x2590
20002368:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000236c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
20002370:	681a      	ldr	r2, [r3, #0]
        *(g_config_reg_lut[gpio_idx]) = (cfg_value | GPIO_INT_ENABLE_MASK);
20002372:	f042 0208 	orr.w	r2, r2, #8
20002376:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ( g_gpio_irqn_lut[gpio_idx] );
20002378:	f242 5350 	movw	r3, #9552	; 0x2550
2000237c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002380:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20002384:	b21a      	sxth	r2, r3
20002386:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000238a:	f003 031f 	and.w	r3, r3, #31
2000238e:	f04f 0101 	mov.w	r1, #1
20002392:	fa01 f103 	lsl.w	r1, r1, r3
20002396:	f24e 1300 	movw	r3, #57600	; 0xe100
2000239a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000239e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
200023a2:	4770      	bx	lr

200023a4 <MSS_GPIO_clear_irq>:
    mss_gpio_id_t port_id
)
{
    uint32_t gpio_idx = (uint32_t)port_id;
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200023a4:	281f      	cmp	r0, #31
200023a6:	d901      	bls.n	200023ac <MSS_GPIO_clear_irq+0x8>
200023a8:	be00      	bkpt	0x0000
200023aa:	4770      	bx	lr
    
    if ( gpio_idx < NB_OF_GPIO )
    {
        GPIO->GPIO_IRQ = ((uint32_t)1) << gpio_idx;
200023ac:	f04f 0201 	mov.w	r2, #1
200023b0:	fa02 f100 	lsl.w	r1, r2, r0
200023b4:	f243 0300 	movw	r3, #12288	; 0x3000
200023b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
200023bc:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[gpio_idx] );
200023c0:	f242 5350 	movw	r3, #9552	; 0x2550
200023c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023c8:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
200023cc:	b219      	sxth	r1, r3
200023ce:	ea4f 1151 	mov.w	r1, r1, lsr #5
200023d2:	f003 031f 	and.w	r3, r3, #31
200023d6:	fa02 f203 	lsl.w	r2, r2, r3
200023da:	f24e 1300 	movw	r3, #57600	; 0xe100
200023de:	f2ce 0300 	movt	r3, #57344	; 0xe000
200023e2:	f101 0160 	add.w	r1, r1, #96	; 0x60
200023e6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
200023ea:	4770      	bx	lr

200023ec <__get_PRIMASK>:
 */
uint32_t __get_PRIMASK(void)
{
  uint32_t result=0;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200023ec:	f3ef 8010 	mrs	r0, PRIMASK
  return(result);
}
200023f0:	4770      	bx	lr
200023f2:	bf00      	nop

200023f4 <__set_PRIMASK>:
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
200023f4:	f380 8810 	msr	PRIMASK, r0
}
200023f8:	4770      	bx	lr
200023fa:	bf00      	nop

200023fc <SystemInit>:
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
200023fc:	4770      	bx	lr
200023fe:	bf00      	nop

20002400 <__libc_init_array>:
20002400:	b570      	push	{r4, r5, r6, lr}
20002402:	f242 6628 	movw	r6, #9768	; 0x2628
20002406:	f242 6528 	movw	r5, #9768	; 0x2628
2000240a:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000240e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20002412:	1b76      	subs	r6, r6, r5
20002414:	10b6      	asrs	r6, r6, #2
20002416:	d006      	beq.n	20002426 <__libc_init_array+0x26>
20002418:	2400      	movs	r4, #0
2000241a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000241e:	3401      	adds	r4, #1
20002420:	4798      	blx	r3
20002422:	42a6      	cmp	r6, r4
20002424:	d8f9      	bhi.n	2000241a <__libc_init_array+0x1a>
20002426:	f242 6528 	movw	r5, #9768	; 0x2628
2000242a:	f242 662c 	movw	r6, #9772	; 0x262c
2000242e:	f2c2 0500 	movt	r5, #8192	; 0x2000
20002432:	f2c2 0600 	movt	r6, #8192	; 0x2000
20002436:	1b76      	subs	r6, r6, r5
20002438:	f000 f8ea 	bl	20002610 <_init>
2000243c:	10b6      	asrs	r6, r6, #2
2000243e:	d006      	beq.n	2000244e <__libc_init_array+0x4e>
20002440:	2400      	movs	r4, #0
20002442:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20002446:	3401      	adds	r4, #1
20002448:	4798      	blx	r3
2000244a:	42a6      	cmp	r6, r4
2000244c:	d8f9      	bhi.n	20002442 <__libc_init_array+0x42>
2000244e:	bd70      	pop	{r4, r5, r6, pc}

20002450 <memset>:
20002450:	2a03      	cmp	r2, #3
20002452:	b2c9      	uxtb	r1, r1
20002454:	b430      	push	{r4, r5}
20002456:	d807      	bhi.n	20002468 <memset+0x18>
20002458:	b122      	cbz	r2, 20002464 <memset+0x14>
2000245a:	2300      	movs	r3, #0
2000245c:	54c1      	strb	r1, [r0, r3]
2000245e:	3301      	adds	r3, #1
20002460:	4293      	cmp	r3, r2
20002462:	d1fb      	bne.n	2000245c <memset+0xc>
20002464:	bc30      	pop	{r4, r5}
20002466:	4770      	bx	lr
20002468:	eb00 0c02 	add.w	ip, r0, r2
2000246c:	4603      	mov	r3, r0
2000246e:	e001      	b.n	20002474 <memset+0x24>
20002470:	f803 1c01 	strb.w	r1, [r3, #-1]
20002474:	f003 0403 	and.w	r4, r3, #3
20002478:	461a      	mov	r2, r3
2000247a:	3301      	adds	r3, #1
2000247c:	2c00      	cmp	r4, #0
2000247e:	d1f7      	bne.n	20002470 <memset+0x20>
20002480:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20002484:	ebc2 040c 	rsb	r4, r2, ip
20002488:	fb03 f301 	mul.w	r3, r3, r1
2000248c:	e01f      	b.n	200024ce <memset+0x7e>
2000248e:	f842 3c40 	str.w	r3, [r2, #-64]
20002492:	f842 3c3c 	str.w	r3, [r2, #-60]
20002496:	f842 3c38 	str.w	r3, [r2, #-56]
2000249a:	f842 3c34 	str.w	r3, [r2, #-52]
2000249e:	f842 3c30 	str.w	r3, [r2, #-48]
200024a2:	f842 3c2c 	str.w	r3, [r2, #-44]
200024a6:	f842 3c28 	str.w	r3, [r2, #-40]
200024aa:	f842 3c24 	str.w	r3, [r2, #-36]
200024ae:	f842 3c20 	str.w	r3, [r2, #-32]
200024b2:	f842 3c1c 	str.w	r3, [r2, #-28]
200024b6:	f842 3c18 	str.w	r3, [r2, #-24]
200024ba:	f842 3c14 	str.w	r3, [r2, #-20]
200024be:	f842 3c10 	str.w	r3, [r2, #-16]
200024c2:	f842 3c0c 	str.w	r3, [r2, #-12]
200024c6:	f842 3c08 	str.w	r3, [r2, #-8]
200024ca:	f842 3c04 	str.w	r3, [r2, #-4]
200024ce:	4615      	mov	r5, r2
200024d0:	3240      	adds	r2, #64	; 0x40
200024d2:	2c3f      	cmp	r4, #63	; 0x3f
200024d4:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
200024d8:	dcd9      	bgt.n	2000248e <memset+0x3e>
200024da:	462a      	mov	r2, r5
200024dc:	ebc5 040c 	rsb	r4, r5, ip
200024e0:	e007      	b.n	200024f2 <memset+0xa2>
200024e2:	f842 3c10 	str.w	r3, [r2, #-16]
200024e6:	f842 3c0c 	str.w	r3, [r2, #-12]
200024ea:	f842 3c08 	str.w	r3, [r2, #-8]
200024ee:	f842 3c04 	str.w	r3, [r2, #-4]
200024f2:	4615      	mov	r5, r2
200024f4:	3210      	adds	r2, #16
200024f6:	2c0f      	cmp	r4, #15
200024f8:	f1a4 0410 	sub.w	r4, r4, #16
200024fc:	dcf1      	bgt.n	200024e2 <memset+0x92>
200024fe:	462a      	mov	r2, r5
20002500:	ebc5 050c 	rsb	r5, r5, ip
20002504:	e001      	b.n	2000250a <memset+0xba>
20002506:	f842 3c04 	str.w	r3, [r2, #-4]
2000250a:	4614      	mov	r4, r2
2000250c:	3204      	adds	r2, #4
2000250e:	2d03      	cmp	r5, #3
20002510:	f1a5 0504 	sub.w	r5, r5, #4
20002514:	dcf7      	bgt.n	20002506 <memset+0xb6>
20002516:	e001      	b.n	2000251c <memset+0xcc>
20002518:	f804 1b01 	strb.w	r1, [r4], #1
2000251c:	4564      	cmp	r4, ip
2000251e:	d3fb      	bcc.n	20002518 <memset+0xc8>
20002520:	e7a0      	b.n	20002464 <memset+0x14>
20002522:	bf00      	nop

20002524 <frame_size>:
20002524:	0810                                             .

20002525 <burst_frame_size>:
20002525:	0008 9b00                                        ...

20002528 <C.18.4167>:
20002528:	469b 890e                                   .F..

2000252c <C.19.4168>:
2000252c:	56a8 0010                                   .V..

20002530 <PN532_ACK_FRAME>:
20002530:	0001 ff00 ff00 0000                         ........

20002538 <PN532_NACK_FRAME>:
20002538:	0001 ff00 00ff 0000                         ........

20002540 <PN532_INLISTPASSIVETARGET_INFO>:
20002540:	0001 0000                                   ....

20002544 <PN532_SAMCONFIG_INFO>:
20002544:	1401 0001                                   ....

20002548 <NFC_ACK_LENGTH>:
20002548:	6407                                             .

20002549 <NFC_RESPONSE_BUFFER_LENGTH>:
20002549:	0064 0100                                        d..

2000254c <C.33.4037>:
2000254c:	1401 0001                                   ....

20002550 <g_gpio_irqn_lut>:
20002550:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
20002560:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
20002570:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
20002580:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.

20002590 <g_config_reg_lut>:
20002590:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
200025a0:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
200025b0:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
200025c0:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
200025d0:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
200025e0:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
200025f0:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20002600:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

20002610 <_init>:
20002610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002612:	bf00      	nop
20002614:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002616:	bc08      	pop	{r3}
20002618:	469e      	mov	lr, r3
2000261a:	4770      	bx	lr

2000261c <_fini>:
2000261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000261e:	bf00      	nop
20002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002622:	bc08      	pop	{r3}
20002624:	469e      	mov	lr, r3
20002626:	4770      	bx	lr

20002628 <__frame_dummy_init_array_entry>:
20002628:	0485 2000                                   ... 

2000262c <__do_global_dtors_aux_fini_array_entry>:
2000262c:	0471 2000                                   q.. 
